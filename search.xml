<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>testpage</title>
    <url>/undefined/</url>
    <content><![CDATA[<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
<p>吊日子没法过了</p>
]]></content>
  </entry>
  <entry>
    <title>【C/C++】C++下的简易中国象棋</title>
    <url>/zhong-guo-xiang-qi/</url>
    <content><![CDATA[<blockquote>
<p>参考自Originum学长的博客，个人进行了一些小修改，<br>原博客地址：<a href="https://blog.csdn.net/Originum/article/details/80356452">https://blog.csdn.net/Originum/article/details/80356452</a><br>联系邮箱：<a href="mailto:&#x4f;&#114;&#105;&#x67;&#x69;&#x6e;&#117;&#x6d;&#x40;&#x31;&#50;&#54;&#46;&#99;&#111;&#x6d;">&#x4f;&#114;&#105;&#x67;&#x69;&#x6e;&#117;&#x6d;&#x40;&#x31;&#50;&#54;&#46;&#99;&#111;&#x6d;</a></p>
</blockquote>
<p>一个简单的中国象棋游戏，主要实现：<br>1、两人对弈；<br>2、简单的棋子移动以及规则判断，不符合规则便重走；<br>3、有一方获胜便结束游戏。</p>
<a id="more"></a>

<h2 id="一、类的设计"><a href="#一、类的设计" class="headerlink" title="一、类的设计"></a>一、类的设计</h2><ol>
<li>“Chess”类：<br>(1) 私有成员有int型的Id，用于记录棋子的归属以及判断轮到的玩家是否可以移动；<br>(2) 公共成员函数有Get函数来获取Id，以及判断走法是否正确的Judgement纯虚函数；<br>(3) 作为基类来派生出其他棋子的类。</li>
</ol>
<p>具体代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chess</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Chess(<span class="keyword">int</span> x) :Id(x) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">()</span>                <span class="comment">//取ID</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span> </span>= <span class="number">0</span>;<span class="comment">//判断走步合理性</span></span><br><span class="line">	<span class="keyword">virtual</span> ~Chess() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>“Chessboard”类：</p>
<p>(1) 私有成员有一个10*11的指向Chess类的指针（为了方便操作将0的位置腾了出来），用于存放棋子的地址；<br>(2) 还有一个Char型的Chessword数组用于存放棋子的名字（一个汉字占4个Char型空间）；<br>(3) 公共成员部分有static int型的 Player用于记录轮到哪个玩家以及哪个玩家获胜。</p>
</li>
</ol>
<p>具体实现代码如下：<br>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Chessboard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Chess *c[<span class="number">10</span>][<span class="number">11</span>];        <span class="comment">//棋盘：X为横（9），Y为纵（10），从1开始记</span></span><br><span class="line">	<span class="keyword">char</span> Chessword[<span class="number">15</span>][<span class="number">4</span>] = &#123; <span class="string">&quot;兵&quot;</span>,<span class="string">&quot;炮&quot;</span>,<span class="string">&quot;车&quot;</span>,<span class="string">&quot;马&quot;</span>,<span class="string">&quot;相&quot;</span>,<span class="string">&quot;仕&quot;</span>,<span class="string">&quot;帅&quot;</span>,<span class="string">&quot; &quot;</span>,<span class="string">&quot;将&quot;</span>,<span class="string">&quot;士&quot;</span>,<span class="string">&quot;象&quot;</span>,<span class="string">&quot;馬&quot;</span>,<span class="string">&quot;車&quot;</span>,<span class="string">&quot;砲&quot;</span>,<span class="string">&quot;卒&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> Player;       <span class="comment">//上半区为1，下半区为-1</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">bool</span> End;         <span class="comment">//判断是否结束</span></span><br><span class="line">	Chessboard();</span><br><span class="line">	<span class="function">Chess *<span class="title">Get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//返回指定点的指针</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Getid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//返回指定点处棋子ID的指针</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span>;	<span class="comment">//移动</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;               <span class="comment">//初始化棋子</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;               <span class="comment">//打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Play</span><span class="params">()</span></span>;               <span class="comment">//开始游戏</span></span><br><span class="line">	~Chessboard();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="二、具体变量的意义"><a href="#二、具体变量的意义" class="headerlink" title="二、具体变量的意义"></a>二、具体变量的意义</h2><p>红方棋子：”兵”,”炮”,”车”,”马”,”相”,”仕”,”帅”<br>Id为：7 6 5 4 3 2 1<br>绿方棋子：”将”,”士”,”象”,”馬”,”車”,”砲”,”卒”<br>Id为：-1 -2 - 3 -4 -5 -6 -7</p>
<p>用于实现移动的变量：<br>startx，starty: 开始的位置；<br>endx，endy：目标的位置；<br>S_Id: 存储开始位置的棋子的编号，若该点没有棋子（空指针），则值为0；<br>E_Id: 存储目标位置的棋子的编号，若该点没有棋子（空指针），则值为0；<br>TempX: 开始位置到目标位置的x坐标的偏移量（startx-endx）；<br>TempY: 开始位置到目标位置的y坐标的偏移量（starty-endy）。</p>
<h2 id="三、实现走棋"><a href="#三、实现走棋" class="headerlink" title="三、实现走棋"></a>三、实现走棋</h2><p>每次把位置信息传到Chessboard类的Move()函数时，会判断：</p>
<ol>
<li>传入的两个位置是否越界（超出了10*11数组的范围），越界则返回false。</li>
<li>传入的开始位置的点的id是否为零（当点上无棋子，也就是空指针的时候为零），若为零则返回false。</li>
<li>当前选的棋子是否是这一回对应那一方的棋子，若不是则返回false。</li>
<li>对当前棋子的具体规则进行判断（通过指针调用虚函数，判断该棋子的具体规则）。若错误则返回false。</li>
</ol>
<p>若以上判断都准确无误，则把棋子走到对应位置：</p>
<ol>
<li>不吃子：目标位置为空指针时，把目标位置的指针指向该棋子对象，把棋子的起始位置指针赋值NULL，设为空指针。</li>
<li>吃子：delete目标位置的棋子对象，该棋子被吃。把目标位置的指针指向该棋子对象，把棋子的起始位置指针赋值NULL，设为空指针。</li>
</ol>
<h2 id="四、判断结束"><a href="#四、判断结束" class="headerlink" title="四、判断结束"></a>四、判断结束</h2><p>判断结束：</p>
<ol>
<li><p>棋盘类有一个静态变量bool End, 初始化为true。当将(帅)对象被析构时，把end赋值为false，表示棋局结束，退出走棋的循环(while(chessboard :: end)控制走棋是否继续)。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">~General()</span><br><span class="line">	&#123;</span><br><span class="line">		Chessboard::End = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当有一位玩家的某一步棋使双方的将（帅）面对面时，直接判负。具体实现是检测将（帅）所在的4、5、6 三列中将和帅是否在同一类且两者间的指针为全为空指针；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ifalg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (c[i][j] != <span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> ((<span class="keyword">int</span>)<span class="built_in">fabs</span>(c[i][j]-&gt;Get()) == <span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						iflag++;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (iflag != <span class="number">0</span> &amp;&amp; iflag != <span class="number">2</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> ((<span class="keyword">int</span>)<span class="built_in">fabs</span>(c[i][j]-&gt;Get()) != <span class="number">1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							iflag--;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (iflag == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Player *= <span class="number">-1</span>;</span><br><span class="line">			Chessboard::End = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>输出胜利的一方的信息:<br>棋盘类有一个静态变量int player,初始化为-1，每走棋一次乘以-1，在1与-1之间交替表示棋手的轮流下棋。以此来鉴别胜利的是哪一方</p>
<h2 id="五、某些棋子的规则算法"><a href="#五、某些棋子的规则算法" class="headerlink" title="五、某些棋子的规则算法"></a>五、某些棋子的规则算法</h2></li>
<li><p>判断目标点是否是己方的棋：两方的子的Id互为相反数，所以只有当S_Id* E_Id&gt;0时表示目标位置是己方的子，不能走。因而只有满足S_Id*E_Id&lt;=0才是合法条件（空位置为0）。</p>
</li>
<li><p>判断是否满足只能走1格，或马走日，象走田的条件时，只需要区偏移的距离进行判断。例如TempX*TempX+TempY+TempY表示偏移量的平方，当该值为1时，表示只走了任意方向的一格;当值为2时，表示士的斜走;值为5时，表示马走日；为8时，表示象走田。</p>
</li>
<li><p>判断马走日的蹩脚马时，用数学计算方法，可以归纳出只需判断(X+TempX/2,Y+TempY/2)位置是否有子便可。而判断塞象时，只用判段(X+TempX/2,Y+TempY/2)的位置是否有子即可。</p>
</li>
<li><p>判断将(帅)和士是否在3*3的营里只需看其坐标是否在(endx &gt;= 4 &amp;&amp; endx &lt;= 6) &amp;&amp; (endy &gt;= 1 &amp;&amp; endy &lt;= 3 || endy &gt;= 8 &amp;&amp; endy &lt;= 10)中。</p>
</li>
</ol>
<h2 id="六、棋盘的背景颜色以及棋子的颜色更改和每步的刷新棋盘"><a href="#六、棋盘的背景颜色以及棋子的颜色更改和每步的刷新棋盘" class="headerlink" title="六、棋盘的背景颜色以及棋子的颜色更改和每步的刷新棋盘"></a>六、棋盘的背景颜色以及棋子的颜色更改和每步的刷新棋盘</h2><ol>
<li>刷新棋盘很简单，只需在每次的Show()之前加函数如下即可<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">system(<span class="string">&quot;cls&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>棋盘及棋子颜色由windows.h头文件中的函数实现，具体如下<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line">    HANDLE handle;</span><br><span class="line">	handle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">	SetConsoleTextAttribute(handle, <span class="number">0xFC</span>);</span><br></pre></td></tr></table></figure>
其中0xFC中F为字体的背景色，C为字体色；只有如0xF这种情况只改字体颜色！！！切记！！！！<br>附上颜色表：<table>
<thead>
<tr>
<th>0 = 黑色</th>
<th>8 = 灰色</th>
</tr>
</thead>
<tbody><tr>
<td>1 = 蓝色</td>
<td>9 = 淡蓝色</td>
</tr>
<tr>
<td>2 = 绿色</td>
<td>A = 淡绿色</td>
</tr>
<tr>
<td>3 = 浅绿色</td>
<td>B = 淡浅绿色</td>
</tr>
<tr>
<td>4 = 红色</td>
<td>C = 淡红色</td>
</tr>
<tr>
<td>5 = 紫色</td>
<td>D = 淡紫色</td>
</tr>
<tr>
<td>6 = 黄色</td>
<td>E = 淡黄色</td>
</tr>
<tr>
<td>7 = 白色</td>
<td>F = 亮白色</td>
</tr>
</tbody></table>
<h2 id="PS：附上完整代码"><a href="#PS：附上完整代码" class="headerlink" title="PS：附上完整代码"></a>PS：附上完整代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chessboard</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chess</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> Id;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Chess(<span class="keyword">int</span> x) :Id(x) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">()</span>                <span class="comment">//取ID</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span> </span>= <span class="number">0</span>;<span class="comment">//判断走步合理性</span></span><br><span class="line">	<span class="keyword">virtual</span> ~Chess() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chessboard</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Chess *c[<span class="number">10</span>][<span class="number">11</span>];        <span class="comment">//棋盘：X为横（9），Y为纵（10），从1开始记</span></span><br><span class="line">	<span class="keyword">char</span> Chessword[<span class="number">15</span>][<span class="number">4</span>] = &#123; <span class="string">&quot;兵&quot;</span>,<span class="string">&quot;炮&quot;</span>,<span class="string">&quot;车&quot;</span>,<span class="string">&quot;马&quot;</span>,<span class="string">&quot;相&quot;</span>,<span class="string">&quot;仕&quot;</span>,<span class="string">&quot;帅&quot;</span>,<span class="string">&quot; &quot;</span>,<span class="string">&quot;将&quot;</span>,<span class="string">&quot;士&quot;</span>,<span class="string">&quot;象&quot;</span>,<span class="string">&quot;馬&quot;</span>,<span class="string">&quot;車&quot;</span>,<span class="string">&quot;砲&quot;</span>,<span class="string">&quot;卒&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> Player;       <span class="comment">//上半区为1，下半区为-1</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">bool</span> End;         <span class="comment">//判断是否结束</span></span><br><span class="line">	Chessboard();</span><br><span class="line">	<span class="function">Chess *<span class="title">Get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//返回指定点的指针</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Getid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//返回指定点处棋子ID的指针</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span>;	<span class="comment">//移动</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;               <span class="comment">//初始化棋子</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span>;               <span class="comment">//打印</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Play</span><span class="params">()</span></span>;               <span class="comment">//开始游戏</span></span><br><span class="line">	~Chessboard();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">General</span> :</span><span class="keyword">public</span> Chess<span class="comment">//将、帅类，ID为-1和1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	General(<span class="keyword">int</span> i) :Chess((i == <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> TempX = startx - endx;</span><br><span class="line">		<span class="keyword">int</span> TempY = starty - endy;</span><br><span class="line">		<span class="keyword">int</span> S_Id = ch.Getid(startx, starty);</span><br><span class="line">		<span class="keyword">int</span> E_Id = ch.Getid(endx, endy);</span><br><span class="line">		<span class="keyword">if</span> ((S_Id*E_Id &lt;= <span class="number">0</span>) &amp;&amp; (TempX*TempX + TempY * TempY == <span class="number">1</span>) &amp;&amp; (endx &gt;= <span class="number">4</span> &amp;&amp; endx &lt;= <span class="number">6</span>) &amp;&amp; (endy &gt;= <span class="number">1</span> &amp;&amp; endy &lt;= <span class="number">3</span> || endy &gt;= <span class="number">8</span> &amp;&amp; endy &lt;= <span class="number">10</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~General()</span><br><span class="line">	&#123;</span><br><span class="line">		Chessboard::End = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BodyGuard</span> :</span><span class="keyword">public</span> Chess<span class="comment">//士、仕类，ID为-2和2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	BodyGuard(<span class="keyword">int</span> i) :Chess((i == <span class="number">0</span> ? <span class="number">-2</span> : <span class="number">2</span>)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> TempX = startx - endx;</span><br><span class="line">		<span class="keyword">int</span> TempY = starty - endy;</span><br><span class="line">		<span class="keyword">int</span> S_Id = ch.Getid(startx, starty);</span><br><span class="line">		<span class="keyword">int</span> E_Id = ch.Getid(endx, endy);</span><br><span class="line">		<span class="keyword">if</span> ((S_Id*E_Id &lt;= <span class="number">0</span>) &amp;&amp; (TempX*TempX + TempY * TempY == <span class="number">2</span>) &amp;&amp; (endx &gt;= <span class="number">4</span> &amp;&amp; endx &lt;= <span class="number">6</span>) &amp;&amp; (endy &gt;= <span class="number">1</span> &amp;&amp; endy &lt;= <span class="number">3</span> || endy &gt;= <span class="number">8</span> &amp;&amp; endy &lt;= <span class="number">10</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chancellor</span> :</span><span class="keyword">public</span> Chess<span class="comment">//象、相类，ID为-3和3</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Chancellor(<span class="keyword">int</span> i) :Chess((i == <span class="number">0</span> ? <span class="number">-3</span> : <span class="number">3</span>)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> TempX = startx - endx;</span><br><span class="line">		<span class="keyword">int</span> TempY = starty - endy;</span><br><span class="line">		<span class="keyword">int</span> S_Id = ch.Getid(startx, starty);</span><br><span class="line">		<span class="keyword">int</span> E_Id = ch.Getid(endx, endy);</span><br><span class="line">		<span class="keyword">if</span> ((S_Id*E_Id &lt;= <span class="number">0</span>) &amp;&amp; (TempX*TempX + TempY * TempY == <span class="number">8</span>) &amp;&amp; (endx % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; endx &gt;= <span class="number">1</span> &amp;&amp; endy &lt;= <span class="number">9</span>) &amp;&amp; ((starty - <span class="number">1</span>) / <span class="number">5</span> == (endy - <span class="number">1</span>) / <span class="number">5</span>) &amp;&amp; !ch.Get(startx + (TempX / <span class="number">2</span>), starty + (TempY / <span class="number">2</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> :</span><span class="keyword">public</span> Chess<span class="comment">//馬、马类，ID为-4和4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Horse(<span class="keyword">int</span> i) :Chess((i == <span class="number">0</span> ? <span class="number">-4</span> : <span class="number">4</span>)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> TempX = startx - endx;</span><br><span class="line">		<span class="keyword">int</span> TempY = starty - endy;</span><br><span class="line">		<span class="keyword">int</span> S_Id = ch.Getid(startx, starty);</span><br><span class="line">		<span class="keyword">int</span> E_Id = ch.Getid(endx, endy);</span><br><span class="line">		<span class="keyword">if</span> ((S_Id*E_Id &lt;= <span class="number">0</span>) &amp;&amp; (TempX*TempX + TempY * TempY == <span class="number">5</span>) &amp;&amp; !ch.Get(startx + (TempX / <span class="number">2</span>), starty + (TempY / <span class="number">2</span>)))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chariot</span> :</span><span class="keyword">public</span> Chess<span class="comment">//車、车类，ID为-5和5</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Chariot(<span class="keyword">int</span> i) :Chess((i == <span class="number">0</span> ? <span class="number">-5</span> : <span class="number">5</span>)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> TempX = startx - endx;</span><br><span class="line">		<span class="keyword">int</span> TempY = starty - endy;</span><br><span class="line">		<span class="keyword">int</span> S_Id = ch.Getid(startx, starty);</span><br><span class="line">		<span class="keyword">int</span> E_Id = ch.Getid(endx, endy);</span><br><span class="line">		<span class="keyword">if</span> ((S_Id*E_Id &lt;= <span class="number">0</span>) &amp;&amp; (!(TempX&amp;&amp;TempY)) &amp;&amp; (TempX + TempY))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (TempX)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> Sign = (TempX &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">fabs</span>(TempX); i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (ch.Get(startx + Sign * i, starty))</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> Sign = (TempY &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">fabs</span>(TempY); i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (ch.Get(startx, starty + Sign * i))</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cannon</span> :</span><span class="keyword">public</span> Chess<span class="comment">//砲、炮类，ID为-6和6</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Cannon(<span class="keyword">int</span> i) :Chess((i == <span class="number">0</span> ? <span class="number">-6</span> : <span class="number">6</span>)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> TempX = startx - endx;</span><br><span class="line">		<span class="keyword">int</span> TempY = starty - endy;</span><br><span class="line">		<span class="keyword">int</span> S_Id = ch.Getid(startx, starty);</span><br><span class="line">		<span class="keyword">int</span> E_Id = ch.Getid(endx, endy);</span><br><span class="line">		<span class="keyword">if</span> ((S_Id*E_Id &lt;= <span class="number">0</span>) &amp;&amp; (!(TempX&amp;&amp;TempY)) &amp;&amp; (TempX + TempY))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> Tmp = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (TempX)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> Sign = (TempX &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">fabs</span>(TempX); i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (ch.Get(startx + Sign * i, starty))</span><br><span class="line">					&#123;</span><br><span class="line">						Tmp++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> Sign = (TempY &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">fabs</span>(TempY); i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (ch.Get(startx, starty + Sign * i))</span><br><span class="line">					&#123;</span><br><span class="line">						Tmp++;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (E_Id)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (Tmp == <span class="number">1</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (!Tmp)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Soldier</span> :</span><span class="keyword">public</span> Chess<span class="comment">//卒、兵类，ID为-7和7</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Soldier(<span class="keyword">int</span> i) :Chess((i == <span class="number">0</span> ? <span class="number">-7</span> : <span class="number">7</span>)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Judgement</span><span class="params">(Chessboard&amp; ch, <span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> TempX = startx - endx;</span><br><span class="line">		<span class="keyword">int</span> TempY = starty - endy;</span><br><span class="line">		<span class="keyword">int</span> S_Id = ch.Getid(startx, starty);</span><br><span class="line">		<span class="keyword">int</span> E_Id = ch.Getid(endx, endy);</span><br><span class="line">		<span class="keyword">if</span> ((S_Id*E_Id &lt;= <span class="number">0</span>) &amp;&amp; (S_Id*TempY &lt;= <span class="number">0</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">fabs</span>(TempY) == <span class="number">1</span> &amp;&amp; TempX == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">fabs</span>(TempX) == <span class="number">1</span> &amp;&amp; TempY == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (((starty - <span class="number">1</span>) / <span class="number">5</span> == <span class="number">0</span> &amp;&amp; S_Id &lt; <span class="number">0</span>) || ((starty - <span class="number">1</span>) / <span class="number">5</span> == <span class="number">1</span> &amp;&amp; S_Id &gt; <span class="number">0</span>))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Chessboard::Player = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">bool</span> Chessboard::End = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">Chessboard::Chessboard</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(c, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Chess * <span class="title">Chessboard::Get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> c[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Chessboard::Getid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (c[x][y] != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> c[x][y]-&gt;Get();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Chessboard::Move</span><span class="params">(<span class="keyword">int</span> startx, <span class="keyword">int</span> starty, <span class="keyword">int</span> endx, <span class="keyword">int</span> endy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (startx &gt;= <span class="number">1</span> &amp;&amp; startx &lt;= <span class="number">9</span> &amp;&amp; starty &gt;= <span class="number">1</span> &amp;&amp; starty &lt;= <span class="number">10</span> &amp;&amp; endx &gt;= <span class="number">1</span> &amp;&amp; endx &lt;= <span class="number">9</span> &amp;&amp; endy &gt;= <span class="number">1</span> &amp;&amp; endy &lt;= <span class="number">10</span> &amp;&amp; Getid(startx, starty) &amp;&amp; Getid(startx, starty)*Player &gt; <span class="number">0</span> &amp;&amp; c[startx][starty]-&gt;Judgement(*<span class="keyword">this</span>, startx, starty, endx, endy))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (c[endx][endy] != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> c[endx][endy];           <span class="comment">//吃子</span></span><br><span class="line">		&#125;</span><br><span class="line">		c[endx][endy] = c[startx][starty];</span><br><span class="line">		c[startx][starty] = <span class="literal">NULL</span>;</span><br><span class="line">		Player *= <span class="number">-1</span>;                       <span class="comment">//更换玩家操作</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;走法错误，请重新输入：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Chessboard::Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	c[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> Chariot(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">9</span>][<span class="number">1</span>] = <span class="keyword">new</span> Chariot(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">2</span>][<span class="number">1</span>] = <span class="keyword">new</span> Horse(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">8</span>][<span class="number">1</span>] = <span class="keyword">new</span> Horse(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">3</span>][<span class="number">1</span>] = <span class="keyword">new</span> Chancellor(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">7</span>][<span class="number">1</span>] = <span class="keyword">new</span> Chancellor(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">4</span>][<span class="number">1</span>] = <span class="keyword">new</span> BodyGuard(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">6</span>][<span class="number">1</span>] = <span class="keyword">new</span> BodyGuard(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">5</span>][<span class="number">1</span>] = <span class="keyword">new</span> General(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">2</span>][<span class="number">3</span>] = <span class="keyword">new</span> Cannon(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">8</span>][<span class="number">3</span>] = <span class="keyword">new</span> Cannon(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">1</span>][<span class="number">4</span>] = <span class="keyword">new</span> Soldier(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">3</span>][<span class="number">4</span>] = <span class="keyword">new</span> Soldier(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">5</span>][<span class="number">4</span>] = <span class="keyword">new</span> Soldier(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">7</span>][<span class="number">4</span>] = <span class="keyword">new</span> Soldier(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">9</span>][<span class="number">4</span>] = <span class="keyword">new</span> Soldier(<span class="number">1</span>);</span><br><span class="line">	c[<span class="number">1</span>][<span class="number">10</span>] = <span class="keyword">new</span> Chariot(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">9</span>][<span class="number">10</span>] = <span class="keyword">new</span> Chariot(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">2</span>][<span class="number">10</span>] = <span class="keyword">new</span> Horse(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">8</span>][<span class="number">10</span>] = <span class="keyword">new</span> Horse(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">3</span>][<span class="number">10</span>] = <span class="keyword">new</span> Chancellor(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">7</span>][<span class="number">10</span>] = <span class="keyword">new</span> Chancellor(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">4</span>][<span class="number">10</span>] = <span class="keyword">new</span> BodyGuard(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">6</span>][<span class="number">10</span>] = <span class="keyword">new</span> BodyGuard(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">5</span>][<span class="number">10</span>] = <span class="keyword">new</span> General(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">2</span>][<span class="number">8</span>] = <span class="keyword">new</span> Cannon(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">8</span>][<span class="number">8</span>] = <span class="keyword">new</span> Cannon(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">1</span>][<span class="number">7</span>] = <span class="keyword">new</span> Soldier(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">3</span>][<span class="number">7</span>] = <span class="keyword">new</span> Soldier(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">5</span>][<span class="number">7</span>] = <span class="keyword">new</span> Soldier(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">7</span>][<span class="number">7</span>] = <span class="keyword">new</span> Soldier(<span class="number">0</span>);</span><br><span class="line">	c[<span class="number">9</span>][<span class="number">7</span>] = <span class="keyword">new</span> Soldier(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Chessboard::Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	HANDLE handle;</span><br><span class="line">	handle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">	SetConsoleTextAttribute(handle, <span class="number">0xF0</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;     P2  一 二 三 四 五 六 七 八 九&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">char</span> num[<span class="number">11</span>][<span class="number">4</span>] = &#123; <span class="string">&quot;零&quot;</span>,<span class="string">&quot;一&quot;</span>,<span class="string">&quot;二&quot;</span>,<span class="string">&quot;三&quot;</span>,<span class="string">&quot;四&quot;</span>,<span class="string">&quot;五&quot;</span>,<span class="string">&quot;六&quot;</span>,<span class="string">&quot;七&quot;</span>,<span class="string">&quot;八&quot;</span>,<span class="string">&quot;九&quot;</span> ,<span class="string">&quot;十&quot;</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">6</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			SetConsoleTextAttribute(handle, <span class="number">0xF0</span>);</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;          ————楚河 汉界————&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		SetConsoleTextAttribute(handle, <span class="number">0xF0</span>);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;     &quot;</span> &lt;&lt; num[i] &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (c[j][i] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (c[j][i]-&gt;Get() &gt; <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					SetConsoleTextAttribute(handle, <span class="number">0xF2</span>);</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; Chessword[c[j][i]-&gt;Get() + <span class="number">7</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">				&#123;</span><br><span class="line">					SetConsoleTextAttribute(handle, <span class="number">0xFC</span>);</span><br><span class="line">					<span class="built_in">cout</span> &lt;&lt; Chessword[c[j][i]-&gt;Get() + <span class="number">7</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> ((i == <span class="number">2</span> &amp;&amp; j == <span class="number">5</span>) || (i == <span class="number">9</span> &amp;&amp; j == <span class="number">5</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				SetConsoleTextAttribute(handle, <span class="number">0xF0</span>);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;米&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				SetConsoleTextAttribute(handle, <span class="number">0xF0</span>);</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;十&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	SetConsoleTextAttribute(handle, <span class="number">0xF0</span>);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;     P1  一 二 三 四 五 六 七 八 九&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Chessboard::Play</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HANDLE handle;</span><br><span class="line">	handle = GetStdHandle(STD_OUTPUT_HANDLE);</span><br><span class="line">	SetConsoleTextAttribute(handle, <span class="number">0xFC</span>);</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">this</span>-&gt;Init();</span><br><span class="line">	<span class="keyword">this</span>-&gt;Show();</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> startx, starty, aimx, aimy, iflag;</span><br><span class="line">		<span class="keyword">int</span> sid, aid;</span><br><span class="line">		iflag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			sid = aid = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> ((Chessboard::Player == <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				SetConsoleTextAttribute(handle, <span class="number">0xFC</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				SetConsoleTextAttribute(handle, <span class="number">0xF2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请P&quot;</span> &lt;&lt; (Chessboard::Player == <span class="number">1</span> ? <span class="number">2</span> : <span class="number">1</span>) &lt;&lt; <span class="string">&quot;输入起始棋子位置与目标位置的坐标：&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; startx &gt;&gt; starty &gt;&gt; aimx &gt;&gt; aimy;</span><br><span class="line">		&#125; <span class="keyword">while</span> (!<span class="keyword">this</span>-&gt;Move(startx, starty, aimx, aimy));</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>-&gt;Show();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">11</span>; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (c[i][j] != <span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> ((<span class="keyword">int</span>)<span class="built_in">fabs</span>(c[i][j]-&gt;Get()) == <span class="number">1</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						iflag++;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (iflag != <span class="number">0</span> &amp;&amp; iflag != <span class="number">2</span>)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> ((<span class="keyword">int</span>)<span class="built_in">fabs</span>(c[i][j]-&gt;Get()) != <span class="number">1</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							iflag--;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (iflag == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			Player *= <span class="number">-1</span>;</span><br><span class="line">			Chessboard::End = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">while</span> (Chessboard::End);</span><br><span class="line">	<span class="keyword">if</span> ((Chessboard::Player == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">2</span>) == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		SetConsoleTextAttribute(handle, <span class="number">0xFC</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		SetConsoleTextAttribute(handle, <span class="number">0xF2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;结束，赢家是Player&quot;</span> &lt;&lt; (Chessboard::Player == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Chessboard::~Chessboard()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (c[i][j] != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">delete</span> c[i][j];</span><br><span class="line">				c[i][j] = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Chessboard C;</span><br><span class="line">	C.Play();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>大作业</tag>
      </tags>
  </entry>
  <entry>
    <title>【FPGA】基于FPGA的极简CPU设计</title>
    <url>/simple-cpu-based-on-fpga/</url>
    <content><![CDATA[<blockquote>
<p>这个是我这个学期FPGA的期末大作业，老师说是给两周的时间去写，其实还是在最后一周匆匆赶制出来的 <del>不到DDL不开工</del>。其实吧，要我自己评价是挺不满意的，主要是结构缩水了太多，为了节省代码量，我们甚至连PC指针砍掉，并且将ALU和Control Unit强行拼在了一起，变成了一个单地址指令结构的（严格来说应该也算不上）CPU。可能唯一的优点就是执行快吧……</p>
</blockquote>
<a id="more"></a>

<h2 id="一、设计原理"><a href="#一、设计原理" class="headerlink" title="一、设计原理"></a>一、设计原理</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5tZWdhbG9tYW5pYS5pY3Uvd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDYvMS0zMDB4MTg2LnBuZw?x-oss-process=image/format,png"><br>看的出来其实我们设计的这个原理十分简单，一个只剩下指令寄存器的控制单元，不用计算PC指针，还和运算单元结合在了一起，连在顶层文件中的连接都省了。由于是在家里上课，也没有上板之类的，只要ModuleSim能跑就行，所以把外围内存都删了（其实原理也挺简单的），直接看输入输出波形就完事了。但是内部的存储单元还是得要，不然有许多操作的中间值没地方放，自己写一个就行了，也不要什么IP Core之类的。</p>
<h2 id="二、指令列表"><a href="#二、指令列表" class="headerlink" title="二、指令列表"></a>二、指令列表</h2><p>输入信号为16位数 <del>别问，问就是强迫症</del>，高8位为指令码，低8位为操作数。<br>总共就九个指令，全部围绕寄存器A进行：</p>
<ol>
<li>in_ram：将A中的数写入RAM，地址为输入数据低8位所指的空间</li>
<li>load_num：从外部输入数据到A</li>
<li>out_ram：将RAM中的数写入A，地址为输入数据低8位所指的空间</li>
<li>clr：清空A</li>
<li>inc：A中的数自加1</li>
<li>dec：A中的数自减1</li>
<li>stay：等待指令</li>
<li>add：将A中的数与输入数据低8位相加</li>
<li>min：将A中的数与输入数据低8位相减</li>
</ol>
<h2 id="三、代码设计"><a href="#三、代码设计" class="headerlink" title="三、代码设计"></a>三、代码设计</h2><p>工程总共有4个文件：输入模块，运算控制模块，RAM模块以及顶层模块</p>
<h3 id="1、输入模块（IDEC-v）"><a href="#1、输入模块（IDEC-v）" class="headerlink" title="1、输入模块（IDEC.v）"></a>1、输入模块（IDEC.v）</h3><p>输入模块负责将输入的16位二进制数分割为2个8位二进制数，高8位为指令，低8位为操作数或者RAM地址。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> IDEC(</span><br><span class="line">	clk,</span><br><span class="line">	reset,   </span><br><span class="line">	code_in,  			<span class="comment">//指令输入端口</span></span><br><span class="line">	code_addr,          <span class="comment">//操作码输出端口</span></span><br><span class="line">	data_addr           <span class="comment">//操作数输出端口</span></span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">input</span> clk,reset;</span><br><span class="line"><span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] code_in;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] code_addr;</span><br><span class="line"><span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] data_addr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] code_addr;</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] data_addr;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> reset)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">	<span class="keyword">if</span>(!reset)</span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			code_addr &lt;= <span class="number">8&#x27;b00000000</span>;</span><br><span class="line">			data_addr &lt;= <span class="number">8&#x27;b00000000</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			code_addr &lt;= code_in [<span class="number">15</span>:<span class="number">8</span>];</span><br><span class="line">			data_addr &lt;= code_in [<span class="number">7</span>:<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h3 id="2、运算控制模块-IMP-v"><a href="#2、运算控制模块-IMP-v" class="headerlink" title="2、运算控制模块 (IMP.v)"></a>2、运算控制模块 (IMP.v)</h3><p>运算控制模块大致代码分为两个部分，前半部分是声明指令是干什么的，后半部分进行相应指令的对应操作，最后的task部分为加减算法。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> IMP(</span><br><span class="line">	clk,</span><br><span class="line">	<span class="comment">//reset,</span></span><br><span class="line">	in_data,		<span class="comment">//1.操作数输入端口  2.ROM地址输入端口</span></span><br><span class="line">	in_code,		<span class="comment">//操作码输入端口</span></span><br><span class="line">	dout			<span class="comment">//操作结果输出端口</span></span><br><span class="line">    );</span><br><span class="line"><span class="keyword">input</span> clk;<span class="comment">//reset;</span></span><br><span class="line"><span class="keyword">input</span>	[<span class="number">7</span>:<span class="number">0</span>] in_data;</span><br><span class="line"><span class="keyword">input</span>	[<span class="number">7</span>:<span class="number">0</span>] in_code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">output</span>	[<span class="number">7</span>:<span class="number">0</span>] dout;</span><br><span class="line"><span class="keyword">reg</span>		[<span class="number">7</span>:<span class="number">0</span>] dout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">parameter</span> in_ram 	= <span class="number">8&#x27;b00000001</span>, <span class="comment">//A-&gt;ROM[in_data]</span></span><br><span class="line">		  load_num	= <span class="number">8&#x27;b00000010</span>, <span class="comment">//in_data-&gt;A</span></span><br><span class="line">		  out_ram	= <span class="number">8&#x27;b00000011</span>, <span class="comment">//ROM[in_data]-&gt;A</span></span><br><span class="line">		  clr		= <span class="number">8&#x27;b00000100</span>, <span class="comment">//0-&gt;A</span></span><br><span class="line">		  inc		= <span class="number">8&#x27;b00000101</span>, <span class="comment">//A+1-&gt;A</span></span><br><span class="line">		  dec		= <span class="number">8&#x27;b00000110</span>, <span class="comment">//A-1-&gt;A</span></span><br><span class="line">		  stay		= <span class="number">8&#x27;b00000111</span>, <span class="comment">//等待指令</span></span><br><span class="line">		  add		= <span class="number">8&#x27;b00001000</span>, <span class="comment">//A+in_data-&gt;A</span></span><br><span class="line">		  min		= <span class="number">8&#x27;b00001001</span>; <span class="comment">//A-in_data-&gt;A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>		[<span class="number">7</span>:<span class="number">0</span>] acc;		<span class="comment">//A	</span></span><br><span class="line"><span class="keyword">reg</span>	 		  wr;			<span class="comment">//写使能端</span></span><br><span class="line"><span class="keyword">reg</span>			  rd;			<span class="comment">//读使能端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>		[<span class="number">7</span>:<span class="number">0</span>] addr_RAM;	<span class="comment">//RAM输入地址</span></span><br><span class="line"><span class="keyword">wire</span>	[<span class="number">7</span>:<span class="number">0</span>] out_RAM;	<span class="comment">//RAM输出数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span>  		  fullout; 	<span class="comment">//溢出位</span></span><br><span class="line">RAM ram(</span><br><span class="line">	<span class="variable">.addr</span>(addr_RAM),</span><br><span class="line">	<span class="variable">.din</span>(acc),</span><br><span class="line">	<span class="variable">.dout</span>(out_RAM),</span><br><span class="line">	<span class="variable">.wr</span>(wr),</span><br><span class="line">	<span class="variable">.rd</span>(rd)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对相应指令进行相应操作</span></span><br><span class="line"><span class="keyword">always</span>@(<span class="keyword">posedge</span> clk )</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">case</span>(in_code)</span><br><span class="line">			 stay:<span class="keyword">begin</span>	acc =acc;	<span class="keyword">end</span></span><br><span class="line">			 clr:<span class="keyword">begin</span>	acc = <span class="number">0</span>;dout= acc;	<span class="keyword">end</span></span><br><span class="line">			 inc:<span class="keyword">begin</span>	acc = acc+<span class="number">1</span>;dout= acc;	<span class="keyword">end</span></span><br><span class="line">			 dec:<span class="keyword">begin</span>	acc = acc-<span class="number">1</span>;dout= acc;	<span class="keyword">end</span></span><br><span class="line">			 load_num:</span><br><span class="line">			 	<span class="keyword">begin</span></span><br><span class="line">					acc = in_data;</span><br><span class="line">					dout= acc;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">			 in_ram:</span><br><span class="line">				<span class="keyword">begin</span></span><br><span class="line">					rd=<span class="number">0</span>;</span><br><span class="line">					wr=<span class="number">1</span>;</span><br><span class="line">					addr_RAM=in_data;</span><br><span class="line">					dout=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">			 out_ram:</span><br><span class="line">				<span class="keyword">begin</span></span><br><span class="line">					rd=<span class="number">1</span>;</span><br><span class="line">					wr=<span class="number">0</span>;</span><br><span class="line">					addr_RAM=in_data;</span><br><span class="line">					acc = out_RAM;</span><br><span class="line">					dout= acc;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">			 add:</span><br><span class="line">			 	<span class="keyword">begin</span></span><br><span class="line">					add8(acc, in_data, acc, fullout);</span><br><span class="line">					dout=acc;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">			 min: </span><br><span class="line">			 	<span class="keyword">begin</span> </span><br><span class="line">					sub8(acc, in_data, acc, fullout);</span><br><span class="line">					dout=acc;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">			<span class="keyword">default</span>:	;</span><br><span class="line">		<span class="keyword">endcase</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">task</span> add8; <span class="comment">// 8位全加器</span></span><br><span class="line">	<span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] a,b;</span><br><span class="line">	<span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] sum;</span><br><span class="line">	<span class="keyword">output</span> c_out;</span><br><span class="line">	<span class="keyword">integer</span> i;</span><br><span class="line">	<span class="keyword">reg</span> c_in;</span><br><span class="line">	<span class="keyword">begin</span>    </span><br><span class="line">		c_in = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i=i+<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">begin</span> </span><br><span class="line">				add1(a[i], b[i], c_in, sum[i], c_out);</span><br><span class="line">				c_in = c_out;    </span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endtask</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> add1; <span class="comment">// 1位全加器</span></span><br><span class="line">	<span class="keyword">input</span>  a,b,c_in; <span class="comment">// 加数、被加数、前一次运算的进位</span></span><br><span class="line">	<span class="keyword">output</span> sum, c_out; <span class="comment">// 本位的和、本位运算后是否有进位</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		sum = a^b^c_in;<span class="comment">//异或</span></span><br><span class="line">		c_out = (a &amp; b) | (a &amp; c_in) | (b &amp; c_in);</span><br><span class="line">	<span class="keyword">end</span> </span><br><span class="line"><span class="keyword">endtask</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> sub8; <span class="comment">// 8位全减器</span></span><br><span class="line">	<span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] a,b;</span><br><span class="line">	<span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] diff;</span><br><span class="line">	<span class="keyword">output</span> c_in; <span class="comment">// 借位</span></span><br><span class="line">	<span class="keyword">integer</span> i;</span><br><span class="line">	<span class="keyword">reg</span> c_out;</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		c_out = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i=i+<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">begin</span></span><br><span class="line">				sub1(a[i],b[i],c_out,diff[i],c_in);</span><br><span class="line">				c_out = c_in;</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endtask</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">task</span> sub1; <span class="comment">// 1位全减器</span></span><br><span class="line">	<span class="keyword">input</span> a,b, c_out;  <span class="comment">// 被减数、 减数、 低位是否向本位借位</span></span><br><span class="line">	<span class="keyword">output</span> diff, c_in; <span class="comment">// 本位减运算结果， 本位是否向高位借位</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		diff = a^b^c_out;</span><br><span class="line">		c_in = (~a &amp; (b ^ c_out)) | (b &amp; c_out);</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endtask</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h3 id="3、RAM模块-RAM-v"><a href="#3、RAM模块-RAM-v" class="headerlink" title="3、RAM模块 (RAM.v)"></a>3、RAM模块 (RAM.v)</h3><p>此模块为我们自己写的RAM存储器，负责存储操作数。</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> RAM(</span><br><span class="line">	addr,</span><br><span class="line">	din,</span><br><span class="line">	dout,</span><br><span class="line">	wr,</span><br><span class="line">	rd</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] addr;		<span class="comment">//存储器地址</span></span><br><span class="line"><span class="keyword">input</span> 		wr;			<span class="comment">//写使能端，高电平有效</span></span><br><span class="line"><span class="keyword">input</span> 		rd;			<span class="comment">//读使能端，高电平有效</span></span><br><span class="line"><span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] din;		<span class="comment">//数据线输入</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] dout;	<span class="comment">//数据线输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> [<span class="number">7</span>:<span class="number">0</span>] mem [<span class="number">0</span>:<span class="number">255</span>];	<span class="comment">//内部的存储空间</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">always</span> @(wr <span class="keyword">or</span> rd) </span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span> ( wr &amp;&amp; !rd )	<span class="comment">//写操作</span></span><br><span class="line">			<span class="keyword">begin</span></span><br><span class="line">				mem[addr]&lt;= din;</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">if</span> ( rd &amp;&amp; !wr )	<span class="comment">//读操作</span></span><br><span class="line">			<span class="keyword">begin</span></span><br><span class="line">				dout &lt;= mem[addr];</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4、顶层文件-TOP-v"><a href="#4、顶层文件-TOP-v" class="headerlink" title="4、顶层文件 (TOP.v)"></a>4、顶层文件 (TOP.v)</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">module cpu(</span><br><span class="line">	clk,</span><br><span class="line">	n_Rst,</span><br><span class="line">	data_in,</span><br><span class="line">	data_out</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">input			clk;</span><br><span class="line">input			n_Rst;</span><br><span class="line">input	[<span class="number">15</span>:<span class="number">0</span>]	data_in;	<span class="regexp">//</span>输入指令，低<span class="number">8</span>位操作码地址，高<span class="number">8</span>位操作数地址</span><br><span class="line">output	[<span class="number">7</span>:<span class="number">0</span>]	data_out;	<span class="regexp">//</span>操作结果输出</span><br><span class="line"></span><br><span class="line">wire 	[<span class="number">7</span>:<span class="number">0</span>]	data_out;</span><br><span class="line">wire	[<span class="number">7</span>:<span class="number">0</span>]	cade;</span><br><span class="line">wire	[<span class="number">7</span>:<span class="number">0</span>]	data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>取指操作人为输入</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>译码</span><br><span class="line">IDEC idec(</span><br><span class="line">	.clk(clk),</span><br><span class="line">	.reset(n_Rst),</span><br><span class="line">	.code_in(data_in),	 <span class="regexp">//</span>指令输入端口</span><br><span class="line">	.code_addr(cade),    <span class="regexp">//</span>操作码输出端口</span><br><span class="line">	.data_addr(data)     <span class="regexp">//</span>操作数输出端口</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>执行，数据data 既可以当操作数，也可以当ROM地址</span><br><span class="line">IMP imp(</span><br><span class="line">	.clk(clk),</span><br><span class="line">	.in_data(data),		<span class="regexp">//</span><span class="number">1</span>.操作数输入端口  <span class="number">2</span>.ROM地址输入端口</span><br><span class="line">	.in_code(cade),		<span class="regexp">//</span>操作码输入端口</span><br><span class="line">	.dout(data_out)		<span class="regexp">//</span>操作结果输出端口</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
<h2 id="四、仿真-tb-v"><a href="#四、仿真-tb-v" class="headerlink" title="四、仿真 (tb.v)"></a>四、仿真 (tb.v)</h2><p>我们是用ISE额外的ModelSim软件进行波形仿真，使用的testbench文件如下:</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">module TEXT;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Inputs</span></span><br><span class="line">	reg clk;</span><br><span class="line">	reg n_Rst;</span><br><span class="line">	reg [<span class="number">15</span>:<span class="number">0</span>] data_in;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Outputs</span></span><br><span class="line">	wire [<span class="number">7</span>:<span class="number">0</span>] data_out;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Instantiate the Unit Under Test (UUT)</span></span><br><span class="line">	cpu <span class="built_in">uut</span> (</span><br><span class="line">		.<span class="built_in">clk</span>(clk),</span><br><span class="line">		.<span class="built_in">n_Rst</span>(n_Rst),</span><br><span class="line">		.<span class="built_in">data_in</span>(data_in),</span><br><span class="line">		.<span class="built_in">data_out</span>(data_out)</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	initial begin</span><br><span class="line">		<span class="comment">// Initialize Inputs</span></span><br><span class="line">		clk = <span class="number">0</span>;</span><br><span class="line">		n_Rst = <span class="number">0</span>;</span><br><span class="line">		data_in = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Wait 100 ns for global reset to finish</span></span><br><span class="line">		<span class="meta">#100;</span></span><br><span class="line">		<span class="meta">#100 n_Rst=1;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// Add stimulus here</span></span><br><span class="line">		<span class="meta">#110 data_in = 16&#x27;b0000001011111110;		<span class="comment">//load_rom  1111 1110//MOV A #0FEH</span></span></span><br><span class="line">		<span class="meta">#60  data_in = 16&#x27;b0000000100000000; 		<span class="comment">//in_rom  0000 0000  //MOV 00H（ROM0）, A</span></span></span><br><span class="line">		<span class="meta">#40  data_in = 16&#x27;b0000010100000000;		<span class="comment">//inc  A 		//ADD A</span></span></span><br><span class="line">		<span class="meta">#20  data_in = 16&#x27;b0000001100000000; 		<span class="comment">//out_rom 0000 0000  //MOV A ,00H（ROM0)</span></span></span><br><span class="line">		<span class="meta">#80  data_in = 16&#x27;b0000100000000001;		<span class="comment">//add     0000 0001	//ADD A ,#01H</span></span></span><br><span class="line">		<span class="meta">#20  data_in = 16&#x27;b0000100100000010;		<span class="comment">//min     0000 0010	//SUB A ,#02H</span></span></span><br><span class="line">		<span class="meta">#20  n_Rst=0;</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">	always <span class="meta">#10 clk = ~clk;</span></span><br><span class="line"></span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure>
<p>得到的波形图如下所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3dy5tZWdhbG9tYW5pYS5pY3Uvd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDYvMS0xLnBuZw?x-oss-process=image/format,png"><br>可以看出data_out输出先显示出：</p>
<ol>
<li>A先加载0FEH</li>
<li>将数放入RAM</li>
<li>自加1</li>
<li>读出数据</li>
<li>A加1</li>
<li>A减2</li>
</ol>
<p>用Synplify Pro以100MHz为仿真输入的结果是：</p>
<ul>
<li>Worst Slack: 4.096</li>
<li>Estimated Frequence: 169.4MHz</li>
</ul>
<p>电路图我就不贴了，就是俩模块。只要输入输出线都连上了基本就没有什么问题。有能力的可以尝试将ALU与Control Unit分开，再加个PC寄存器，就差不多是个常见的CPU结构了。</p>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>大作业</tag>
        <tag>FPGA</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java学习笔记（1）Java语言基础作业函数题</title>
    <url>/java_study_note_1/</url>
    <content><![CDATA[<blockquote>
<p><strong>学校小学期Java课程的练习题，留个档便于以后需要时候有例子可以回忆，写的烂的地方请多多包含</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="1、byte与int、float与double类型转换运算"><a href="#1、byte与int、float与double类型转换运算" class="headerlink" title="1、byte与int、float与double类型转换运算"></a>1、byte与int、float与double类型转换运算</h3><ul>
<li>描述：定义byte、int、float、double类型的变量，并输入对应的数据给四种类型的变量赋值，将int转换为byte,将float转换为double，打印输出4个类型数据的值和转换后的数值。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example2_2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">byte</span> b = <span class="number">22</span>;</span><br><span class="line">		<span class="keyword">int</span>  n = <span class="number">129</span>;</span><br><span class="line">		<span class="keyword">float</span> f =<span class="number">123456.6789f</span> ;</span><br><span class="line">		<span class="keyword">double</span> d=<span class="number">123456789.123456789</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入byte(-128到127) int(大于127) float double四种类型数据：&quot;</span>);</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>使用Scanner输入byte、int、float、double类型的数据，分别赋值给b、n、f、d</span></span><br><span class="line">			b = scanner.nextByte();</span><br><span class="line">			n = scanner.nextInt();</span><br><span class="line">			f = scanner.nextFloat();</span><br><span class="line">			d = scanner.nextDouble();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;输入有误！&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;---------输出------------&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;byte=  &quot;</span>+b);</span><br><span class="line">		System.out.println(<span class="string">&quot;int=  &quot;</span>+n);</span><br><span class="line">		System.out.println(<span class="string">&quot;float=  &quot;</span>+f);</span><br><span class="line">		System.out.println(<span class="string">&quot;double=  &quot;</span>+d);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>将int强转化成byte</span></span><br><span class="line"><span class="comment">		int型的n强转后赋值给byte型的b</span></span><br><span class="line"><span class="comment">		将float强转化成double</span></span><br><span class="line"><span class="comment">		float型的f强转后赋值给double型的d</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		b=(<span class="keyword">byte</span>)n;</span><br><span class="line">		d=(<span class="keyword">double</span>)f;</span><br><span class="line">		System.out.println(<span class="string">&quot;将int转化为byte导致精度缺失        int=  &quot;</span>+b);</span><br><span class="line">		System.out.println(<span class="string">&quot;将float转化为double导致精度缺失        double=  &quot;</span>+d);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2、输入两个变量a-b均是整型变量，写出将a-b两个变量中的值互换的程序"><a href="#2、输入两个变量a-b均是整型变量，写出将a-b两个变量中的值互换的程序" class="headerlink" title="2、输入两个变量a,b均是整型变量，写出将a,b两个变量中的值互换的程序"></a>2、输入两个变量a,b均是整型变量，写出将a,b两个变量中的值互换的程序</h3><ul>
<li>描述：定义两个整型变量a,b,获取键盘输入的两个整数赋值给a，b，使用临时变量temp交换a,b的值。并打印输出交换后a和b的值。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example2_2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> tmp;</span><br><span class="line">		<span class="keyword">int</span> b=<span class="number">3</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入两个整数赋值给a,b：&quot;</span>);</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		a = scanner.nextInt();</span><br><span class="line">		b = scanner.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;交换前的值是 a=&quot;</span>+a+<span class="string">&quot;,b=&quot;</span>+b);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>使用中间变量交换ab值</span></span><br><span class="line"><span class="comment">		例：定义temp变量暂时存储a值</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		tmp = a;</span><br><span class="line">		a = b;</span><br><span class="line">		b = tmp;</span><br><span class="line">		System.out.println(<span class="string">&quot;交换后的值是 a=&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3、分别对两个浮点数据进行计算加、减、乘、除运算"><a href="#3、分别对两个浮点数据进行计算加、减、乘、除运算" class="headerlink" title="3、分别对两个浮点数据进行计算加、减、乘、除运算"></a>3、分别对两个浮点数据进行计算加、减、乘、除运算</h3><ul>
<li>描述：计算输入数据的和</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example2_2_4</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;输入两个浮点型数据，分别计算加、减、乘、除&quot;</span>);</span><br><span class="line">		<span class="keyword">double</span> a ,b;</span><br><span class="line">		<span class="keyword">double</span> c, d, e, f;</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		a = scanner.nextDouble();</span><br><span class="line">		b = scanner.nextDouble();</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>对a,b依次进行加减乘除运算</span></span><br><span class="line"><span class="comment">		并把结果分别赋给变量c d e f</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		c=a+b;</span><br><span class="line">		d=a-b;</span><br><span class="line">		e=a*b;</span><br><span class="line">		f=a/b;</span><br><span class="line">		System.out.println(<span class="string">&quot;结果分别为：\n&quot;</span>+c+<span class="string">&quot;\n&quot;</span>+d+<span class="string">&quot;\n&quot;</span>+e+<span class="string">&quot;\n&quot;</span>+f);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4、计算输入数据的和"><a href="#4、计算输入数据的和" class="headerlink" title="4、计算输入数据的和"></a>4、计算输入数据的和</h3><ul>
<li>描述：定义double型变量sum，并初始化为0。键盘输入若干个数字，每输入一个数字回车确认，最后输入0结束整个的输入操作过程。求输入的所有数字之和并打印输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exp</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入若干个数，每输入一个数回车确认&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;最后输入数字0结束输入操作&quot;</span>);</span><br><span class="line">		Scanner reader=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">double</span> x = reader.nextDouble();</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>循环判断，如果x不等于0的话，将sum的值增加x</span></span><br><span class="line"><span class="comment">		持续输入x的值，直到输入0结束</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">while</span>(x!=<span class="number">0</span>)&#123;</span><br><span class="line">			sum=sum+x;</span><br><span class="line">			x = reader.nextDouble();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5、类型转换"><a href="#5、类型转换" class="headerlink" title="5、类型转换"></a>5、类型转换</h3><ul>
<li>描述：输入一个浮点数，将其分别转换成int和float，输出该数转换为int、float类型后损失的精度，请将转换的代码补全。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span>  输入一个浮点数，分别将其转换成int和float，输出该数转换为int、float类型后损失的精度，请将转换的代码补全。</span></span><br><span class="line"><span class="comment"> * 例如：输入：2.1 输出: double转换成int损失的精度值：0.10000000000000009</span></span><br><span class="line"><span class="comment"> *                   double转换成float损失的精度值：9.536743172944284E-8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_153</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入一个浮点数&quot;</span>);</span><br><span class="line">		<span class="keyword">double</span> num = sc.nextDouble();</span><br><span class="line">		<span class="keyword">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>补全double类型num强制转换成int类型num1的代码</span></span><br><span class="line">		num1=(<span class="keyword">int</span>)num;</span><br><span class="line">		<span class="comment">//计算double转换成int损失的精度值</span></span><br><span class="line">		<span class="keyword">double</span> value1 = num - num1;</span><br><span class="line">		System.out.println( <span class="string">&quot;double转换成int损失的精度值：&quot;</span>+ value1);</span><br><span class="line">		<span class="keyword">float</span> num2 = <span class="number">0f</span>;</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>补全double类型num强制转换成float类型num2的代码</span></span><br><span class="line">		num2=(<span class="keyword">float</span>)num;</span><br><span class="line">		<span class="comment">//计算double转换成float损失的精度值</span></span><br><span class="line">		<span class="keyword">double</span> value2 = num - num2;</span><br><span class="line">		System.out.println(<span class="string">&quot;double转换成float损失的精度值：&quot;</span>+ value2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6、将float类型强制转换int类型"><a href="#6、将float类型强制转换int类型" class="headerlink" title="6、将float类型强制转换int类型"></a>6、将float类型强制转换int类型</h3><ul>
<li>描述：用户输入1个float类型的数值，赋值给float型的变量a，然后强制转换为int型并输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 随机输入1个float类型的数值，强制转换int然后输出</span></span><br><span class="line"><span class="comment"> 如：输入12.34，强制转换int后输出：12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example7_65</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入1个float数值:&quot;</span>);</span><br><span class="line">		<span class="keyword">float</span> a = input.nextFloat();</span><br><span class="line">		<span class="comment">//TODO：强制将float型的a转换成int型</span></span><br><span class="line">		<span class="keyword">int</span> b=(<span class="keyword">int</span>)a;</span><br><span class="line">		System.out.print(b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7、字符与整数类型转换"><a href="#7、字符与整数类型转换" class="headerlink" title="7、字符与整数类型转换"></a>7、字符与整数类型转换</h3><ul>
<li>描述：定义一个int型变量、一个char型变量，输入一个汉字或日文赋值给char型变量，然后打印出该变量在Unicode表的位置。再输入一个数字代表Unicode表的位置，赋值给int型变量，然后打印出该位置的字符。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个汉字或日文：&quot;</span>);</span><br><span class="line">		Scanner scanner = <span class="keyword">new</span> Scanner(System.in);  </span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>输入一个字符，然后使用charAt函数转化为char类型的变量c</span></span><br><span class="line">		String s=scanner.next();</span><br><span class="line">		<span class="keyword">char</span> c=s.charAt(<span class="number">0</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;汉字或日文:&quot;</span>+c+<span class="string">&quot;的位置:&quot;</span>+(<span class="keyword">int</span>)c);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入Unicode表的位置（数字）&quot;</span>);</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>使用Scanner输入一个整数，并赋值给变量n</span></span><br><span class="line">		<span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">		System.out.println(n+<span class="string">&quot;位置上的字符是:&quot;</span>+(<span class="keyword">char</span>)n);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="8、加密算法"><a href="#8、加密算法" class="headerlink" title="8、加密算法"></a>8、加密算法</h3><ul>
<li>描述：从键盘输入一段话，结束按回车确认，使用加密方法将段话进行加密，秘钥规则为‘A’，打印输出加密后的内容和原文内容。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;输入一段需要加密的话：&quot;</span>);</span><br><span class="line">		Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		String str = reader.nextLine();</span><br><span class="line">		String str1 = encryption(str);</span><br><span class="line">		System.out.println(<span class="string">&quot;密文:&quot;</span>+str1);</span><br><span class="line">		String str2 = encryption(str1);</span><br><span class="line">		System.out.println(<span class="string">&quot;原文:&quot;</span>+str2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	TODO：编写加密方法</span></span><br><span class="line"><span class="comment">	功能描述：每一个字母用异或‘A’方式进行加密</span></span><br><span class="line"><span class="comment">	参数说明：s加密字符</span></span><br><span class="line"><span class="comment">	返回值说明：加密后的字符</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryption</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">		<span class="keyword">char</span>[] tmp= s.toCharArray();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">			tmp[i]=(<span class="keyword">char</span>)(tmp[i]^<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		s=<span class="keyword">new</span> String(tmp);</span><br><span class="line">		<span class="keyword">return</span> s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="9、对无序数字排序"><a href="#9、对无序数字排序" class="headerlink" title="9、对无序数字排序"></a>9、对无序数字排序</h3><ul>
<li>描述：定义一个排序方法，参数为三个int型变量，按从小到大的顺序输出。从键盘输入三个正整数，每输入一个按回车确认，调用排序方法对输入数字排序，打印输出排列后的顺序。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example3_2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入三个正整数：&quot;</span>);</span><br><span class="line">		Scanner reader=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> a = reader.nextInt();</span><br><span class="line">		<span class="keyword">int</span> b = reader.nextInt();</span><br><span class="line">		<span class="keyword">int</span> c = reader.nextInt();</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>调用sort方法对传入的abc三个参数，进行比较</span></span><br><span class="line">		sort(a,b,c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>排序方法</span></span><br><span class="line"><span class="comment">	功能描述：编写排序方法，将a,b,c三个整数按照从小到大的顺序排列</span></span><br><span class="line"><span class="comment">	参数说明:abc为传入的待比较的三个数</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> arr[];</span><br><span class="line">		arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">		arr[<span class="number">0</span>]=a;</span><br><span class="line">		arr[<span class="number">1</span>]=b;</span><br><span class="line">		arr[<span class="number">2</span>]=c;</span><br><span class="line">		<span class="keyword">int</span> temp;<span class="comment">//定义一个临时变量</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;<span class="comment">//冒泡趟数</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-i-<span class="number">1</span>;j++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(arr[j+<span class="number">1</span>]&lt;arr[j])&#123;</span><br><span class="line">					temp = arr[j];</span><br><span class="line">					arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">					arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		a=arr[<span class="number">0</span>];</span><br><span class="line">		b=arr[<span class="number">1</span>];</span><br><span class="line">		c=arr[<span class="number">2</span>];</span><br><span class="line">		System.out.println(<span class="string">&quot;从小到大排序为：&quot;</span>+a+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;,&quot;</span>+c);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="10、根据输入的成绩输出等级"><a href="#10、根据输入的成绩输出等级" class="headerlink" title="10、根据输入的成绩输出等级"></a>10、根据输入的成绩输出等级</h3><ul>
<li>描述：定义一个显示成绩等级的方法showGrade，按照100分制，90分以上成绩为A，80～90为B，60～80为C，60以下为D。获取用户输入分数，调用showGrade方法，将分数转换为A、B、C或D的形式打印输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Scanner reader=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入成绩:&quot;</span>);</span><br><span class="line">		<span class="keyword">double</span> a = reader.nextDouble();</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>调用showGrade方法传入a参数</span></span><br><span class="line">		showGrade(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showGrade</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(num&gt;<span class="number">0</span>&amp;&amp;num&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(num&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(num&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;输入的成绩不符和规则&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="11、抽奖算法（懒得用switch语句）"><a href="#11、抽奖算法（懒得用switch语句）" class="headerlink" title="11、抽奖算法（懒得用switch语句）"></a>11、抽奖算法（懒得用switch语句）</h3><ul>
<li>描述：判断用户从键盘输入的正整数是否为中奖号码(9、131、12号码为三等奖，209、596、27号码为二等奖，875、316、59号码为一等奖)。打印输出是什么奖或者是未中奖。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example3_4</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> number;</span><br><span class="line">		System.out.println(<span class="string">&quot;输入正整数(回车确定)&quot;</span>);</span><br><span class="line">		Scanner reader=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		number = reader.nextInt();</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>当number的数值是9,131,12时，打印number+“是三等奖”</span></span><br><span class="line"><span class="comment">		当它是209,596,27时，打印number+“是二等奖”</span></span><br><span class="line"><span class="comment">		当它是875,316,59时，打印number+“是一等奖”</span></span><br><span class="line"><span class="comment">		否则打印number+“未中奖”</span></span><br><span class="line"><span class="comment">		提示：使用switch语句判断</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">if</span>(number==<span class="number">9</span>||number==<span class="number">131</span>||number==<span class="number">12</span>)&#123;</span><br><span class="line">			System.out.println(number+<span class="string">&quot;是三等奖&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(number==<span class="number">209</span>||number==<span class="number">596</span>||number==<span class="number">27</span>)&#123;</span><br><span class="line">			System.out.println(number+<span class="string">&quot;是二等奖&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(number==<span class="number">875</span>||number==<span class="number">316</span>||number==<span class="number">59</span>)&#123;</span><br><span class="line">			System.out.println(number+<span class="string">&quot;是一等奖&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(number+<span class="string">&quot;未中奖&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="12、根据输入的数值求和"><a href="#12、根据输入的数值求和" class="headerlink" title="12、根据输入的数值求和"></a>12、根据输入的数值求和</h3><ul>
<li>描述：定义int型变量a、n，从键盘输入两个正整数赋值给a、n，a代表首项，n代表前n项，输入每项数值为：x1=a，x2=a<em>10+a,x3=x2</em>10+a,…以此类推，编写应用程序，求前n项之和。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example3_5</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入一个正整数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> a = reader.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;输入前多少项：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> n = reader.nextInt();</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>调用sum方法传入a,n参数</span></span><br><span class="line">		sum(a,n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求和方法 </span></span><br><span class="line"><span class="comment">	功能描述：编写方法求前n项的和，并打印输出：System.out.println(&quot;求和：&quot;+sum);</span></span><br><span class="line"><span class="comment">	参数说明：a为首项，项数是n</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">long</span> x=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">				x=a;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				x=x*<span class="number">10</span>+a;</span><br><span class="line">			&#125;</span><br><span class="line">			sum=sum+x;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;求和：&quot;</span>+sum);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="13、求素数"><a href="#13、求素数" class="headerlink" title="13、求素数"></a>13、求素数</h3><ul>
<li>描述：获取从键盘输入的数值n，编写方法计算出2~n之间的所有素数，并打印输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入n：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> n = reader.nextInt();</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>调用prime方法传入需要判断的数n</span></span><br><span class="line">		prime(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求素数方法</span></span><br><span class="line"><span class="comment">	功能描述：编写方法求n以内的所有素数，并打印输出</span></span><br><span class="line"><span class="comment">	参数说明：int型变量n</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	提示：打印语句为System.out.println(j+&quot;是素数&quot;);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">int</span> j=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">while</span>(i%j!=<span class="number">0</span>)&#123;</span><br><span class="line">				j++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(j==i)&#123;</span><br><span class="line">				System.out.println(j+<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="14、遍历数组"><a href="#14、遍历数组" class="headerlink" title="14、遍历数组"></a>14、遍历数组</h3><ul>
<li>描述：定义一个int型数组，从键盘输入四个正整数存入数组中，每个数字按回车键确认，最后将该数组遍历输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入四个正整数(回车为确认)：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">		Scanner reader=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">			arr[i]= reader.nextInt();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>调用tArray方法，参数为arr[]数组</span></span><br><span class="line">		tArray(arr);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>遍历数组的方法</span></span><br><span class="line"><span class="comment">	功能描述：遍历数组中的所有元素打印输出</span></span><br><span class="line"><span class="comment">	参数说明：a[]要遍历的数组</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	输出语句提示：System.out.print( 数组内容 +&quot; &quot;);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tArray</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;请输出数组内容：&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">			System.out.print(a[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="15、二进制转换十进制"><a href="#15、二进制转换十进制" class="headerlink" title="15、二进制转换十进制"></a>15、二进制转换十进制</h3><ul>
<li>描述：用户输入一个二进制数值，将其转化成十进制后打印输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入一个二进制数值，将其转化成十进制后输出。</span></span><br><span class="line"><span class="comment">如：输入：01，输出：1.</span></span><br><span class="line"><span class="comment">如：输入：011，输出：3.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example7_95</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入1个二进制字符:&quot;</span>);</span><br><span class="line">		String s = input.next();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">//TODO：通过Integer类的valueOf方法将二进制字符转换int数值</span></span><br><span class="line">			<span class="keyword">int</span> a=Integer.valueOf(s,<span class="number">2</span>);</span><br><span class="line">			System.out.print(a);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.print(<span class="string">&quot;您输入的字符不是二进制字符&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="16、求三个实数的和以及平均值"><a href="#16、求三个实数的和以及平均值" class="headerlink" title="16、求三个实数的和以及平均值"></a>16、求三个实数的和以及平均值</h3><ul>
<li>描述：在键盘依次输入三个数字，每个数字按回车键确认，最后在键盘输入一个非数字的字符串结束整个操作，该三个数字求和以及平均值。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example3_9</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Scanner reader=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		* 在键盘依次输入三个数字，每个数字按回车键确认，</span></span><br><span class="line"><span class="comment">		* 最后在键盘输入一个非数字的字符串结束整个操作，</span></span><br><span class="line"><span class="comment">		* 该三个数字求和以及平均值。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">		<span class="keyword">while</span>(reader.hasNextDouble())&#123;</span><br><span class="line">			<span class="keyword">double</span> x=reader.nextDouble();</span><br><span class="line">			m=m+<span class="number">1</span>;</span><br><span class="line">			<span class="comment">/**  <span class="doctag">TODO:</span> 编写求和内容 **/</span></span><br><span class="line">			sum = sum+x;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.printf(<span class="string">&quot;%d个数的和为%f\n&quot;</span>,m,sum);</span><br><span class="line">		System.out.printf(<span class="string">&quot;%d个数的平均值是%f\n&quot;</span>,m,sum/m);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java学习笔记（2）Java面向对象基础作业函数题</title>
    <url>/java_study_note_2/</url>
    <content><![CDATA[<blockquote>
<p><strong>学校小学期Java课程的练习题，留个档便于以后需要时候有例子可以回忆，写的烂的地方请多多包含</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="1、求两个数值之和"><a href="#1、求两个数值之和" class="headerlink" title="1、求两个数值之和"></a>1、求两个数值之和</h3><ul>
<li>描述：定义一个计算器类，从键盘输入两个整数，每个整数按回车确认，调用计算器类中的add()方法计算两个整数之和，并输出结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	TODO：求两个数的和</span></span><br><span class="line"><span class="comment">    功能描述：设计方法，计算两个数之和，并返回结果</span></span><br><span class="line"><span class="comment">	参数说明：x，y需要计算的数</span></span><br><span class="line"><span class="comment">	返回值说明：将求和结果返回</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> re;</span><br><span class="line">		re=x+y;</span><br><span class="line">		<span class="keyword">return</span> re;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Computer com = <span class="keyword">new</span> Computer();</span><br><span class="line">        System.out.println(<span class="string">&quot;输入两个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> m = reader.nextInt();</span><br><span class="line">        <span class="keyword">int</span> n = reader.nextInt();</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">	    <span class="comment">//<span class="doctag">TODO:</span>调用Computer中的add方法，传入参数，将结果返回给result</span></span><br><span class="line">        result=com.add(m,n);</span><br><span class="line">        System.out.println(<span class="string">&quot;两数之和：&quot;</span>+result); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2、模拟收音机电池使用情况"><a href="#2、模拟收音机电池使用情况" class="headerlink" title="2、模拟收音机电池使用情况"></a>2、模拟收音机电池使用情况</h3><ul>
<li>描述：定义一个电池类和收音机类，电池类有电量这个成员，收音机类有耗电这个方法，当播放收音机就会耗电，现在模拟收音机电池使用情况，有一个满格的电池，让收音机使用，使用10个小时就会用完电池，输入一个整数，要使用几个小时，输出电池使用后的电量。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_7</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入使用几个小时：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> h = reader.nextInt();</span><br><span class="line">      	Battery nanfu = <span class="keyword">new</span> Battery(<span class="number">100</span>);</span><br><span class="line">      	System.out.println(<span class="string">&quot;南孚电池的储电量是:&quot;</span>+nanfu.electricityAmount);</span><br><span class="line">      	Radio radio = <span class="keyword">new</span> Radio();</span><br><span class="line">      	System.out.println(<span class="string">&quot;收音机开始使用南孚电池&quot;</span>);</span><br><span class="line">      	radio.openRadio(nanfu,h);</span><br><span class="line">      	System.out.println(<span class="string">&quot;目前南孚电池的储电量是:&quot;</span>+nanfu.electricityAmount);</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> electricityAmount;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>初始化构造方法</span></span><br><span class="line"><span class="comment">    功能描述：把传入的参数赋值给变量electricityAmount</span></span><br><span class="line"><span class="comment">	参数说明：amount为传入参数数值，int类型</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    Battery(<span class="keyword">int</span> amount)&#123;</span><br><span class="line">      	electricityAmount=amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Radio</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">openRadio</span><span class="params">(Battery battery,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(h&gt;=<span class="number">0</span> &amp;&amp; h&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">    		battery.electricityAmount = battery.electricityAmount-(h*<span class="number">10</span>);<span class="comment">//<span class="doctag">TODO:</span> 求电量=总电量-（h*10）</span></span><br><span class="line">    	&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="comment">//<span class="doctag">TODO:</span>输出字符串  时间输入格式有误</span></span><br><span class="line">            System.out.println(<span class="string">&quot;时间输入格式有误&quot;</span>);</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3、求圆锥的体积"><a href="#3、求圆锥的体积" class="headerlink" title="3、求圆锥的体积"></a>3、求圆锥的体积</h3><ul>
<li>描述：定义一个圆类和圆锥类，圆锥的底是一个圆，所以圆锥类有一个成员是圆类声明的对象，圆锥通过调用方法将某个圆的引用传递给圆锥的圆类型的成员变量，设置圆锥的底的半径和高，求出圆锥的体积。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	   	Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       	Circle circle = <span class="keyword">new</span> Circle();            <span class="comment">//【代码1】    </span></span><br><span class="line">       	System.out.println(<span class="string">&quot;输入圆锥底的半径：&quot;</span>);</span><br><span class="line">       	circle.setRadius(reader.nextDouble());                    <span class="comment">//【代码2】</span></span><br><span class="line">       	Circular circular = <span class="keyword">new</span> Circular();      <span class="comment">//【代码3】</span></span><br><span class="line">       	System.out.println(<span class="string">&quot;输入圆锥的高：&quot;</span>);</span><br><span class="line">       	circular.setHeight(reader.nextDouble());             </span><br><span class="line">       	circular.setBottom(circle);              <span class="comment">//【代码4】</span></span><br><span class="line">       	System.out.println(<span class="string">&quot;圆锥的体积:&quot;</span>+circular.getVolme());</span><br><span class="line">   	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> radius,area;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">		radius=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> radius;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>计算圆的面积</span></span><br><span class="line"><span class="comment">    功能描述：根据数学公式，编写计算圆面积的代码，半径为radius</span></span><br><span class="line"><span class="comment">	参数说明：无</span></span><br><span class="line"><span class="comment">	返回值说明：圆的面积   </span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">      	area=<span class="number">3.14</span>*radius*radius;</span><br><span class="line">      	<span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circular</span> </span>&#123;</span><br><span class="line">	Circle bottom;</span><br><span class="line">    <span class="keyword">double</span> height;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBottom</span><span class="params">(Circle c)</span> </span>&#123;</span><br><span class="line">       	bottom = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">       	height = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getVolme</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bottom == <span class="keyword">null</span>)</span><br><span class="line">           	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">	    <span class="comment">//<span class="doctag">TODO:</span> 求圆锥的体积，将计算结果返回</span></span><br><span class="line">            <span class="keyword">return</span> bottom.getArea()*height/<span class="number">3.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>获取圆的半径</span></span><br><span class="line"><span class="comment">    功能描述：获取Circle对象的半径（radius）数值</span></span><br><span class="line"><span class="comment">	参数说明：无</span></span><br><span class="line"><span class="comment">	返回值说明：Circle对象的半径</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getBottomRadius</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bottom.getRadius();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    <span class="doctag">TODO:</span>设置圆的半径</span></span><br><span class="line"><span class="comment">    功能描述：把传入的参数作为圆的半径，赋值给radius字段</span></span><br><span class="line"><span class="comment">	参数说明：r为半径</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBottomRadius</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">      bottom.setRadius(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4、模拟手机和SIM卡的组合关系"><a href="#4、模拟手机和SIM卡的组合关系" class="headerlink" title="4、模拟手机和SIM卡的组合关系"></a>4、模拟手机和SIM卡的组合关系</h3><ul>
<li>描述：定义一个手机类和SIM卡类，一个手机可以安装任何SIM卡，手机类中有SIM卡的成员变量，并可以调用方法更改其中的SIM卡，现在创建一个手机，给手机安装了一个SIM卡，要换一个其他SIM卡，输出原来和更换后的卡号。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_9</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	   	Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	   	System.out.println(<span class="string">&quot;输入手机卡号：&quot;</span>);</span><br><span class="line">       	SIM simOne = <span class="keyword">new</span> SIM(reader.nextLong());</span><br><span class="line">       	MobileTelephone mobile = <span class="keyword">new</span> MobileTelephone();</span><br><span class="line">       	mobile.setSIM(simOne);</span><br><span class="line">       	System.out.println(<span class="string">&quot;原来的手机号码:&quot;</span>+mobile.lookNumber());</span><br><span class="line">       	System.out.println(<span class="string">&quot;更换手机卡的号码为：&quot;</span>);</span><br><span class="line">       	SIM simTwo = <span class="keyword">new</span> SIM(reader.nextLong());</span><br><span class="line">       	mobile.setSIM(simTwo);</span><br><span class="line">       	System.out.println(<span class="string">&quot;更换后的手机号码:&quot;</span>+mobile.lookNumber());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"><span class="doctag">TODO:</span>编写手机卡类 </span></span><br><span class="line"><span class="comment">有long型的变量number</span></span><br><span class="line"><span class="comment">有有参构造方法</span></span><br><span class="line"><span class="comment">还有一个getNumber()获取number</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SIM</span> </span>&#123;</span><br><span class="line">	<span class="keyword">long</span> number;</span><br><span class="line">	SIM(<span class="keyword">long</span> tmp)&#123;</span><br><span class="line">		number=tmp;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(<span class="keyword">long</span> tmp)</span></span>&#123;</span><br><span class="line">        number=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"><span class="doctag">TODO:</span>编写手机类</span></span><br><span class="line"><span class="comment">有SIM类声明的变量sim</span></span><br><span class="line"><span class="comment">有setSIM()方法设置sim</span></span><br><span class="line"><span class="comment">有lookNumber()方法获取sim中的number</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileTelephone</span> </span>&#123;</span><br><span class="line">    SIM sim;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSIM</span><span class="params">(SIM tmp)</span></span>&#123;</span><br><span class="line">        sim=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">lookNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sim.getNumber();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5、梯形共享一个下底的问题"><a href="#5、梯形共享一个下底的问题" class="headerlink" title="5、梯形共享一个下底的问题"></a>5、梯形共享一个下底的问题</h3><ul>
<li>描述：定义一个Lader类，Lader类创建的梯形对象共享同一个下底，设置共享下底值，使用Lader类创建两个梯形，并输出两个梯形的下底。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_10</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入梯形的共享下底：&quot;</span>);</span><br><span class="line">		Lader1.bottom=reader.nextDouble();     <span class="comment">//Lader1的字节码被加载到内存,通过类名操作类变量</span></span><br><span class="line">		Lader1 laderOne=<span class="keyword">new</span> Lader1();</span><br><span class="line">		Lader1 laderTwo=<span class="keyword">new</span> Lader1();</span><br><span class="line">		System.out.println(<span class="string">&quot;laderOne的下底:&quot;</span>+laderOne.getBottom());</span><br><span class="line">		System.out.println(<span class="string">&quot;laderTwo的下底:&quot;</span>+laderTwo.getBottom());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lader1</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> above,height;       <span class="comment">//实例变量，上底和高</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">double</span> bottom;     <span class="comment">//类变量，下底</span></span><br><span class="line">	<span class="comment">/*TODO：设置上底字段的值</span></span><br><span class="line"><span class="comment">    功能描述：把传入的参数作为上底的值，赋值给字段</span></span><br><span class="line"><span class="comment">	参数说明：a传入的上底值</span></span><br><span class="line"><span class="comment">    返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAbove</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">		above=a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*TODO：设置下底字段的值</span></span><br><span class="line"><span class="comment">   	功能描述：把传入的参数作为下底的值，赋值给字段</span></span><br><span class="line"><span class="comment">	参数说明：b传入的下底值</span></span><br><span class="line"><span class="comment">    返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setBottom</span><span class="params">(<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">		bottom=b;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">/*TODO：获取上底</span></span><br><span class="line"><span class="comment">    功能描述：获取上底字段的值并返回</span></span><br><span class="line"><span class="comment">	参数说明：无</span></span><br><span class="line"><span class="comment">    返回值说明：上底的值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">getAbove</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> above;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">/*TODO：获取下底</span></span><br><span class="line"><span class="comment">    功能描述：获取下底字段的值并返回</span></span><br><span class="line"><span class="comment">	参数说明：无</span></span><br><span class="line"><span class="comment">    返回值说明：下底的值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">getBottom</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bottom;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6、二分法查询"><a href="#6、二分法查询" class="headerlink" title="6、二分法查询"></a>6、二分法查询</h3><ul>
<li>描述：定义一个int型数组并初始化，将数组从小到大排序，然后使用二分法判断用户从键盘输入的整数是否和数组中某个元素的值相同，即是否在数组中，最后打印输出和哪个元素值相同，或者不与数组中任何元素值相同。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_11</span> </span>&#123;</span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      	Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      	<span class="keyword">int</span> [] a=&#123;<span class="number">12</span>,<span class="number">34</span>,<span class="number">9</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">6</span>,<span class="number">45</span>,<span class="number">90</span>,<span class="number">123</span>,<span class="number">19</span>,<span class="number">34</span>&#125;;</span><br><span class="line">      	<span class="comment">//<span class="doctag">TODO:</span>调用Arrays的sort方法排序a数组</span></span><br><span class="line">      	Arrays.sort(a);</span><br><span class="line">      	System.out.println(Arrays.toString(a));</span><br><span class="line">      	System.out.println(<span class="string">&quot;输入整数，程序判断该整数是否在数组中:&quot;</span>);</span><br><span class="line">      	<span class="keyword">int</span> number = scanner.nextInt();</span><br><span class="line">      	<span class="comment">/*</span></span><br><span class="line"><span class="comment">      	<span class="doctag">TODO:</span>用Arrays.binarySearch(a,number)获得number数值在a数组中的序号</span></span><br><span class="line"><span class="comment">      	并把结果赋给int类型的index</span></span><br><span class="line"><span class="comment">      	*/</span></span><br><span class="line">      	<span class="keyword">int</span> index = Arrays.binarySearch(a,number); </span><br><span class="line">      	<span class="keyword">if</span>(index&gt;=<span class="number">0</span>)</span><br><span class="line">        	System.out.println(number+<span class="string">&quot;和数组中索引为&quot;</span>+index+<span class="string">&quot;的元素值相同&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">         	System.out.println(number+<span class="string">&quot;不与数组中任何元素值相同&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7、类中方法重载的实现"><a href="#7、类中方法重载的实现" class="headerlink" title="7、类中方法重载的实现"></a>7、类中方法重载的实现</h3><ul>
<li>描述：定义一个B类，有两个相同名称的方法hello,参数不同，一个方法是将两个整数相加，另一个是将两个小数相乘，根据提示从键盘输入四个数值，调用B类中的hello方法，并将结果打印。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"><span class="doctag">TODO:</span>在类B中编写两个方法名为hello的方法</span></span><br><span class="line"><span class="comment">第一个方法：参数为两个整数a,b返回两个数的和</span></span><br><span class="line"><span class="comment">第二个方法：参数为double型的a,b返回两个数的积</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hello</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">hello</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a*b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    	Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	System.out.println(<span class="string">&quot;请输入两个整数：&quot;</span>);</span><br><span class="line">    	<span class="keyword">int</span> b = reader.nextInt();</span><br><span class="line">    	<span class="keyword">int</span> a = reader.nextInt();</span><br><span class="line">    	System.out.println(<span class="string">&quot;输入两个小数：&quot;</span>);</span><br><span class="line">    	<span class="keyword">double</span> c = reader.nextDouble();</span><br><span class="line">    	<span class="keyword">double</span> d = reader.nextDouble();</span><br><span class="line">      	<span class="comment">//<span class="doctag">TODO:</span>创建B对象</span></span><br><span class="line">      	B tom=<span class="keyword">new</span> B();</span><br><span class="line">      	System.out.println(<span class="string">&quot;两个整数调用hello方法的结果：&quot;</span>);</span><br><span class="line">      	System.out.println(tom.hello(a,b));</span><br><span class="line">      	System.out.println(<span class="string">&quot;两个小数调用hello方法的结果：&quot;</span>);</span><br><span class="line">      	System.out.println(tom.hello(c,d));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="8、求圆和梯形的面积"><a href="#8、求圆和梯形的面积" class="headerlink" title="8、求圆和梯形的面积"></a>8、求圆和梯形的面积</h3><ul>
<li>描述：定义学生类、梯形类、圆类，在梯形类和圆类中都有一个计算面积的方法，学生类中有两个获得圆面积和梯形面积的computerArea方法，测试创建一个学生zhang，设置圆的半径和梯形的上底、下底、高，调用zhang的computerArea方法，得到圆和梯形的面积，并打印输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_13</span> </span>&#123;</span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	  Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	  System.out.println(<span class="string">&quot;请输入圆的半径：&quot;</span>);</span><br><span class="line">      Circle1 circle = <span class="keyword">new</span> Circle1();</span><br><span class="line">      circle.setRadius(reader.nextDouble());</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入梯形的上底、下底、高：&quot;</span>);</span><br><span class="line">      Tixing lader = <span class="keyword">new</span> Tixing(reader.nextDouble(),reader.nextDouble(),reader.nextDouble());</span><br><span class="line">      Student zhang = <span class="keyword">new</span> Student();</span><br><span class="line">      System.out.println(<span class="string">&quot;zhang计算圆的面积：&quot;</span>);</span><br><span class="line">      <span class="keyword">double</span> result=zhang.computerArea(circle);</span><br><span class="line">      System.out.println(result);</span><br><span class="line">      System.out.println(<span class="string">&quot;zhang计算梯形的面积：&quot;</span>);</span><br><span class="line">      result=zhang.computerArea(lader);</span><br><span class="line">      System.out.println(result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Circle1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> radius,area;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">    <span class="doctag">TODO:</span>设置半径</span></span><br><span class="line"><span class="comment">    功能描述：初始化半径radius</span></span><br><span class="line"><span class="comment">    参数说明：r传入的半径值</span></span><br><span class="line"><span class="comment">    返回值说明：无</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">        radius=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    <span class="doctag">TODO:</span>求圆的面积</span></span><br><span class="line"><span class="comment">    功能描述：根据求圆面积的公式，编写代码，求圆面积的值</span></span><br><span class="line"><span class="comment">    参数说明：无</span></span><br><span class="line"><span class="comment">    返回值说明：圆面积值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        area=<span class="number">3.14</span>*radius*radius;</span><br><span class="line">        <span class="keyword">return</span> area;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Tixing</span> </span>&#123;</span><br><span class="line">   <span class="keyword">double</span> above,bottom,height;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   <span class="doctag">TODO:</span>初始化变量</span></span><br><span class="line"><span class="comment">   功能描述：分别初始化above、bottom、height三个变量值为a、b、h</span></span><br><span class="line"><span class="comment">   参数说明：a，b，h分别对应梯形的上底、下底、高</span></span><br><span class="line"><span class="comment">   返回值说明：无</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   Tixing(<span class="keyword">double</span> a,<span class="keyword">double</span> b,<span class="keyword">double</span> h) &#123;</span><br><span class="line">       above=a;</span><br><span class="line">       bottom=b;</span><br><span class="line">       height=h;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   <span class="doctag">TODO:</span>求梯形的面积</span></span><br><span class="line"><span class="comment">   功能描述：根据求梯形面积的公式，编写代码求出梯形面积值</span></span><br><span class="line"><span class="comment">   参数说明：无</span></span><br><span class="line"><span class="comment">   返回值说明：梯形面积值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0.5</span>*(above+bottom)*height;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">double</span> <span class="title">computerArea</span><span class="params">(Circle1 c)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//TODO：调用Circle1的getArea方法获取面积</span></span><br><span class="line">      <span class="keyword">double</span> area=c.getArea();</span><br><span class="line">      <span class="keyword">return</span> area;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">double</span> <span class="title">computerArea</span><span class="params">(Tixing t)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//TODO：调用Tixing的getArea方法获取面积</span></span><br><span class="line">      <span class="keyword">double</span> area=t.getArea();</span><br><span class="line">      <span class="keyword">return</span> area;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="9、根据输入的名字初始化对象"><a href="#9、根据输入的名字初始化对象" class="headerlink" title="9、根据输入的名字初始化对象"></a>9、根据输入的名字初始化对象</h3><ul>
<li>描述：定义People1类，包含int型成员变量 leg、hand，String类型变量name，以及有参构造函数，和初始化的方法。获取键盘输入的名字，作为构造函数的参数，初始化对象，并打印对象属性值。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People1</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> leg,hand;</span><br><span class="line">    String name;</span><br><span class="line">    People1(String s)&#123;</span><br><span class="line">        <span class="comment">//TODO：将参数s赋值给name</span></span><br><span class="line">        name=s;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">       leg=<span class="number">2</span>;</span><br><span class="line">       hand=<span class="number">2</span>;</span><br><span class="line">       System.out.println(name+<span class="string">&quot;有&quot;</span>+hand+<span class="string">&quot;只手&quot;</span>+leg+<span class="string">&quot;条腿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    	Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	System.out.println(<span class="string">&quot;请输入名字：&quot;</span>);</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>创建People1时，构造方法中的传入参数为输入的值</span></span><br><span class="line">        People1 p=<span class="keyword">new</span> People1(reader.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="10、大小写转换"><a href="#10、大小写转换" class="headerlink" title="10、大小写转换"></a>10、大小写转换</h3><ul>
<li>描述：从键盘输入含有大小写字母的字符串，按回车结束，然后将字符串中的小写字母转换成大写，大写字母转换成小写，并将转换后的字符串输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_20</span> </span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span> </span>&#123; </span><br><span class="line">	   Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	   System.out.println(<span class="string">&quot;请输入一串英文字母（回车确认）:&quot;</span>);</span><br><span class="line">      String str = reader.nextLine();</span><br><span class="line">      <span class="keyword">char</span> a[]=<span class="keyword">new</span> <span class="keyword">char</span>[str.length()];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++) &#123; </span><br><span class="line">         <span class="keyword">if</span>(Character.isLowerCase(str.charAt(i)))    </span><br><span class="line">        	 <span class="comment">//<span class="doctag">TODO:</span> 将小写字母变成大写</span></span><br><span class="line">             a[i]=Character.toUpperCase(str.charAt(i));</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span>(Character.isUpperCase(str.charAt(i)))</span><br><span class="line">             <span class="comment">//<span class="doctag">TODO:</span> 将大写字母变成小写</span></span><br><span class="line">             a[i]=Character.toLowerCase(str.charAt(i));</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">        	 System.out.println(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;个字母&quot;</span>+str.charAt(i)+<span class="string">&quot;输入有误&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;大小写转换后的字母：&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)   </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         <span class="doctag">TODO:</span>输出数组a中的内容</span></span><br><span class="line"><span class="comment">         输出提示：System.out.print(&quot; &quot;+输出内容);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.print(<span class="string">&quot; &quot;</span>+a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="11、求矩形和梯形的面积"><a href="#11、求矩形和梯形的面积" class="headerlink" title="11、求矩形和梯形的面积"></a>11、求矩形和梯形的面积</h3><ul>
<li>描述：定义一个矩形类和梯形类，分别求矩形面积和梯形的面积，并输出结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">       Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       <span class="comment">/** <span class="doctag">TODO:</span>创建Rect类对象ractangle **/</span> </span><br><span class="line">       Rect ractangle=<span class="keyword">new</span> Rect();</span><br><span class="line">       System.out.println(<span class="string">&quot;输入矩形的宽：&quot;</span>);</span><br><span class="line">       ractangle.width = reader.nextDouble();</span><br><span class="line">       System.out.println(<span class="string">&quot;输入矩形的高：&quot;</span>);</span><br><span class="line">       ractangle.height = reader.nextDouble();</span><br><span class="line">       <span class="keyword">double</span> area=ractangle.getArea();</span><br><span class="line">       System.out.println(<span class="string">&quot;矩形的面积:&quot;</span>+area);</span><br><span class="line">       <span class="comment">/** <span class="doctag">TODO:</span>创建Lader类对象lader **/</span> </span><br><span class="line">       Lader lader=<span class="keyword">new</span> Lader();</span><br><span class="line">       System.out.println(<span class="string">&quot;输入梯形的上底：&quot;</span>);</span><br><span class="line">       lader.above= reader.nextDouble();</span><br><span class="line">       System.out.println(<span class="string">&quot;输入梯形的下底：&quot;</span>);</span><br><span class="line">       lader.bottom= reader.nextDouble();</span><br><span class="line">       System.out.println(<span class="string">&quot;输入梯形的高：&quot;</span>);</span><br><span class="line">       lader.height= reader.nextDouble();</span><br><span class="line">       area=lader.getArea();</span><br><span class="line">       System.out.println(<span class="string">&quot;梯形的面积:&quot;</span>+area);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> width;  <span class="comment">//矩形的宽</span></span><br><span class="line">    <span class="keyword">double</span> height; <span class="comment">//矩形的高</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">/** <span class="doctag">TODO:</span> 求矩形面积 **/</span></span><br><span class="line">       <span class="keyword">return</span> width*height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> above;   <span class="comment">//梯形的上底</span></span><br><span class="line">    <span class="keyword">double</span> bottom;  <span class="comment">//梯形的下底</span></span><br><span class="line">    <span class="keyword">double</span> height;  <span class="comment">//梯形的高</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**<span class="doctag">TODO:</span>  求梯形面积 **/</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">0.5</span>*(above+bottom)*height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="12、分数运算"><a href="#12、分数运算" class="headerlink" title="12、分数运算"></a>12、分数运算</h3><ul>
<li>描述：定义一个Rational类，编写方法对两个分数做加法减法乘法除法，返回结果为分数，从键盘输入两个数的分子和分母，对这两个数求加减乘除，并输出结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_23</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      Scanner reader = <span class="keyword">new</span> Scanner(System.in); </span><br><span class="line">      Rational r1=<span class="keyword">new</span> Rational();</span><br><span class="line">      r1.setNumerator(reader.nextInt());</span><br><span class="line">      r1.setDenominator(reader.nextInt());</span><br><span class="line">      Rational r2=<span class="keyword">new</span> Rational();</span><br><span class="line">      r2.setNumerator(reader.nextInt());</span><br><span class="line">      r2.setDenominator(reader.nextInt());</span><br><span class="line">      Rational result=r1.add(r2); </span><br><span class="line">      <span class="keyword">int</span> a=result.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=result.getDenominator();  </span><br><span class="line">      System.out.println(<span class="string">&quot;求和： &quot;</span>+a+<span class="string">&quot;/&quot;</span>+b);</span><br><span class="line">      result=r1.sub(r2);</span><br><span class="line">      a=result.getNumerator();</span><br><span class="line">      b=result.getDenominator();    </span><br><span class="line">      System.out.println(<span class="string">&quot;求差： &quot;</span>+a+<span class="string">&quot;/&quot;</span>+b);</span><br><span class="line">      result=r1.muti(r2); </span><br><span class="line">      a=result.getNumerator();</span><br><span class="line">      b=result.getDenominator();  </span><br><span class="line">      System.out.println(<span class="string">&quot;求积：&quot;</span>+a+<span class="string">&quot;/&quot;</span>+b);</span><br><span class="line">      result=r1.div(r2);</span><br><span class="line">      a=result.getNumerator();</span><br><span class="line">      b=result.getDenominator();   </span><br><span class="line">      System.out.println(<span class="string">&quot;求商： &quot;</span>+a+<span class="string">&quot;/&quot;</span>+b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> numerator = <span class="number">1</span> ;   <span class="comment">//分子</span></span><br><span class="line">   <span class="keyword">int</span> denominator = <span class="number">1</span>; <span class="comment">//分母</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setNumerator</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;  <span class="comment">//设置分子</span></span><br><span class="line">      <span class="keyword">int</span> c=f(Math.abs(a),denominator);  <span class="comment">//计算最大公约数</span></span><br><span class="line">      numerator = a/c; </span><br><span class="line">      denominator = denominator/c;</span><br><span class="line">      <span class="keyword">if</span>(numerator&lt;<span class="number">0</span>&amp;&amp;denominator&lt;<span class="number">0</span>) &#123;</span><br><span class="line">          numerator = -numerator;</span><br><span class="line">          denominator = -denominator;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setDenominator</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;  <span class="comment">//设置分母</span></span><br><span class="line">      <span class="keyword">int</span> c=f(numerator,Math.abs(b));  <span class="comment">//计算最大公约数</span></span><br><span class="line">      numerator = numerator/c;</span><br><span class="line">      denominator = b/c;</span><br><span class="line">      <span class="keyword">if</span>(numerator&lt;<span class="number">0</span>&amp;&amp;denominator&lt;<span class="number">0</span>) &#123;</span><br><span class="line">          numerator = -numerator;</span><br><span class="line">          denominator = -denominator;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getNumerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> numerator;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getDenominator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> denominator;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">//求a和b的最大公约数</span></span><br><span class="line">      <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(a&lt;b) &#123;</span><br><span class="line">         <span class="keyword">int</span> c=a;</span><br><span class="line">         a=b;</span><br><span class="line">         b=c; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> r=a%b;</span><br><span class="line">      <span class="keyword">while</span>(r!=<span class="number">0</span>) &#123;</span><br><span class="line">         a=b;</span><br><span class="line">         b=r;</span><br><span class="line">         r=a%b;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">add</span><span class="params">(Rational r)</span> </span>&#123;  <span class="comment">//加法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*b+denominator*a; <span class="comment">//计算出新分子</span></span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*b;           <span class="comment">//计算出新分母</span></span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">sub</span><span class="params">(Rational r)</span> </span>&#123;  <span class="comment">//减法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*b-denominator*a;</span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*b;</span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">muti</span><span class="params">(Rational r)</span> </span>&#123; <span class="comment">//乘法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*a;</span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*b;</span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">div</span><span class="params">(Rational r)</span>  </span>&#123; <span class="comment">//除法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*b;</span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*a;</span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="13、求前n项之和"><a href="#13、求前n项之和" class="headerlink" title="13、求前n项之和"></a>13、求前n项之和</h3><ul>
<li>描述：从键盘输入一个为n的项数,按回车结束,计算2/1+3/2+4/3+…+(n+1)/n之和，结果用分数表示和小数，并输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example4_24</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	   Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> n=reader.nextInt(),k=<span class="number">1</span>,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">      System.out.println(<span class="string">&quot;前&quot;</span>+n+<span class="string">&quot;项求和：&quot;</span>);</span><br><span class="line">      Rational sum=<span class="keyword">new</span> Rational();</span><br><span class="line">      sum.setNumerator(<span class="number">0</span>);</span><br><span class="line">      Rational item=<span class="keyword">new</span> Rational();</span><br><span class="line">      item.setNumerator(<span class="number">2</span>);</span><br><span class="line">      item.setDenominator(<span class="number">1</span>);</span><br><span class="line">      sum=sum.add(item);</span><br><span class="line">      a=<span class="number">2</span>;</span><br><span class="line">      b=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">while</span>(k&lt;n) &#123;</span><br><span class="line">         <span class="comment">//求前n项和的分子和分母</span></span><br><span class="line">         <span class="comment">// TODO：</span></span><br><span class="line">         item.setNumerator(a+b);</span><br><span class="line">         item.setDenominator(a);</span><br><span class="line">         sum=sum.add(item);</span><br><span class="line">         <span class="keyword">int</span> temp=a;</span><br><span class="line">         a=a+b;</span><br><span class="line">         b=temp;</span><br><span class="line">         k++;</span><br><span class="line">      &#125; </span><br><span class="line">      a=sum.getNumerator();</span><br><span class="line">      b=sum.getDenominator();</span><br><span class="line">      System.out.println(<span class="string">&quot;用分数表示:&quot;</span>);</span><br><span class="line">      System.out.println(a+<span class="string">&quot;/&quot;</span>+b);</span><br><span class="line">      <span class="keyword">double</span> doubleResult=(a*<span class="number">1.0</span>)/b;</span><br><span class="line">      System.out.println(<span class="string">&quot;用小数表示:&quot;</span>);</span><br><span class="line">      System.out.print(doubleResult); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> numerator = <span class="number">1</span> ;   <span class="comment">//分子</span></span><br><span class="line">   <span class="keyword">int</span> denominator = <span class="number">1</span>; <span class="comment">//分母</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setNumerator</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;  <span class="comment">//设置分子</span></span><br><span class="line">      <span class="keyword">int</span> c=f(Math.abs(a),denominator);  <span class="comment">//计算最大公约数</span></span><br><span class="line">      numerator = a/c; </span><br><span class="line">      denominator = denominator/c;</span><br><span class="line">      <span class="keyword">if</span>(numerator&lt;<span class="number">0</span>&amp;&amp;denominator&lt;<span class="number">0</span>) &#123;</span><br><span class="line">          numerator = -numerator;</span><br><span class="line">          denominator = -denominator;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setDenominator</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123;  <span class="comment">//设置分母</span></span><br><span class="line">      <span class="keyword">int</span> c=f(numerator,Math.abs(b));  <span class="comment">//计算最大公约数</span></span><br><span class="line">      numerator = numerator/c;</span><br><span class="line">      denominator = b/c;</span><br><span class="line">      <span class="keyword">if</span>(numerator&lt;<span class="number">0</span>&amp;&amp;denominator&lt;<span class="number">0</span>) &#123;</span><br><span class="line">          numerator = -numerator;</span><br><span class="line">          denominator = -denominator;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getNumerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> numerator;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getDenominator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> denominator;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="comment">//求a和b的最大公约数</span></span><br><span class="line">      <span class="keyword">if</span>(a==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(a&lt;b) &#123;</span><br><span class="line">         <span class="keyword">int</span> c=a;</span><br><span class="line">         a=b;</span><br><span class="line">         b=c; </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> r=a%b;</span><br><span class="line">      <span class="keyword">while</span>(r!=<span class="number">0</span>) &#123;</span><br><span class="line">         a=b;</span><br><span class="line">         b=r;</span><br><span class="line">         r=a%b;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">return</span> b;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">add</span><span class="params">(Rational r)</span> </span>&#123;  <span class="comment">//加法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*b+denominator*a; <span class="comment">//计算出新分子</span></span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*b;           <span class="comment">//计算出新分母</span></span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">sub</span><span class="params">(Rational r)</span> </span>&#123;  <span class="comment">//减法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*b-denominator*a;</span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*b;</span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">muti</span><span class="params">(Rational r)</span> </span>&#123; <span class="comment">//乘法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*a;</span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*b;</span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function">Rational <span class="title">div</span><span class="params">(Rational r)</span>  </span>&#123; <span class="comment">//除法运算</span></span><br><span class="line">      <span class="keyword">int</span> a=r.getNumerator();</span><br><span class="line">      <span class="keyword">int</span> b=r.getDenominator();</span><br><span class="line">      <span class="keyword">int</span> newNumerator=numerator*b;</span><br><span class="line">      <span class="keyword">int</span> newDenominator=denominator*a;</span><br><span class="line">      Rational result=<span class="keyword">new</span> Rational(); </span><br><span class="line">      result.setNumerator(newNumerator);</span><br><span class="line">      result.setDenominator(newDenominator);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="14、求分数评定的最后得分"><a href="#14、求分数评定的最后得分" class="headerlink" title="14、求分数评定的最后得分"></a>14、求分数评定的最后得分</h3><blockquote>
<p>就是不能通过，很申必，我觉得代码没问题就贴上来了</p>
</blockquote>
<ul>
<li>描述：用流水线完成分数评定,其中InputScore类的对象负责录入分数,InputScore类组合了DelScore类的对象；DelScore类的对象负责去掉一个最高分和一个最低分,DelScore类组合了ComputerAver类对象;ComputerAver类对象负责计算平均值;Line类组合了InputScore、DelScore和ComputerAver三个类的实例,从键盘输入评委数和每位评委的评分，根据规则计算出平均分,并输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingGame</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Line line=<span class="keyword">new</span>  Line();</span><br><span class="line">      line.givePersonScore();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputScore</span> </span>&#123;</span><br><span class="line">   DelScore del ;</span><br><span class="line">   InputScore(DelScore del) &#123;</span><br><span class="line">       <span class="comment">/** <span class="doctag">TODO:</span> 给类成员变量del赋值 **/</span></span><br><span class="line">	   <span class="keyword">this</span>.del=del;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入评委数&quot;</span>);</span><br><span class="line">      Scanner read=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> count = read.nextInt();</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入各个评委的分数&quot;</span>);</span><br><span class="line">      <span class="keyword">double</span> []a = <span class="keyword">new</span> <span class="keyword">double</span>[count];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++) &#123;</span><br><span class="line">           a[i]=read.nextDouble();</span><br><span class="line">      &#125;</span><br><span class="line">      del.doDelete(a);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span> </span>&#123;</span><br><span class="line">    InputScore one;</span><br><span class="line">    DelScore two;</span><br><span class="line">    ComputerAver three;  </span><br><span class="line">    Line()&#123;</span><br><span class="line">       <span class="comment">/** <span class="doctag">TODO:</span> 给类成员变量one，two，three赋值 **/</span></span><br><span class="line">    	three=<span class="keyword">new</span> ComputerAver();</span><br><span class="line">    	two=<span class="keyword">new</span> DelScore(three);</span><br><span class="line">    	one= <span class="keyword">new</span> InputScore(two);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givePersonScore</span><span class="params">()</span></span>&#123; </span><br><span class="line">       one.inputScore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerAver</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">giveAver</span><span class="params">(<span class="keyword">double</span> [] b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;b.length;i++) &#123;  </span><br><span class="line">         sum = sum+ b[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">double</span> aver=sum/b.length;</span><br><span class="line">      System.out.print(<span class="string">&quot;选手最后得分&quot;</span>+aver);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelScore</span> </span>&#123;</span><br><span class="line">   ComputerAver computer ;</span><br><span class="line">   DelScore(ComputerAver computer) &#123;</span><br><span class="line">       <span class="keyword">this</span>.computer = computer;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(<span class="keyword">double</span> [] a)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/** <span class="doctag">TODO:</span> 数组a从小到大排序 **/</span></span><br><span class="line">       java.util.Arrays.sort(a);</span><br><span class="line">      System.out.print(<span class="string">&quot;去掉一个最高分:&quot;</span>+a[a.length-<span class="number">1</span>]+<span class="string">&quot;，&quot;</span>);</span><br><span class="line">      System.out.print(<span class="string">&quot;去掉一个最低分:&quot;</span>+a[<span class="number">0</span>]+<span class="string">&quot;。&quot;</span>);  </span><br><span class="line">      <span class="keyword">double</span> b[] =<span class="keyword">new</span> <span class="keyword">double</span>[a.length-<span class="number">2</span>];</span><br><span class="line">       <span class="comment">/** <span class="doctag">TODO:</span> 给b赋值，去掉最高分和最低分 **/</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">2</span>;i++) &#123;<span class="comment">//去掉最高分和最低分</span></span><br><span class="line">  		b[i] = a[i+<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      computer.giveAver(b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java学习笔记（4）Java接口作业函数题</title>
    <url>/java_study_note_4/</url>
    <content><![CDATA[<blockquote>
<p><strong>学校小学期Java课程的练习题，留个档便于以后需要时候有例子可以回忆，写的烂的地方请多多包含</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="1、计算输入学号、数字的和"><a href="#1、计算输入学号、数字的和" class="headerlink" title="1、计算输入学号、数字的和"></a>1、计算输入学号、数字的和</h3><ul>
<li>描述：定义一个接口Computable，包含静态变量MAX=46和方法f()。定义类China、Japan实现接口。类China中实现的f方法为 求1到x的数字之和，类Japan中实现的f方法为 求MAX和x的和。输入实例zhang、henlu的学号和数字n，打印输出学号和求和结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Computable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> MAX = <span class="number">46</span>;</span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">China</span> <span class="keyword">implements</span> <span class="title">Computable</span> </span>&#123;  <span class="comment">//China类实现Computable接口</span></span><br><span class="line">   <span class="keyword">int</span> number;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   <span class="doctag">TODO:</span>求1-x的和</span></span><br><span class="line"><span class="comment">   功能描述：设计算法，求1至x的所有整数之和</span></span><br><span class="line"><span class="comment">   参数说明：x int型</span></span><br><span class="line"><span class="comment">   返回值说明：1-x的和</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">//不要忘记public关键字</span></span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</span><br><span class="line">            sum=sum+i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Japan</span> <span class="keyword">implements</span> <span class="title">Computable</span> </span>&#123; <span class="comment">//Japan类实现Computable接口</span></span><br><span class="line">   <span class="keyword">int</span> number;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求MAX和x的和</span></span><br><span class="line"><span class="comment">    功能描述：计算MAX+x的和，将结果返回</span></span><br><span class="line"><span class="comment">    参数说明：x int型</span></span><br><span class="line"><span class="comment">    返回值说明：MAX+x的值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> MAX+x;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      China zhang;</span><br><span class="line">      Japan henlu;</span><br><span class="line">      zhang=<span class="keyword">new</span> China();</span><br><span class="line">      henlu=<span class="keyword">new</span> Japan();</span><br><span class="line">      System.out.println(<span class="string">&quot;输入zhang的学号、数字n（计算1..n的和）：&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;输入henlu的学号、数字n（计算n+MAX的和）：&quot;</span>);</span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">int</span> a,b;</span><br><span class="line">      a=scanner.nextInt();</span><br><span class="line">      b=scanner.nextInt();</span><br><span class="line">      <span class="keyword">int</span> c,d;</span><br><span class="line">      d = scanner.nextInt();</span><br><span class="line">      c = scanner.nextInt();</span><br><span class="line">      zhang.number=a+Computable.MAX;</span><br><span class="line">      henlu.number=c+Computable.MAX;</span><br><span class="line">      System.out.println(<span class="string">&quot;----------输出-----------&quot;</span>);</span><br><span class="line">	  <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  <span class="doctag">TODO:</span>输出zhang的学号、zhang求和结果；henlu的学号、henlu求和结果  即调用俩者number属性和f方法</span></span><br><span class="line"><span class="comment">      输出格式提示：</span></span><br><span class="line"><span class="comment">      System.out.println(&quot;zhang的学号&quot;+ 学号 +&quot;,zhang求和结果&quot;+ 求和结果);</span></span><br><span class="line"><span class="comment">      System.out.println(&quot;henlu的学号&quot;+ 学号 +&quot;,henlu求和结果&quot;+ 求和结果);</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">      System.out.println(<span class="string">&quot;zhang的学号&quot;</span>+zhang.number+<span class="string">&quot;,zhang求和结果&quot;</span>+zhang.f(b));</span><br><span class="line">      System.out.println(<span class="string">&quot;henlu的学号&quot;</span>+henlu.number+<span class="string">&quot;,henlu求和结果&quot;</span>+henlu.f(d));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2、对输入的字符串进行打印输出"><a href="#2、对输入的字符串进行打印输出" class="headerlink" title="2、对输入的字符串进行打印输出"></a>2、对输入的字符串进行打印输出</h3><ul>
<li>描述：定义一个接口ShowMessage，包含有show方法。利用接口回调技术，两个不同的类（TV/PC）实现同一个接口的方法，显示商品的品牌。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">ShowMessage</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">implements</span> <span class="title">ShowMessage</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PC</span> <span class="keyword">implements</span> <span class="title">ShowMessage</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span> </span>&#123; </span><br><span class="line">	System.out.println(s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      ShowMessage sm;                  <span class="comment">//声明接口变量</span></span><br><span class="line">      sm=<span class="keyword">new</span> TV();                     <span class="comment">//接口变量中存放对象的引用</span></span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入TV的商标&quot;</span>);</span><br><span class="line">	  <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  <span class="doctag">TODO:</span>接口回调，即调用sm显示商标方法</span></span><br><span class="line"><span class="comment">      参数为输入的商标</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">      sm.show(scanner.next());</span><br><span class="line">      sm=<span class="keyword">new</span> PC();                     <span class="comment">//接口变量中存放对象的引用</span></span><br><span class="line">      System.out.println(<span class="string">&quot;请输入PC的商标&quot;</span>);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  <span class="doctag">TODO:</span>接口回调，即调用sm显示商标方法</span></span><br><span class="line"><span class="comment">      参数为输入的商标</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">      sm.show(scanner.next());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3、对输入的字符串进行拼接打印输出"><a href="#3、对输入的字符串进行拼接打印输出" class="headerlink" title="3、对输入的字符串进行拼接打印输出"></a>3、对输入的字符串进行拼接打印输出</h3><ul>
<li>描述：定义一个MotorVehicles抽象类，包含抽象方法brake。定义接口MoneyFare，包含方法charge，接口ControlTemperature包含方法ControlTemperature。定义Bus类继承抽象类MotorVehicles并且实现接口MoneyFare，Taxi类继承抽象类MotorVehicles并且实现接口MoneyFare和ControlTemperature。Cinema类实现接口MoneyFare和ControlTemperature。主函数中根据不同的对象，打印输出自身的属性值。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MotorVehicles</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brake</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MoneyFare</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">charge</span><span class="params">(String c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ControlTemperature</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">controlAirTemperature</span><span class="params">(String t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">extends</span> <span class="title">MotorVehicles</span> <span class="keyword">implements</span> <span class="title">MoneyFare</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brake</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公共汽车使用&quot;</span>+s+<span class="string">&quot;刹车技术&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charge</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公共汽车:&quot;</span>+c+<span class="string">&quot;元/张,不计算公里数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taxi</span> <span class="keyword">extends</span> <span class="title">MotorVehicles</span> <span class="keyword">implements</span> <span class="title">MoneyFare</span>,<span class="title">ControlTemperature</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">brake</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出租车使用&quot;</span>+s+<span class="string">&quot;刹车技术&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">charge</span><span class="params">(String c)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出租车:&quot;</span>+c+<span class="string">&quot;元/公里,起价3公里&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">controlAirTemperature</span><span class="params">(String t)</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;出租车安装了&quot;</span>+t+<span class="string">&quot;空调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cinema</span> <span class="keyword">implements</span> <span class="title">MoneyFare</span>,<span class="title">ControlTemperature</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">charge</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电影院:门票,&quot;</span>+s+<span class="string">&quot;元/张&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">controlAirTemperature</span><span class="params">(String t)</span> </span>&#123; </span><br><span class="line">       System.out.println(<span class="string">&quot;电影院安装了&quot;</span>+t+<span class="string">&quot;空调&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example6_3</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	   Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       Bus bus101 = <span class="keyword">new</span> Bus();</span><br><span class="line">       Taxi buleTaxi = <span class="keyword">new</span> Taxi();</span><br><span class="line">       Cinema redStarCinema = <span class="keyword">new</span> Cinema();</span><br><span class="line">       MoneyFare  fare;</span><br><span class="line">       ControlTemperature temperature;</span><br><span class="line">       fare = bus101;</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入公交车采用刹车技术和车票价（元）：&quot;</span>);</span><br><span class="line">	   <span class="comment">/*</span></span><br><span class="line"><span class="comment">	   <span class="doctag">TODO:</span>公交车逻辑    </span></span><br><span class="line"><span class="comment">       将输入的两个参数传入到bus101.brake，和fare.charge方法中</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">       bus101.brake(scanner.next());</span><br><span class="line">       fare.charge(scanner.next());</span><br><span class="line">       fare = buleTaxi;</span><br><span class="line">       temperature = buleTaxi;</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入出租车采用刹车技术、车票价（元）、安装空调样式：&quot;</span>);</span><br><span class="line">	   <span class="comment">/*</span></span><br><span class="line"><span class="comment">	   <span class="doctag">TODO:</span>出租车逻辑     </span></span><br><span class="line"><span class="comment">       将输入的三个参数传入到buleTaxi.brake，和fare.charge, temperature.controlAirTemperature方法中</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">       buleTaxi.brake(scanner.next());</span><br><span class="line">       fare.charge(scanner.next());</span><br><span class="line">       temperature.controlAirTemperature(scanner.next());</span><br><span class="line">       fare = redStarCinema;</span><br><span class="line">       temperature = redStarCinema;</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入电影院票价（元）、安装空调样式：&quot;</span>);</span><br><span class="line">	   <span class="comment">/*</span></span><br><span class="line"><span class="comment">	   <span class="doctag">TODO:</span>电影院逻辑   </span></span><br><span class="line"><span class="comment">       将输入的两个参数传入到fare.charge和temperature.controlAirTemperature方法中</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">       fare.charge(scanner.next());</span><br><span class="line">       temperature.controlAirTemperature(scanner.next());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4、计算俩个数的算数平均值和几何平均值"><a href="#4、计算俩个数的算数平均值和几何平均值" class="headerlink" title="4、计算俩个数的算数平均值和几何平均值"></a>4、计算俩个数的算数平均值和几何平均值</h3><ul>
<li>描述：定义接口CompurerAverage包含有average方法。定义类A实现接口，实现average方法的功能为计算算术平均数，类B实现接口，实现average方法的功能为计算几何平均数。获取输入的两个数，调用不同的方法，求平均数并打印输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CompurerAverage</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">CompurerAverage</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">	  <span class="comment">//<span class="doctag">TODO:</span>计算算数平均数 （a+b）/2 </span></span><br><span class="line">      <span class="keyword">double</span> aver=(a+b)/<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">return</span> aver;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">CompurerAverage</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">	   <span class="comment">//<span class="doctag">TODO:</span>计算几何平均数     Math.sqrt(a*b)</span></span><br><span class="line">       <span class="keyword">double</span> aver=Math.sqrt(a*b);</span><br><span class="line">       <span class="keyword">return</span> aver;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example6_4</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      CompurerAverage computer;</span><br><span class="line">      <span class="keyword">double</span> a,b,result;</span><br><span class="line">      computer = <span class="keyword">new</span> A(); </span><br><span class="line">      System.out.println(<span class="string">&quot;请输入俩个数：&quot;</span>);</span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>获取键盘输入的两个数</span></span><br><span class="line"><span class="comment">        调用computer的average方法，参数为输入的两个数 返回result</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">      a=scanner.nextDouble();</span><br><span class="line">      b=scanner.nextDouble();</span><br><span class="line">      result=computer.average(a,b);</span><br><span class="line">      System.out.printf(<span class="string">&quot;%5.2f和%5.2f的算术平均值:%5.2f\n&quot;</span>,a,b,result);</span><br><span class="line">      computer = <span class="keyword">new</span> B();</span><br><span class="line">	  <span class="comment">//<span class="doctag">TODO:</span>调用computer的average方法，参数为前面输入的两个数 返回result</span></span><br><span class="line">	  result=computer.average(a,b);</span><br><span class="line">      System.out.printf(<span class="string">&quot;%5.2f和%5.2f的几何平均值:%5.2f&quot;</span>,a,b,result);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5、根据提示语句，输入字符串，打印输出"><a href="#5、根据提示语句，输入字符串，打印输出" class="headerlink" title="5、根据提示语句，输入字符串，打印输出"></a>5、根据提示语句，输入字符串，打印输出</h3><ul>
<li>描述：定义接口SpeakHello包含方法speakHello，类Chinese和English实现接口。定义类KindHello包含有方法lookHello，方法的参数为SpeakHello接口，方法的实现为调用接口的speakHello方法。主函数中调用KindHello类的lookHello方法，参数分别为Chinese和English对象以及Scanner，最后打印输出结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SpeakHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">speakHello</span><span class="params">(Scanner scanner)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">implements</span> <span class="title">SpeakHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">speakHello</span><span class="params">(Scanner scanner)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中国人习惯问候语：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;中国人习惯问候语：&quot;</span>+scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">English</span> <span class="keyword">implements</span> <span class="title">SpeakHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">speakHello</span><span class="params">(Scanner scanner)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;英国人习惯问候语:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;英国人习惯问候语:&quot;</span>+scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KindHello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookHello</span><span class="params">(SpeakHello hello,Scanner scanner)</span> </span>&#123; <span class="comment">//接口类型参数</span></span><br><span class="line">        hello.speakHello(scanner);                    <span class="comment">//接口回调</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example6_5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        KindHello kindHello=<span class="keyword">new</span> KindHello();</span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>调用lookHello方法，将Chinese、English和Scanner对象传入</span></span><br><span class="line">        Chinese ch=<span class="keyword">new</span> Chinese();</span><br><span class="line">        English en=<span class="keyword">new</span> English();</span><br><span class="line">        kindHello.lookHello(ch,scanner);</span><br><span class="line">        kindHello.lookHello(en,scanner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6、实现多态"><a href="#6、实现多态" class="headerlink" title="6、实现多态"></a>6、实现多态</h3><ul>
<li>描述：编写基类Shape，派生类Circle、Square、Triangle都继承基类Shape，并覆写基类的方法。从键盘输入一个0-2的整数，输入三次分别按回车结束，创建Circle、Square、Triangle对象，调用方法draw，打印内容。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">//基类Shape建立了一个通用接口，所有（几何）形状都可以描绘和删除。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//派生类覆盖了draw方法，为每种特殊类型的几何形状都提供了独一无二的行为。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// @Override注解，表示覆盖父类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.erase()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square.erase()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Triangle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Triangle.erase()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面对动态绑定进行测试如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_100</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Shape[] shape = <span class="keyword">new</span> Shape[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shape.length; i++) &#123;</span><br><span class="line">            n = reader.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    shape[i] = <span class="keyword">new</span> Circle();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    shape[i] = <span class="keyword">new</span> Square();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    shape[i] = <span class="keyword">new</span> Triangle();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Shape oneS : shape) &#123; <span class="comment">// 增强for循环，应在JDK 5及其以上版本运行</span></span><br><span class="line">			<span class="comment">//<span class="doctag">TODO:</span>调用draw()方法</span></span><br><span class="line">            oneS.draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7、抽象类的运用"><a href="#7、抽象类的运用" class="headerlink" title="7、抽象类的运用"></a>7、抽象类的运用</h3><ul>
<li>描述：定义抽象类Driver，包含抽象方法drives()。定义类FemaleDriver，MaleDriver继承Driver，并重写方法drives()，从键盘输入一个数，打印输出两个对象调用drives()方法的内容。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_101</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Driver a = <span class="keyword">new</span> FemaleDriver(reader.nextInt());</span><br><span class="line">        Driver b = <span class="keyword">new</span> MaleDriver();</span><br><span class="line">	    <span class="comment">//<span class="doctag">TODO:</span>调用a,b对象的方法drives（）</span></span><br><span class="line">        a.drives();</span><br><span class="line">        b.drives();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FemaleDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FemaleDriver</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drives</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A Female driver drives a vehicle.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaleDriver</span> <span class="keyword">extends</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaleDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drives</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A male driver drives a vehicle.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Driver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">drives</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java学习笔记（5）Java泛型作业函数题</title>
    <url>/java_study_note_5/</url>
    <content><![CDATA[<blockquote>
<p><strong>学校小学期Java课程的练习题，留个档便于以后需要时候有例子可以回忆，写的烂的地方请多多包含</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="1、计算圆锥、方锥的体积"><a href="#1、计算圆锥、方锥的体积" class="headerlink" title="1、计算圆锥、方锥的体积"></a>1、计算圆锥、方锥的体积</h3><ul>
<li>描述：声明一个泛型类，包含计算体积的方法，只关心它的底是否能计算面积，并不关心底的类型。声明圆类和矩形类，分别包含计算面积的方法。用户输入圆锥的半径和高，打印输出圆锥的体积。输入方锥的长、宽、高，计算方锥的体积并输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cone</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">   <span class="keyword">double</span> height;</span><br><span class="line">   E bottom;           <span class="comment">//用泛型类E声明对象bottom</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Cone</span> <span class="params">(E b)</span> </span>&#123;</span><br><span class="line">      bottom=b;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> h)</span> </span>&#123;</span><br><span class="line">      height=h;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   <span class="doctag">TODO:</span>计算体积</span></span><br><span class="line"><span class="comment">   功能描述：调用对象bottom的toString方法，返回字符串格式的圆面积，然后转为double类型，再根据公式计算锥形体积</span></span><br><span class="line"><span class="comment">   参数说明：无</span></span><br><span class="line"><span class="comment">   返回值说明：锥形体积    公式：1/3*底面积*高</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">computerVolume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">double</span> area=Double.valueOf(bottom.toString());</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1.0</span>/<span class="number">3</span>*area*height;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">   <span class="keyword">double</span> area,radius;</span><br><span class="line">   Circle(<span class="keyword">double</span> r) &#123;</span><br><span class="line">      radius=r;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   <span class="doctag">TODO:</span>计算面积</span></span><br><span class="line"><span class="comment">   功能描述：重写Object类的toString()方法，计算圆的面积</span></span><br><span class="line"><span class="comment">   参数说明：无</span></span><br><span class="line"><span class="comment">   返回值说明：圆的面积</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="keyword">double</span> a=Math.PI*radius*radius;</span><br><span class="line">      String area=String.valueOf(a);</span><br><span class="line">      <span class="keyword">return</span> area;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">	   <span class="keyword">double</span> sideA,sideB,area;</span><br><span class="line">	   Rect(<span class="keyword">double</span> a,<span class="keyword">double</span> b) &#123;</span><br><span class="line">	     sideA=a;</span><br><span class="line">	     sideB=b;</span><br><span class="line">	   &#125;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       <span class="doctag">TODO:</span>计算面积</span></span><br><span class="line"><span class="comment">       功能描述：重写Object类的toString()方法，计算矩形的面积</span></span><br><span class="line"><span class="comment">       参数说明：无</span></span><br><span class="line"><span class="comment">       返回值说明：矩形的面积</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">	   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">double</span> x=sideA*sideB;</span><br><span class="line">	     String area=String.valueOf(x);</span><br><span class="line">         <span class="keyword">return</span> area;</span><br><span class="line">	   &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example15_1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	  System.out.println(<span class="string">&quot;请输入圆锥的半径、高：&quot;</span>);</span><br><span class="line">	  Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      Circle circle=<span class="keyword">new</span> Circle(scanner.nextDouble());</span><br><span class="line">      Cone&lt;Circle&gt; coneOne=<span class="keyword">new</span> Cone&lt;Circle&gt;(circle);<span class="comment">//创建一个（圆）锥对象  </span></span><br><span class="line">      coneOne.setHeight(scanner.nextDouble());</span><br><span class="line">      System.out.println(<span class="string">&quot;圆锥的体积：&quot;</span>+coneOne.computerVolume());</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入方锥的长、宽、高：&quot;</span>);</span><br><span class="line">      Rect rect=<span class="keyword">new</span> Rect(scanner.nextDouble(),scanner.nextDouble());</span><br><span class="line">      Cone&lt;Rect&gt; coneTwo=<span class="keyword">new</span> Cone&lt;Rect&gt;(rect);<span class="comment">//创建一个（方）锥对象</span></span><br><span class="line">      coneTwo.setHeight(scanner.nextDouble()); </span><br><span class="line">      System.out.println(<span class="string">&quot;方锥的体积：&quot;</span>+coneTwo.computerVolume());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2、遍历链表中的数据"><a href="#2、遍历链表中的数据" class="headerlink" title="2、遍历链表中的数据"></a>2、遍历链表中的数据</h3><ul>
<li>描述：定义一个链表集合，用户输入链表中两个节点中的数据，然后分别用集合中get方法遍历和iterator遍历，转化为字符串并输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        LinkedList mylist=<span class="keyword">new</span> LinkedList();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入链表2个节点中的数据：&quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        mylist.add(scanner.next());                 <span class="comment">//链表中的第一个节点</span></span><br><span class="line">        mylist.add(scanner.next());                 <span class="comment">//链表中的第二个节点</span></span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span>获取链表的长度</span></span><br><span class="line">        <span class="keyword">int</span> number=mylist.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;number;i++)&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>把mylist中的数据强转换为String</span></span><br><span class="line"><span class="comment">        输出强转换后的数据及下标</span></span><br><span class="line"><span class="comment">        输出语句提示：System.out.println(&quot;get:第&quot;+i+&quot;节点中的数据:&quot;+ 数据内容 );</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;get:第&quot;</span>+i+<span class="string">&quot;节点中的数据:&quot;</span>+mylist.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator iter=mylist.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iter.hasNext()) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>把mylist中的数据强转换为String，并打印输出</span></span><br><span class="line"><span class="comment">        打印语句提示：System.out.println(&quot;iterator:&quot;+ 数据内容 );</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">            System.out.println(<span class="string">&quot;iterator:&quot;</span>+iter.next());</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3、对3个学生身高进行排序升序输出，然后查找与这3个学生身高相同的学生"><a href="#3、对3个学生身高进行排序升序输出，然后查找与这3个学生身高相同的学生" class="headerlink" title="3、对3个学生身高进行排序升序输出，然后查找与这3个学生身高相同的学生"></a>3、对3个学生身高进行排序升序输出，然后查找与这3个学生身高相同的学生</h3><ul>
<li>描述：定义一个学生类，自定义一个比较方法，比较身高属性值的大小。定义一个集合，用户输入3个学生的姓名和身高，添加到集合中，并输出集合的数据。然后对集合进行排序，并输出排序后的内容。然后输入一个学生的姓名和身高，查找与这3个同学身高是否相同，相同则输出结果，否则不输出。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123; </span><br><span class="line">   <span class="keyword">int</span> height=<span class="number">0</span>;</span><br><span class="line">   String name;</span><br><span class="line">   Student(String n,<span class="keyword">int</span> h) &#123;</span><br><span class="line">      name=n;</span><br><span class="line">      height = h;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   <span class="doctag">TODO:</span>比较方法</span></span><br><span class="line"><span class="comment">   功能描述：比较当前对象与参数对象的身高大小</span></span><br><span class="line"><span class="comment">   参数说明：b为需要比较的对象</span></span><br><span class="line"><span class="comment">   返回值说明：如当前对象比b对象身高值大，返回1；如相等返回0，如小于返回-1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object b)</span> </span>&#123; </span><br><span class="line">       <span class="keyword">if</span>(height&gt;((Student)b).height)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(height==((Student)b).height)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[ ])</span> </span>&#123; </span><br><span class="line">       List&lt;Student&gt; list = <span class="keyword">new</span> LinkedList&lt;Student&gt;();</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入3个学生姓名和身高：&quot;</span>);</span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       list.add(<span class="keyword">new</span> Student(scanner.next(),scanner.nextInt()));</span><br><span class="line">       list.add(<span class="keyword">new</span> Student(scanner.next(),scanner.nextInt()));</span><br><span class="line">       list.add(<span class="keyword">new</span> Student(scanner.next(),scanner.nextInt())); </span><br><span class="line">       Iterator&lt;Student&gt; iter=list.iterator();</span><br><span class="line">       System.out.println(<span class="string">&quot;排序前,链表中的数据&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span>(Student s:list)&#123;</span><br><span class="line">           System.out.println(s.name+<span class="string">&quot;身高:&quot;</span>+s.height);</span><br><span class="line">       &#125;</span><br><span class="line">       Collections.sort(list);</span><br><span class="line">       System.out.println(<span class="string">&quot;排序后,链表中的数据&quot;</span>);</span><br><span class="line">       iter=list.iterator();</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">	   <span class="doctag">TODO:</span>循环遍历迭代器iter，将学生姓名、身高输出 </span></span><br><span class="line"><span class="comment">       输出语句提示：System.out.println( 姓名 + &quot;身高:&quot;+ 身高 );</span></span><br><span class="line"><span class="comment">	   */</span></span><br><span class="line">       <span class="keyword">for</span>(Student s:list)&#123;</span><br><span class="line">           System.out.println(s.name+<span class="string">&quot;身高:&quot;</span>+s.height);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入要比较身高同学的姓名和身高：&quot;</span>);</span><br><span class="line">       Student zhaoLin = <span class="keyword">new</span> Student(scanner.next(),scanner.nextInt());</span><br><span class="line">       <span class="keyword">int</span> index = Collections.binarySearch(list,zhaoLin,<span class="keyword">null</span>);</span><br><span class="line">	    <span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>如果index大于等于0，则输出： System.out.println( 输入的名字 +&quot;和链表中&quot;+ 学生姓名 +&quot;身高相同&quot;);</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">       <span class="keyword">if</span>(index&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">           System.out.println(zhaoLin.name+<span class="string">&quot;和链表中&quot;</span>+list.get(index).name+<span class="string">&quot;身高相同&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java学习笔记（6）Java内部类与异常类作业函数题</title>
    <url>/java_study_note_6/</url>
    <content><![CDATA[<blockquote>
<p><strong>学校小学期Java课程的练习题，留个档便于以后需要时候有例子可以回忆，写的烂的地方请多多包含</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="1、计算输入4个数的和"><a href="#1、计算输入4个数的和" class="headerlink" title="1、计算输入4个数的和"></a>1、计算输入4个数的和</h3><ul>
<li>描述：定义一个int型数组，输入3个正数1个负数赋值给数组。利用断言性质，规定计算和的时候不允许出现负数，在关闭断言情况下，计算输入数的和。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_6</span> </span>&#123;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[ ])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] score =&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入3个正数,1个负数&quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>将输入的数赋值给score[]数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;score.length;i++)&#123;</span><br><span class="line">            score[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> number:score) &#123;</span><br><span class="line">            <span class="keyword">assert</span> number&gt;<span class="number">0</span>:<span class="string">&quot;负数不能是成绩&quot;</span>;</span><br><span class="line">		    <span class="comment">//<span class="doctag">TODO:</span>计算总成绩</span></span><br><span class="line">            sum=sum +number;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;总成绩:&quot;</span>+sum);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2、处理数组越界异常"><a href="#2、处理数组越界异常" class="headerlink" title="2、处理数组越界异常"></a>2、处理数组越界异常</h3><ul>
<li>描述：定义一个长度为8的课程数组，数组内容已初始化完毕。随机输入课程的序号，获取课程的名称，进行输出，如果不存在则捕捉数组越界的异常。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 定义一个长度为8的课程数组，随机输入课程的序号，获取课程的名称，进行输出，如果不存在则捕捉数组越界的异常</span></span><br><span class="line"><span class="comment"> * 如：输入：12，12已结超过8门课程的范围，捕获异常后打印：  java.lang.ArrayIndexOutOfBoundsException: 12</span></span><br><span class="line"><span class="comment"> *    输入：2，输出：英语</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_149</span> </span>&#123;</span><br><span class="line"> 	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入课程的序号&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> index = sc.nextInt();</span><br><span class="line">		String[] courses = &#123;<span class="string">&quot;数学&quot;</span>,<span class="string">&quot;语文&quot;</span>,<span class="string">&quot;英语&quot;</span>,<span class="string">&quot;计算机&quot;</span>,<span class="string">&quot;物理&quot;</span>,<span class="string">&quot;化学&quot;</span>,<span class="string">&quot;生物&quot;</span>,<span class="string">&quot;地理&quot;</span>&#125;;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String course = courses[index];</span><br><span class="line">			System.out.println(course);</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>输入课程的序号,超过数组最大长度，捕捉数组越界异常</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">			System.out.println(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3、自定义异常"><a href="#3、自定义异常" class="headerlink" title="3、自定义异常"></a>3、自定义异常</h3><ul>
<li>描述：自定义两个异常类，名称超长异常类和超短异常类。输入账号名称，如果大于10，抛出“账号名称超长”的自定义异常， 如果小于5，抛出“账号名称超短”的自定义异常。参考“账号名称超长异常（StringTooLongException）”，请编写一个账号名称超短的自定义异常（类名：StringTooShortException）</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 输入账号名称，如果大于10，抛出“账号名称超长”的自定义异常， 如果小于5，抛出“账号名称超短”的自定义异常</span></span><br><span class="line"><span class="comment"> * 参考“账号名称超长异常（StringTooLongException）”，请编写一个账号名称超短的自定义异常（类名：StringTooShortException）</span></span><br><span class="line"><span class="comment"> * 例如：输入：红色宝马   输出： StringTooShortException: 账号名称超短，必须大于5个字符</span></span><br><span class="line"><span class="comment"> * 例如：输入：红红黄黄蓝蓝   输出：账号名称校验通过</span></span><br><span class="line"><span class="comment"> * 例如：输入：红红黄黄蓝蓝绿绿紫紫白白   输出：StringTooLongException: 账号名称超长，必须小于10个字符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_152</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;输入账号名称&quot;</span>);</span><br><span class="line">		String str = sc.next();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (str.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">				<span class="comment">//抛出账号名称超长的自定义异常</span></span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> StringTooLongException();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (str.length() &lt; <span class="number">5</span>)&#123;</span><br><span class="line">				<span class="comment">//抛出账号名称超短的自定义异常</span></span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> StringTooShortException();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;账号名称校验通过&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			System.out.println(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常，账号名称超长异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringTooLongException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123; </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StringTooLongException</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(<span class="string">&quot;账号名称超长，必须小于10个字符&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span>参考“账号名称超长异常（StringTooLongException）”，请编写一个账号名称超短的自定义异常（类名：StringTooShortException）</span></span><br><span class="line"><span class="comment"> * 异常提醒说明为“账号名称超短，必须大于5个字符”</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringTooShortException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringTooShortException</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;账号名称超短，必须大于5个字符&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4、自定义异常类，计算银行收入、支出情况"><a href="#4、自定义异常类，计算银行收入、支出情况" class="headerlink" title="4、自定义异常类，计算银行收入、支出情况"></a>4、自定义异常类，计算银行收入、支出情况</h3><ul>
<li>描述：自定义一个异常类，继承Exception。定义一个银行类，包含有int型变量money，和计算收入的方法，以及获取金额的方法。银行收入为正数，支出为负数。根据收入、支出计算本次纯收入、最终存款，使用自定义异常类捕获收入、支出的异常情况并输出原因还有最终存款。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">income</span><span class="params">(<span class="keyword">int</span> in,<span class="keyword">int</span> out)</span> <span class="keyword">throws</span> BankException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(in&lt;=<span class="number">0</span>||out&gt;=<span class="number">0</span>||in+out&lt;=<span class="number">0</span>) &#123; </span><br><span class="line">			<span class="comment">//<span class="doctag">TODO:</span> 方法抛出异常，导致方法结束，下面语句不能执行</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BankException(in, out);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">int</span> netIncome=in+out;</span><br><span class="line">       System.out.printf(<span class="string">&quot;本次计算出的纯收入是:%d元\n&quot;</span>,netIncome);</span><br><span class="line">       money=money+netIncome;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">	   String message;</span><br><span class="line">	   <span class="function"><span class="keyword">public</span> <span class="title">BankException</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	       message=<span class="string">&quot;入账资金&quot;</span>+m+<span class="string">&quot;是负数或支出&quot;</span>+n+<span class="string">&quot;是正数，不符合系统要求.&quot;</span>;</span><br><span class="line">	   &#125;</span><br><span class="line">	   <span class="function"><span class="keyword">public</span> String <span class="title">warnMess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	       <span class="keyword">return</span> message;</span><br><span class="line">	   &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Bank bank=<span class="keyword">new</span> Bank();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">    	    System.out.println(<span class="string">&quot;请输入银行收入、支出（收入正数 支出负数）:&quot;</span>);</span><br><span class="line">    	    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		    <span class="comment">//<span class="doctag">TODO:</span>调用bank.income方法，传入的参数为输入的两个数</span></span><br><span class="line">            bank.income(scanner.nextInt(), scanner.nextInt());</span><br><span class="line">            System.out.printf(<span class="string">&quot;银行目前有%d元\n&quot;</span>,bank.getMoney());</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入银行收入、支出（收入负数或支出正数）:&quot;</span>);</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span>调用bank.income方法，传入的参数为输入的两个数  </span></span><br><span class="line">            bank.income(scanner.nextInt(), scanner.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(BankException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;计算收益的过程出现如下问题:&quot;</span>);</span><br><span class="line">            System.out.println(e.warnMess()); </span><br><span class="line">      &#125;</span><br><span class="line">      System.out.printf(<span class="string">&quot;银行目前有%d元\n&quot;</span>,bank.getMoney());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5、输入三个数字，其中第二个数字为非法数字，系统捕获异常输出，然后自定义异常输出。"><a href="#5、输入三个数字，其中第二个数字为非法数字，系统捕获异常输出，然后自定义异常输出。" class="headerlink" title="5、输入三个数字，其中第二个数字为非法数字，系统捕获异常输出，然后自定义异常输出。"></a>5、输入三个数字，其中第二个数字为非法数字，系统捕获异常输出，然后自定义异常输出。</h3><ul>
<li>描述：定义三个int型变量并初始化完毕，打印输出初始化的内容。然后输入三个数给他们赋值，利用try-catch捕获异常，测试异常语句下面的代码是否执行，然后自己手动抛出一个异常，打印输出结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>,m = <span class="number">0</span>,t = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">    	    System.out.println(<span class="string">&quot;初始化n=0 m=0 t=1000&quot;</span>);</span><br><span class="line">    	    System.out.println(<span class="string">&quot;请输入三个数给n,m,t赋值（其中输入m非法数字）&quot;</span>);</span><br><span class="line">    	    <span class="comment">/*</span></span><br><span class="line"><span class="comment">		    <span class="doctag">TODO:</span>将输入的字符串转化成整数，发生异常,转向catch</span></span><br><span class="line"><span class="comment">            发生异常的部分后面的代码没有执行</span></span><br><span class="line"><span class="comment">		    */</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	    n = Integer.parseInt(scanner.next());</span><br><span class="line">            m = Integer.parseInt(scanner.next());</span><br><span class="line">            t = Integer.parseInt(scanner.next());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常:&quot;</span>+e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;n=&quot;</span>+n+<span class="string">&quot;,m=&quot;</span>+m+<span class="string">&quot;,t=&quot;</span>+t);</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">		  System.out.println(<span class="string">&quot;故意抛出I/O异常！&quot;</span>);</span><br><span class="line">      	  <span class="keyword">throw</span> <span class="keyword">new</span> java.io.IOException(<span class="string">&quot;我是故意的&quot;</span>);</span><br><span class="line">            <span class="comment">//System.out.println(&quot;这个输出语句肯定没有机会执行,所以必须注释掉，否则编译出错&quot;);</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(java.io.IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发生异常:&quot;</span>+e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6、根据输入装载量，计算货车装载量是否超重"><a href="#6、根据输入装载量，计算货车装载量是否超重" class="headerlink" title="6、根据输入装载量，计算货车装载量是否超重"></a>6、根据输入装载量，计算货车装载量是否超重</h3><ul>
<li>描述：自定义异常类输出异常信息，货车类计算转载量，最大装载量为1000，根据输入数据求和判断是否大于1000，大于不好异常信息输出，不大于继续输入，输出当前装载量。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> <span class="comment">/* <span class="doctag">TODO:</span> 完成自定义异常类，实现捕获异常 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangerException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> String message = <span class="string">&quot;超载&quot;</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">warnMess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> message;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CargoBoat</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> realContent;  <span class="comment">//装载的重量</span></span><br><span class="line">     <span class="keyword">int</span> maxContent;   <span class="comment">//最大装载量</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxContent</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">         maxContent = c;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loading</span><span class="params">(<span class="keyword">int</span> m)</span> <span class="keyword">throws</span> DangerException </span>&#123;</span><br><span class="line">      <span class="comment">/* <span class="doctag">TODO:</span> 判断是否大于最大装载量1000,大于最大装载量抛出异常 */</span></span><br><span class="line">        <span class="keyword">if</span>(m+realContent&gt;maxContent)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DangerException();</span><br><span class="line">        &#125;</span><br><span class="line">        realContent += m;</span><br><span class="line">        System.out.println(<span class="string">&quot;目前装载了&quot;</span>+realContent+<span class="string">&quot;吨货物&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example7_7</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      CargoBoat ship = <span class="keyword">new</span> CargoBoat();</span><br><span class="line">      ship.setMaxContent(<span class="number">1000</span>);</span><br><span class="line">      <span class="keyword">int</span> m =<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入装载量（最大量1000）&quot;</span>);</span><br><span class="line">            <span class="comment">/* <span class="doctag">TODO:</span> 把输入的值赋值给m</span></span><br><span class="line"><span class="comment">                   调用方法loading */</span></span><br><span class="line">            m = scanner.nextInt();</span><br><span class="line">            ship.loading(m);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入装载量（最大量1000）&quot;</span>);</span><br><span class="line">            <span class="comment">/* <span class="doctag">TODO:</span> 把输入的值赋值给m</span></span><br><span class="line"><span class="comment">                   调用方法loading */</span></span><br><span class="line">            m = scanner.nextInt();</span><br><span class="line">            ship.loading(m);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入装载量（最大量1000）&quot;</span>);</span><br><span class="line">            <span class="comment">/* <span class="doctag">TODO:</span> 把输入的值赋值给m</span></span><br><span class="line"><span class="comment">                   调用方法loading */</span></span><br><span class="line">            m = scanner.nextInt();</span><br><span class="line">            ship.loading(m);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入装载量（最大量1000）&quot;</span>);</span><br><span class="line">            <span class="comment">/* <span class="doctag">TODO:</span> 把输入的值赋值给m</span></span><br><span class="line"><span class="comment">                   调用方法loading */</span></span><br><span class="line">            m = scanner.nextInt();</span><br><span class="line">            ship.loading(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(DangerException e) &#123;</span><br><span class="line">            System.out.println(e.warnMess()); </span><br><span class="line">            System.out.println(<span class="string">&quot;无法再装载重量是&quot;</span>+m+<span class="string">&quot;吨的集装箱&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;货船将正点启航&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java学习笔记（7）Java文件操作作业函数题</title>
    <url>/java_study_note_7/</url>
    <content><![CDATA[<blockquote>
<p><strong>学校小学期Java课程的练习题，留个档便于以后需要时候有例子可以回忆，写的烂的地方请多多包含</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="1、打印文件的属性"><a href="#1、打印文件的属性" class="headerlink" title="1、打印文件的属性"></a>1、打印文件的属性</h3><ul>
<li>描述：从键盘输入路径和文件名，打印文件的可读性、长度、绝对路径。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example10_1_1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="comment">//创建文件并初始化路径和文件名</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        输出格式：</span></span><br><span class="line"><span class="comment">        a.txt是可读的吗:false</span></span><br><span class="line"><span class="comment">        a.txt的长度:0</span></span><br><span class="line"><span class="comment">        a.txt的绝对路径:c:\1.txt</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="comment">// TODO：</span></span><br><span class="line">        String path = reader.next();</span><br><span class="line">        String name = reader.next();</span><br><span class="line">        File file = <span class="keyword">new</span> File(path+<span class="string">&quot;/&quot;</span>+name);</span><br><span class="line">        System.out.println( file.getName() +<span class="string">&quot;是可读的吗:&quot;</span>+ file.canRead());</span><br><span class="line">        System.out.println( file.getName()+<span class="string">&quot;的长度:&quot;</span>+file.length());</span><br><span class="line">        System.out.println( file.getName()+<span class="string">&quot;的绝对路径:&quot;</span>+ file.getAbsolutePath());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2、创建文件"><a href="#2、创建文件" class="headerlink" title="2、创建文件"></a>2、创建文件</h3><ul>
<li>描述：从键盘输入要创建文件的名字，成功后输出创建成功。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example10_1_2</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	   Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      File file = <span class="keyword">new</span> File(reader.nextLine());</span><br><span class="line">      System.out.println(<span class="string">&quot;在当前目录下创建新文件&quot;</span>+file.getName());</span><br><span class="line">      <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">//创建文件</span></span><br><span class="line">			  <span class="comment">// TODO：</span></span><br><span class="line">			    file.createNewFile();</span><br><span class="line">                System.out.print(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span>(IOException exp)&#123;&#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    	  System.out.print(<span class="string">&quot;文件已经存在&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3、向文件中写入内容"><a href="#3、向文件中写入内容" class="headerlink" title="3、向文件中写入内容"></a>3、向文件中写入内容</h3><ul>
<li>描述：：从键盘输入两个字符串，每输入一个字符串按回车结束，将两个字符串依次写入文件中，并输出两次写入后的文件大小。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example10_5</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	  Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      <span class="keyword">byte</span> [] a = reader.nextLine().getBytes();</span><br><span class="line">      <span class="keyword">byte</span> [] b = reader.nextLine().getBytes();</span><br><span class="line">      File file = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);                         <span class="comment">//输出的目的地</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">            OutputStream out=<span class="keyword">new</span> FileOutputStream(file);      <span class="comment">//指向目的地的输出流</span></span><br><span class="line">            System.out.println(file.getName()+<span class="string">&quot;的大小:&quot;</span>+file.length()+<span class="string">&quot;字节&quot;</span>);<span class="comment">//a.txt的大小:0字节</span></span><br><span class="line">            <span class="comment">//向目的地写a数据</span></span><br><span class="line">		    <span class="comment">// TODO：</span></span><br><span class="line">		    out.write(a);</span><br><span class="line">            out.close();</span><br><span class="line">            out.close();</span><br><span class="line">            <span class="comment">//准备向文件尾加内容</span></span><br><span class="line">		    <span class="comment">// TODO：</span></span><br><span class="line">            out = <span class="keyword">new</span> FileOutputStream(file, <span class="keyword">true</span>);</span><br><span class="line">            System.out.println(file.getName()+<span class="string">&quot;的大小:&quot;</span>+file.length()+<span class="string">&quot;字节&quot;</span>);<span class="comment">///a.txt的大小:8字节</span></span><br><span class="line">            <span class="comment">//向目的地写b数据</span></span><br><span class="line">		    <span class="comment">// TODO：</span></span><br><span class="line">            out.write(b);</span><br><span class="line">            System.out.println(file.getName()+<span class="string">&quot;的大小:&quot;</span>+file.length()+<span class="string">&quot;字节&quot;</span>);<span class="comment">///a.txt的大小:8字节</span></span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;Error &quot;</span>+e);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="4、倒叙输出文件内容"><a href="#4、倒叙输出文件内容" class="headerlink" title="4、倒叙输出文件内容"></a>4、倒叙输出文件内容</h3><ul>
<li>描述：从键盘输入一个文件名称，按回车结束，创建该文件，定义一个数组data，内容是1-10，将数组内容写入文件，然后倒叙输出文件内容。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example10_8</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">	   Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      RandomAccessFile inAndOut=<span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">int</span> data[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">      <span class="keyword">try</span>&#123; inAndOut=<span class="keyword">new</span> RandomAccessFile(reader.nextLine(),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i:data) &#123;</span><br><span class="line">              <span class="comment">//将数组内容写入文件</span></span><br><span class="line">              <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">              inAndOut.write(i);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=data.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">               <span class="comment">//一个int型数据占4个字节，inAndOut从文件的第36个字节读取最后面的一个整数，每隔4个字节往前读取一个整数</span></span><br><span class="line">              <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">              System.out.printf(<span class="string">&quot;%d &quot;</span>, data[i]);</span><br><span class="line">           &#125;</span><br><span class="line">           inAndOut.close();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="5、打印内存中的数据"><a href="#5、打印内存中的数据" class="headerlink" title="5、打印内存中的数据"></a>5、打印内存中的数据</h3><ul>
<li>描述：从键盘输入一个字符串，按回车结束，使用字节数组流和字符数组流将字符串写入内存，再从内存读取曾写入的数据，并打印。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example10_10</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">       Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       String str = reader.nextLine();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 字节数组流写入内存</span></span><br><span class="line">            ByteArrayOutputStream outByte = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span> [] byteContent = str.getBytes();</span><br><span class="line">            outByte.write(byteContent);</span><br><span class="line">            <span class="comment">//读取内存字符串（字节）</span></span><br><span class="line">            <span class="comment">// 字节数组流读取内存</span></span><br><span class="line">            <span class="comment">// TODO：</span></span><br><span class="line">            ByteArrayInputStream inByte= <span class="keyword">new</span> ByteArrayInputStream(outByte.toByteArray());</span><br><span class="line">            <span class="keyword">byte</span> [] backByte = <span class="keyword">new</span> <span class="keyword">byte</span>[byteContent.length];</span><br><span class="line">            inByte.read(backByte);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(backByte));</span><br><span class="line">            <span class="comment">// 字符数组流写入内存</span></span><br><span class="line">            CharArrayWriter outChar = <span class="keyword">new</span> CharArrayWriter();</span><br><span class="line">            <span class="keyword">char</span> [] charContent=str.toCharArray();</span><br><span class="line">            outChar.write(charContent);</span><br><span class="line">            <span class="comment">//读取内存字符串（字符）</span></span><br><span class="line">            <span class="comment">// 字符数组流读取内存</span></span><br><span class="line">            <span class="comment">// TODO：</span></span><br><span class="line">            CharArrayReader inChar = <span class="keyword">new</span> CharArrayReader(outChar.toCharArray());</span><br><span class="line">            <span class="keyword">char</span> backChar [] = <span class="keyword">new</span> <span class="keyword">char</span>[charContent.length];</span><br><span class="line">            inChar.read(backChar);</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(backChar));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>(IOException exp)&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6、从文件读取不同类型的数据"><a href="#6、从文件读取不同类型的数据" class="headerlink" title="6、从文件读取不同类型的数据"></a>6、从文件读取不同类型的数据</h3><ul>
<li>描述：从键盘输入一个文件名，按回车结束，创建该文件，向文件中写入6种类型的数据，再根据类型从文件中读取，并打印。</li>
<li>代码（听我同学说用C写，Java的我也没写出来，有想法的欢迎评论区回复）</li>
</ul>
<hr>
<h3 id="7、将字符串加密"><a href="#7、将字符串加密" class="headerlink" title="7、将字符串加密"></a>7、将字符串加密</h3><ul>
<li>描述：从键盘输入一个字符串，按回车结束，以EncryptAndDecrypt类给出的加密形式加密该字符串，将加密字符串以数据流写入secret文件，并打印加密字符串，再以数据流读取secret文件，进行解密，并打印解密字符串。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 类给出的加密形式加密该字符串，将加密字符串以数据流写入secret文件，</span></span><br><span class="line"><span class="comment">* 并打印加密字符串，再以数据流读取secret文件，进行解密，并打印解密字符串。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example10_12</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      String command = reader.nextLine();</span><br><span class="line">      EncryptAndDecrypt person = <span class="keyword">new</span> EncryptAndDecrypt();</span><br><span class="line">      String password = <span class="string">&quot;Tiger&quot;</span>;</span><br><span class="line">      String secret = person.encrypt(command,password); </span><br><span class="line">      File file=<span class="keyword">new</span> File(<span class="string">&quot;secret.txt&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">//将加密字符串以数据流写入secret.txt文件</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            DataOutputStream outData = <span class="keyword">new</span> DataOutputStream(fos);</span><br><span class="line">          <span class="comment">// 将UTF-8类型的值写入到“数据输出流”中</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">            outData.writeUTF(secret);</span><br><span class="line">            System.out.println(<span class="string">&quot;加密命令:&quot;</span>+secret);</span><br><span class="line">            fos.flush();</span><br><span class="line">            outData.flush();</span><br><span class="line">            fos.close();</span><br><span class="line">            outData.close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span>(IOException e)&#123;&#125;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">          <span class="comment">//以数据流读取secret.txt文件内容</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            DataInputStream inData =  <span class="keyword">new</span> DataInputStream(fis);</span><br><span class="line">          <span class="comment">// “数据输出流”中读取UTF-8类型的值</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">            secret = inData.readUTF();</span><br><span class="line">            String mingwen = person.decrypt(secret,password);<span class="comment">//解密字符串</span></span><br><span class="line">            System.out.println(<span class="string">&quot;解密命令:&quot;</span>+mingwen);</span><br><span class="line">            fis.close();</span><br><span class="line">            inData.close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncryptAndDecrypt</span></span>&#123;</span><br><span class="line">    <span class="comment">// 加密</span></span><br><span class="line">    <span class="function">String <span class="title">encrypt</span><span class="params">(String sourceString,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> [] p = password.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> n = p.length;</span><br><span class="line">        <span class="keyword">char</span> [] c = sourceString.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> m = c.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mima = c[k]+p[k%n];</span><br><span class="line">            c[k] = (<span class="keyword">char</span>)mima;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    <span class="function">String <span class="title">decrypt</span><span class="params">(String sourceString,String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> [] p = password.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> n = p.length;</span><br><span class="line">        <span class="keyword">char</span> [] c = sourceString.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> m = c.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;m;k++)&#123;</span><br><span class="line">            <span class="keyword">int</span> mima = c[k]-p[k%n];</span><br><span class="line">            c[k] = (<span class="keyword">char</span>)mima;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="8、实现对象的写入读取到文件中"><a href="#8、实现对象的写入读取到文件中" class="headerlink" title="8、实现对象的写入读取到文件中"></a>8、实现对象的写入读取到文件中</h3><ul>
<li>描述：从键盘输入一个文件名，按回车结束，并创建文件，用TV类定义一个对象changhong,将对象chnaghong以对象流写入文件中，再通过对象流读取文件中的对象赋值给用TV类定义的xinfei对象，给xinfei对象属性赋值，最后输出changhong对象和xinfei对象的属性值。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example10_13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner reader = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">//用TV类定义一个对象changhong,</span></span><br><span class="line">        TV changhong = <span class="keyword">new</span> TV();</span><br><span class="line">        changhong.setName(<span class="string">&quot;长虹电视&quot;</span>);</span><br><span class="line">        changhong.setPrice(<span class="number">5678</span>);</span><br><span class="line">        File file=<span class="keyword">new</span> File(reader.nextLine());</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 将对象chnaghong以对象流写入文件中</span></span><br><span class="line">            <span class="comment">// TODO：</span></span><br><span class="line">            ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">            oos.writeObject(changhong);</span><br><span class="line">            <span class="comment">//读取file文件中的对象赋值给xinfei</span></span><br><span class="line">            <span class="comment">// TODO：</span></span><br><span class="line">            ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            TV xinfei = (TV)ois.readObject();</span><br><span class="line">            xinfei.setName(<span class="string">&quot;新飞电视&quot;</span>);</span><br><span class="line">            xinfei.setPrice(<span class="number">6666</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;changhong的名字:&quot;</span>+changhong.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;changhong的价格:&quot;</span>+changhong.getPrice());</span><br><span class="line">            System.out.println(<span class="string">&quot;xinfei的名字:&quot;</span>+xinfei.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;xinfei的价格:&quot;</span>+xinfei.getPrice());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(ClassNotFoundException event) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不能读出对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException event) &#123;</span><br><span class="line">            System.out.println(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对象序列化</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        name=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        price=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>中国计算机发展简史</title>
    <url>/cn_computer_his/</url>
    <content><![CDATA[<p>在此向对中国计算机发展做出巨大贡献的先辈们致敬！</p>
<a id="more"></a>


<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="http://cdn.static.runoob.com/libs/bootstrap/3.3.7/css/bootstrap.min.css"> 
    <script src="http://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js"></script>
    <style>
        .lzc_timeline { margin:10px 0 0 0; padding: 0; list-style: none; position: relative; }
        .lzc_timeline:before { content: ''; position: absolute; top: 0; bottom: 0; width: 5px; background: #afdcf8; left: 20px; margin-left: -10px; }
    .lzc_timeline > li { position: relative; }
    .lzc_timeline > li .lzc_time { display: block;   position: absolute;}
    .lzc_timeline > li .lzc_time span { display: block; text-align: right; }
    .lzc_timeline > li .lzc_time span:first-child { font-size: 8px; color: #bdd0db; }
    .lzc_timeline > li .lzc_time span:last-child { font-size: 12px; color: #3594cb; }
    .lzc_timeline > li:nth-child(odd) .lzc_time span:last-child { color: #6cbfee; }
    .lzc_timeline > li .lzc_label { margin: 0 8px 8px 30px; background: #afdcf8;  padding: 10px; position: relative; border-radius: 5px; height: 100px; box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.19)}
    .lzc_timeline > li:nth-child(odd) .label { background: #579dc5; }
    .lzc_timeline > li .lzc_label h2 {font-size: 16px; text-shadow: rgba(7, 84, 152, 0.71) 1px 1px 1px; }
    .lzc_timeline > li .lzc_label:after { right: 100%; border: solid transparent; content: " "; height: 0; width: 0; position: absolute; pointer-events: none; border-right-color: #afdcf8; border-width: 10px; top: 10px; }
    .lzc_timeline > li:nth-child(odd) .lzc_label:after { border-right-color: #afdcf8; }
    .lzc_timeline > li .lzc_icon { width: 10px; height: 10px; font-family: 'ecoico'; speak: none; font-style: normal; font-weight: normal; font-variant: normal; text-transform: none; font-size: 1.4em; line-height: 40px; -webkit-font-smoothing: antialiased; position: absolute; color: #fff; background: #46a4da; border-radius: 50%; box-shadow: 0 0 0 3px #afdcf8; text-align: center; left: 32px; top: 15px; margin: 0 0 0 -25px; }
    .lzc_blogpic { width: 200px; height: 120px; overflow: hidden; display: block; float: left; margin-right: 20px; }
    .lzc_timeline li .lzc_time { -webkit-transition: all 1s; -moz-transition: all 1s; -o-transition: all 1s; }
    .lzc_timeline li:hover .lzc_icon { box-shadow: 0 0 0 3px #ececec; }
    .lzc_timeline li:hover .lzc_time { background: #afdcf8; border-radius: 20px 0 0 20px; }
    .lzc_timeline li:hover .lzc_time span { color: #fff; }
    </style>
</head>
<body >
    <article>
    <div>
        <ul id = "sale_list" class="lzc_timeline">
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1956年</span>
                <div style="margin-top:8px">
                    夏培苏完成了第一台计算机操作员和控制器的设计工作，并同时撰写了中国关于电子计算机原理的第一份讲义.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1957年</span>
                <div style="margin-top:8px">
                    哈尔滨工业大学成功开发了中国第一台模拟电子计算机.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1958年</span>
                <div style="margin-top:8px">
                    中国成功研制出第一台计算机，即103型通用数字电子计算机，其运行速度为每秒1500次.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1959年</span>
                <div style="margin-top:8px">
                    中国成功开发了104型电子计算机，其运行速度为每秒10,000次.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1960年</span>
                <div style="margin-top:8px">
                    中国第一台大型通用电子计算机107型通用电子数字计算机研制成功.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1963年</span>
                <div style="margin-top:8px">
                    中国第一台大型晶体管电子计算机109机研制成功.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1964年</span>
                <div style="margin-top:8px">
                    成功开发了441B全晶体管计算机.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1965年</span>
                <div style="margin-top:8px">
                    中国第一台百万级集成电路计算机“DJS-Ⅱ”型操作系统建成.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1967年</span>
                <div style="margin-top:8px">
                    带有新晶体管的新型通用数字计算机诞生了.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1969年</span>
                <div style="margin-top:8px">
                    北京大学进行了百万台集成电路数字电子计算机的开发，该计算机有150台.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1970年</span>
                <div style="margin-top:8px">
                    中国成功研制出第一台具有多程序操作系统和标准汇编语言的计算机441B型全晶体管计算机.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1972年</span>
                <div style="margin-top:8px">
                    成功开发了每秒110,000次操作的大型集成电路通用数字电子计算机.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1973年</span>
                <div style="margin-top:8px">
                    中国成功开发了第一台百万次集成电路电子计算机.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1974年</span>
                <div style="margin-top:8px">
                    成功开发了DJS-130、131、132、135、140、152和153等13种型号.
                </div>
            </div>
            </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1976年</span>
                <div style="margin-top:8px">
                    成功开发了DJS-183、184、185、186和1804.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1977年</span>
                <div style="margin-top:8px">
                    中国成功开发了第一台微型计算机DJS-050.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1979年</span>
                <div style="margin-top:8px">
                    中国成功开发出每秒5百万次操作的集成电路计算机HDS-9. 王选择了中国第一台激光照排机来排出样本书.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1983年</span>
                <div style="margin-top:8px">
                    五笔汉字输入法通过鉴定: “银河I”超级计算机研制成功，运算速度达到每秒1亿次.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1984年</span>
                <div style="margin-top:8px">
                    联想集团新技术开发公司成立. 中国第一次电脑发烧.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1985年</span>
                <div style="margin-top:8px">
                    华光Ⅱ号汉字激光照排系统投入生产.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1986年</span>
                <div style="margin-top:8px">
                    中国学习机投入生产.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1987年</span>
                <div style="margin-top:8px">
                    第一台国产286微型计算机长城286正式推出.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1988年</span>
                <div style="margin-top:8px">
                    第一台家用386计算机-长城386推出了，在中国发现了第一台计算机病毒.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1990年</span>
                <div style="margin-top:8px">
                    中国第一台高智能计算机EST / IS4260智能工作站诞生了，长城486计算机问世.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1991年</span>
                <div style="margin-top:8px">
                    中国计算机发展，《科学技术日报》，《经济日报》和新华社正式启动了汉字激光照排系统.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1992年</span>
                <div style="margin-top:8px">
                    中国最大的汉字集，即60,000个计算机汉字库正式建立.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1993年</span>
                <div style="margin-top:8px">
                    中国第一台10亿巨型II型银河计算机通过了评估.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1994年</span>
                <div style="margin-top:8px">
                    银河计算机II在国家气象局正式投入运行，用于中天气预报.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1995年</span>
                <div style="margin-top:8px">
                    Sugon 1000大型机通过了鉴定，其峰值可以达到每秒25亿次.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1996年</span>
                <div style="margin-top:8px">
                    国产联想计算机在国内微型计算机市场排名第一.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1997年</span>
                <div style="margin-top:8px">
                    成功开发了Galaxy-Ⅲ并行超级计算机.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1998年</span>
                <div style="margin-top:8px">
                    中国微型计算机的销量达到408万台，在国内的份额为71.9％.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>1999年</span>
                <div style="margin-top:8px">
                    第四代银河巨人机器成功开发.
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2000年</span>
                <div style="margin-top:8px">
                    中国成功研制出高性能计算机“神威1号”，其主要技术指标和性能达到国际先进水平. 
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2002年</span>
                <div style="margin-top:8px">
                    我国每秒万亿次的联想深腾问世，龙芯1号研制成功
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2003年</span>
                <div style="margin-top:8px">
                    曙光信息产业公司宣布10万亿次曙光4000A大型计算机研制成功
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2004年</span>
                <div style="margin-top:8px">
                    曙光4000A大型计算机交付使用。曙光4000L，曙光4000-H相继问世
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2005年</span>
                <div style="margin-top:8px">
                    龙芯2号研制成功。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2005年5月1日</span>
                <div style="margin-top:8px">
                    联想正式宣布完成对IBM全球PC业务的收购，一跃成为全球第三大PC制造商。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2005年8月5日</span>
                <div style="margin-top:8px">
                    百度Nasdaq上市暴涨。股票在美国Nasdaq市场挂牌交易，一日之内股价上涨354%，百度也因此成为股价最高的中国公司。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2009年10月29日</span>
                <div style="margin-top:8px">
                    每秒钟1206万亿次的峰值速度和每秒563.1万亿次的Lin pack实测性能，“天河一号”位居同日公布的中国超级计算机前100强之首。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2010年</span>
                <div style="margin-top:8px">
                    设立的中国计算机学会终身成就奖，是授予70岁以上、在计算机领域有卓著成就和巨大贡献的资深科技工作者。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2012年9月11日</span>
                <div style="margin-top:8px">
                    国产CPU搭建的千万亿次计算机成功应用，“神威蓝光千万亿次高效能计算机系统”通过科技部专家组验收。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2013年6月</span>
                <div style="margin-top:8px">
                    国防科技大学研制的中国超级计算机“天河二号"以每秒33.86千万亿次的浮点运算速度，成为全球最快的超级计算机，并且比第二名快了近一倍。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2014年11月17日</span>
                <div style="margin-top:8px">
                    公布的全球超级计算机500强榜单中，中国“天河二号”以比第二名美国“泰坦”快近一倍的速度连续第四次获得冠军。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2015年5月</span>
                <div style="margin-top:8px">
                    “天河二号”上成功进行了3万亿粒子数中微子和暗物质的宇宙学N体数值模拟，揭示了宇宙大爆炸1600万年之后至今约137亿年的漫长演化进程。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2016年6月20日</span>
                <div style="margin-top:8px">
                    新一期全球超级计算机500强榜单公布，使用中国自主芯片制造的“神威·太湖之光”取代“天河二号”登上榜首。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2017年6月</span>
                <div style="margin-top:8px">
                    “神威·太湖之光”凭借这一“超级速度”第三次出现在榜单榜首位置，实现三连冠。
                </div>
            </div>
        </li>
            <li class="time-line-item" >
            <div class="lzc_icon"></div>
            <div class="lzc_label" data-scroll-reveal="enter right over 1s" >
            <span>2018年4月23日</span>
                <div style="margin-top:8px">
                    中国电科38所发布了实际运算性能在业界同类产品最强的数字信号处理器——“魂芯二号A”。
                </div>
            </div>
        </li>
    </div>
    </article>
<script>
</script>
</body>
</html>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式系统与组成原理—提纲</title>
    <url>/embedded_sys_review/</url>
    <content><![CDATA[<blockquote>
<p>SSDUT智能技术系统方向大三专业课复习提纲，建议多背( •̀ ω •́ )✧</p>
<p>代码一定要会写啊kora！(＃°Д°)</p>
</blockquote>
<a id="more"></a>

<h1 id="一、嵌入式系统的概念"><a href="#一、嵌入式系统的概念" class="headerlink" title="一、嵌入式系统的概念"></a>一、嵌入式系统的概念</h1><h2 id="1、-嵌入式计算机发展总结"><a href="#1、-嵌入式计算机发展总结" class="headerlink" title="1、 嵌入式计算机发展总结"></a>1、 嵌入式计算机发展总结</h2><ul>
<li>嵌入式计算机是诞生于微处理器发展时代</li>
<li>AI进一步驱动了嵌入式计算机的蓬勃发展</li>
</ul>
<h2 id="2、嵌入式系统的分类"><a href="#2、嵌入式系统的分类" class="headerlink" title="2、嵌入式系统的分类"></a>2、嵌入式系统的分类</h2><ul>
<li>按计算机的嵌入式应用和非嵌入式应用将其分为通用计算机和嵌入式计算机。</li>
<li>嵌入式计算机是计算机技术发展中的一种计算机存在的形式，是从计算机技术的发展中分离出来的。</li>
</ul>
<h2 id="3、我国嵌入式系统的行业定义"><a href="#3、我国嵌入式系统的行业定义" class="headerlink" title="3、我国嵌入式系统的行业定义"></a>3、<strong>我国嵌入式系统的行业定义</strong></h2><ul>
<li><strong>以应用为中心</strong>,<strong>以计算机技术为基础</strong>, <strong>软件硬件可裁剪</strong>适应应用系统对功能、可靠性、成本、功耗严格要求的专用计算机系统。</li>
</ul>
<h2 id="4、嵌入式系统的组成结构"><a href="#4、嵌入式系统的组成结构" class="headerlink" title="4、嵌入式系统的组成结构"></a>4、<strong>嵌入式系统的组成结构</strong></h2><img src="https://cdn.megalomania.icu/images/ch1-1.png">

<h2 id="5、硬件基本结构"><a href="#5、硬件基本结构" class="headerlink" title="5、硬件基本结构"></a>5、<strong>硬件基本结构</strong></h2><ul>
<li>嵌入式系统的硬件架构，是以<strong>嵌入式处理器为中心，配置存储器、I/O设备、通信模块以及电源</strong>等必要的辅助接口组成。</li>
<li>嵌入式系统是“量身定做”的“专用计算机应用系统”。（Customize），非常经济、可靠。</li>
</ul>
<h2 id="6、嵌入式系统软件的层次结构"><a href="#6、嵌入式系统软件的层次结构" class="headerlink" title="6、嵌入式系统软件的层次结构"></a>6、嵌入式系统软件的层次结构</h2><ul>
<li>对于使用操作系统的嵌入式系统来说，结构三个层面：<strong>设备驱动层、实时操作系统（RTOS）、实际应用程序层。</strong></li>
</ul>
<h2 id="7、BootLoader"><a href="#7、BootLoader" class="headerlink" title="7、BootLoader"></a>7、BootLoader</h2><ul>
<li>对于PC机，启动初始化由BIOS完成的，对于嵌入式系统来说必须自行编写系统初始化程序，在嵌入式中称为BootLoader程序。</li>
<li>因此在系统加电复位后，处理器将首先执行 Boot Loader 程序。</li>
</ul>
<h1 id="二、ARM技术与ARM体系结构"><a href="#二、ARM技术与ARM体系结构" class="headerlink" title="二、ARM技术与ARM体系结构"></a>二、ARM技术与ARM体系结构</h1><h2 id="1、计算机体系结构分类"><a href="#1、计算机体系结构分类" class="headerlink" title="1、计算机体系结构分类"></a>1、计算机体系结构分类</h2><ul>
<li><p><strong>两种典型的结构 ：</strong></p>
<ul>
<li>冯·诺依曼结构：    <ul>
<li>将数据和指令都存储在存储器中的计算机。</li>
<li>计算系统由一个中央处理单元（CPU）和一个存储器组成。存储器拥有数据和指令，并且可以根据所给的地址对它进行读或写。</li>
</ul>
</li>
<li>哈佛体系结构：    <ul>
<li>为数据和程序提供了各自独立的存储器。</li>
<li>程序计数器只指向程序存储器而不指向数据存储器，这样做的后果是很难在哈佛机上编写出一个自修改的程序 。</li>
<li>独立的程序存储器和数据存储器为数字信号处理提供了较高的性能。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>ARM 7使用冯·诺依曼体系结构。</strong></p>
</li>
<li><p><strong>ARM 9使用哈佛体系结构。</strong></p>
</li>
</ul>
<h2 id="2、ISA（Instruction-Set-Architecture）指令集体系结构"><a href="#2、ISA（Instruction-Set-Architecture）指令集体系结构" class="headerlink" title="2、ISA（Instruction-Set Architecture）指令集体系结构"></a>2、ISA（Instruction-Set Architecture）指令集体系结构</h2><ul>
<li>不论从硬件工程师还是软件工程师的角度来看，处理器的设计都是至关重要的。因为支持复杂嵌入式系统设计的能力和设计开发的时间，在可用功能、芯片花费以及最重要的处理器性能上，都会受到指令集体系结构（ISA）的影响。</li>
<li>硬件工程师和软件工程师之间的一个桥梁：    <ul>
<li>硬件工程师根据ISA设计处理器</li>
<li>软件工程师根据ISA写程序</li>
</ul>
</li>
</ul>
<h2 id="3、-ISA模型"><a href="#3、-ISA模型" class="headerlink" title="3、 ISA模型"></a>3、 ISA模型</h2><ul>
<li>ISA模型    <ul>
<li>通用ISA模型    <ul>
<li>复杂指令集计算机（CISC）：Intel x86</li>
<li>精简指令集系统（RISC）：    <ul>
<li>由较少的指令组成的简单操作的体系结构</li>
<li>精简了每个可用操作的周期数的体系结构</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4、ARM"><a href="#4、ARM" class="headerlink" title="4、ARM"></a>4、ARM</h2><ul>
<li><p>ARM代表“高级精简指令集机器”</p>
</li>
<li><p>RISC，Reduced instruction set computer “精简指令集计算机”</p>
<ul>
<li>优势：简单指令的执行速度比复杂指令平均快很多倍，提高了性能。</li>
</ul>
</li>
<li><p>加载/存储（load/store）架构</p>
<ul>
<li>程序员必须在数据被处理之前显式地把数据从存储器加载到寄存器。</li>
<li>同样，程序员必须在数据已被处理后显式地把输出数据存储到寄存器。</li>
<li>所有算数指令以寄存器内容作为输入和结果。</li>
<li>寄存器也可以用来存储临时或者中间结果。</li>
</ul>
</li>
<li><p>三地址架构</p>
<ul>
<li>一个单指令可以涉及三个寄存器</li>
</ul>
</li>
</ul>
<h2 id="5、ARM7微处理器系列"><a href="#5、ARM7微处理器系列" class="headerlink" title="5、ARM7微处理器系列"></a>5、ARM7微处理器系列</h2><ul>
<li>低功耗的32位RISC处理器，冯·诺依曼结构。</li>
<li>具有嵌入式ICE－RT逻辑，调试开发方便。</li>
<li>3级流水线结构。</li>
<li>代码密度高，兼容16位的Thumb指令集。</li>
<li>对操作系统的支持广泛，包括Windows CE、Linux、Palm OS等。</li>
<li>指令系统与ARM9系列、ARM9E系列和ARM10E系列兼容，便于用户的产品升级换代。</li>
<li>主频最高可达130MIPS。</li>
<li>主要应用领域：工业控制、Internet设备、网络和调制解调器设备、移动电话等多种多媒体和嵌入式应用。</li>
</ul>
<h2 id="6、ARM内核模块"><a href="#6、ARM内核模块" class="headerlink" title="6、ARM内核模块"></a>6、ARM内核模块</h2><ul>
<li>ARM处理器一般都带有嵌入式追踪宏单元ETM（Embedded Trace Macro），它是ARM公司自己推出的调试工具。支持CPU运行过程中对实时数据进行仿真。</li>
</ul>
<h2 id="7、ARM流水线技术"><a href="#7、ARM流水线技术" class="headerlink" title="7、ARM流水线技术"></a>7、ARM流水线技术</h2><ul>
<li>流水线技术通过多个功能部件并行工作来缩短程序执行时间，提高处理器的效率和吞吐率。    <ul>
<li>_ARM7_是冯·诺依曼结构，采用了典型的三级流水线，</li>
<li>_ARM9_则是哈佛结构，采用五级流水线技术，</li>
<li>_ARM11_则更是使用了_7_级流水线。</li>
</ul>
</li>
<li>通过增加流水线级数，简化了流水线的各级逻辑，进一步提高了处理器的性能。</li>
</ul>
<h3 id="（1）ARM7三级流水线"><a href="#（1）ARM7三级流水线" class="headerlink" title="（1）ARM7三级流水线"></a>（1）ARM7三级流水线</h3><ul>
<li><p>ARM7系列内核采用了三条流水线的内核结构，三级流水线分别为取指（Fetch）、译码(Decode)、执行(Execute)</p>
<img src="https://cdn.megalomania.icu/images/ch2-1.png">
</li>
<li><p>取指：将指令从存储器中取出，放入指令Cache中。</p>
</li>
<li><p>译码：由译码逻辑单元完成，是将在上一步指令Cache中的指令进行解释，告诉CPU将如何操作。</p>
</li>
<li><p>执行：这阶段包括移位操作、读通用寄存器内容、输出结果、写通用寄存器等。</p>
</li>
<li><p><strong>需要注意的是，PC指向正被取指的指令而不是正在执行的指令</strong></p>
</li>
</ul>
<h3 id="（2）ARM9内核结构"><a href="#（2）ARM9内核结构" class="headerlink" title="（2）ARM9内核结构"></a>（2）ARM9内核结构</h3><ul>
<li>ARM920是一款32位嵌入式RISC处理器内核。在指令操作上采用5级流水线 .    * 取指：从指令Cache中读取指令。<ul>
<li>译码：对指令进行译码，识别出是对哪个寄存器进行操作并从通用寄存器中读取操作数。</li>
<li>执行：进行ALU运算和移位操作，如果是对存储器操作的指令，则在ALU中计算出要访问的存储器地址。</li>
<li>存储器访问：如果是对存储器访问的指令，用来实现数据缓冲功能（通过数据Cache）。</li>
<li>寄存器回写：将指令运算或操作结果写回到目标寄存器中。<img src="https://cdn.megalomania.icu/images/ch2-2.png">

</li>
</ul>
</li>
</ul>
<h2 id="8、ARM处理器的工作模式"><a href="#8、ARM处理器的工作模式" class="headerlink" title="8、ARM处理器的工作模式"></a>8、ARM处理器的工作模式</h2><ul>
<li><p>ARM处理器共有7种工作模式    </p>
<ol>
<li><p>用户模式：非特权模式，也就是正常程序执行的模式，大部分任务在这种模式下执行。</p>
</li>
<li><p>FIQ模式：也称为快速中断模式，支持高速数据传输和通道处理，当一个高优先级(fast)中断产生时将会进入这种模式。</p>
</li>
<li><p>IRQ模式：也称为普通中断模式，:当一个低优先级(normal)中断产生时将会进入这种模式。</p>
</li>
<li><p>SVC模式：称之为管理模式，它是一种操作系统保护模式。当复位或软中断指令执行时处理器将进入这种模式。</p>
</li>
<li><p>中止模式：当存取异常时将会进入这种模式，用来处理存储器故障、实现虚拟存储或存储保护。</p>
</li>
<li><p>未定义指令异常模式：当执行未定义指令时会进入这种模式，主要是用来处理未定义的指令陷阱，支持硬件协处理器的软件仿真，因为未定义指令多发生在对协处理器的操作上。</p>
</li>
<li><p>系统模式：使用和User模式相同寄存器组的特权模式，用来运行特权级的操作系统任务。</p>
</li>
</ol>
</li>
</ul>
<h2 id="9、ARM-寄存器"><a href="#9、ARM-寄存器" class="headerlink" title="9、ARM 寄存器"></a>9、ARM 寄存器</h2><ul>
<li><p>ARM处理器共有37个寄存器，这些寄存器包括以下两类寄存器。</p>
<ol>
<li>31个通用寄存器：包括程序计数器PC等，这些寄存器都是32位寄存器。</li>
<li>6个状态寄存器：状态寄存器也是32位的寄存器，但是目前只使用了其中的14位。</li>
</ol>
</li>
<li><p>1 个用作PC( program counter)</p>
</li>
<li><p>1个用作CPSR(current program status register)</p>
</li>
<li><p>5个用作SPSR(saved program status registers)</p>
</li>
<li><p>30 个通用寄存器</p>
</li>
</ul>
<h2 id="10、程序状态寄存器"><a href="#10、程序状态寄存器" class="headerlink" title="10、程序状态寄存器"></a>10、程序状态寄存器</h2><img src="https://cdn.megalomania.icu/images/8ac2d152cc60414c9b7ac150e08eebc9.png">

<ul>
<li><p>条件位：</p>
<ul>
<li>N = 1-结果为负，0-结果为正或0</li>
<li>Z = 1-结果为0，0-结果不为0</li>
<li>C = 1-进位，0-借位</li>
<li>V =1-结果溢出，0结果没溢出</li>
</ul>
</li>
<li><p>Q 位：</p>
<ul>
<li>仅ARM 5TE/J架构支持</li>
<li>指示增强型DSP指令是否溢出</li>
</ul>
</li>
<li><p>J 位：</p>
<ul>
<li>仅ARM 5TE/J架构支持</li>
<li>J = 1: 处理器处于Jazelle状态</li>
</ul>
</li>
<li><p>中断禁止位：</p>
<ul>
<li>I = 1: 禁止 IRQ.</li>
<li>F = 1: 禁止 FIQ.</li>
</ul>
</li>
<li><p>T Bit：</p>
<ul>
<li>仅ARM xT架构支持</li>
<li>T = 0: 处理器处于 ARM 状态</li>
<li>T = 1: 处理器处于 Thumb 状态</li>
</ul>
</li>
<li><p>Mode位(处理器模式位):</p>
<ul>
<li>0b10000 User</li>
<li>0b10001 FIQ</li>
<li>0b10010 IRQ</li>
<li>0b10011 Supervisor</li>
<li>0b10111 Abort</li>
<li>0b11011 Undefined</li>
<li>0b11111 System</li>
</ul>
</li>
</ul>
<h2 id="11、程序指针PC-r15"><a href="#11、程序指针PC-r15" class="headerlink" title="11、程序指针PC (r15)"></a>11、程序指针PC (r15)</h2><ul>
<li><p>当处理器执行在ARM状态:</p>
<ul>
<li>所有指令 32 bits 宽</li>
<li>所有指令必须 word 对齐</li>
<li>所以 pc值由bits [31:2]决定, bits [1:0] 未定义 (所以指令不能halfword / byte对齐).</li>
</ul>
</li>
<li><p>当处理器执行在Thumb状态:</p>
<ul>
<li>所有指令 16 bits 宽</li>
<li>所有指令必须 halfword 对齐</li>
<li>所以 pc值由bits [31:1]决定, bits [0] 未定义 (所以指令不能 byte对齐).</li>
</ul>
</li>
</ul>
<h2 id="12、ARM异常处理"><a href="#12、ARM异常处理" class="headerlink" title="12、ARM异常处理"></a>12、ARM异常处理</h2><ul>
<li>当正常的程序执行流程发生暂时的停止时，称之为异常。</li>
<li>例如处理一个外部的中断请求。在处理异常之前，当前处理器的状态必须保留，这样当异常处理完成之后，当前程序可以继续执行。</li>
<li>处理器允许多个异常同时发生，它们将会按固定的优先级进行处理。</li>
</ul>
<h3 id="（1）异常入口"><a href="#（1）异常入口" class="headerlink" title="（1）异常入口"></a>（1）异常入口</h3><ul>
<li><p>ARM处理器的异常分为<strong>数据中止</strong>、<strong>快速中断请求</strong>、<strong>普通中断请求</strong>、<strong>预取指中止</strong>、<strong>软件中断</strong>、<strong>复位</strong>及<strong>未定义指令</strong>共7种 。</p>
<table>
<thead>
<tr>
<th><strong>异常类型</strong></th>
<th><strong>处理器模式</strong></th>
<th><strong>优先级</strong></th>
<th><strong>向量表偏移</strong></th>
</tr>
</thead>
<tbody><tr>
<td>复   位</td>
<td>SVC</td>
<td>1</td>
<td>0x00000000</td>
</tr>
<tr>
<td>未定义指令</td>
<td>UND</td>
<td>6</td>
<td>0x00000004</td>
</tr>
<tr>
<td>软件中断SWI</td>
<td>SVC</td>
<td>6</td>
<td>0x00000008</td>
</tr>
<tr>
<td>预取指中止</td>
<td>ABT</td>
<td>5</td>
<td>0x0000000c</td>
</tr>
<tr>
<td>数据中止</td>
<td>ABT</td>
<td>2</td>
<td>0x00000010</td>
</tr>
<tr>
<td>保留</td>
<td>/</td>
<td>/</td>
<td>0x00000014</td>
</tr>
<tr>
<td>IRQ中断</td>
<td>IRQ</td>
<td>4</td>
<td>0x00000018</td>
</tr>
<tr>
<td>FIQ中断</td>
<td>FIQ</td>
<td>3</td>
<td>0x0000001c</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="（2）对异常的响应"><a href="#（2）对异常的响应" class="headerlink" title="（2）对异常的响应"></a>（2）对异常的响应</h3><ul>
<li>当异常产生时, ARM core:    <ul>
<li>拷贝 CPSR 到 SPSR_&lt; mode &gt;</li>
<li>设置适当的 CPSR 位：    <ul>
<li>改变处理器状态进入 ARM 状态</li>
<li>改变处理器模式进入相应的异常模式</li>
<li>设置中断禁止位禁止相应中断 (如果需要)</li>
</ul>
</li>
<li>保存返回地址到 LR_&lt; mode &gt;</li>
</ul>
</li>
<li>设置 PC 位相应的异常向量</li>
<li>返回时, 异常处理需要:    <ul>
<li>从 SPSR _ &lt; mode &gt;恢复CPSR</li>
<li>从LR_&lt; mode &gt;恢复PC</li>
<li>Note:这些操作只能在 ARM 态执行</li>
</ul>
</li>
</ul>
<h2 id="13、外中断处理"><a href="#13、外中断处理" class="headerlink" title="13、外中断处理"></a>13、外中断处理</h2><ul>
<li><p>ARM 有两级外部中断 FIQ，IRQ.</p>
</li>
<li><p>可是大多数的基于ARM 的系统有 &gt;2个的中断源!</p>
<ul>
<li>因此需要一个中断控制器(通常是地址映射的)来控制中断是怎样传递给ARM的。</li>
<li>在许多系统中，一些中断的优先级比其它中断的优先级高，他们要抢先任何正在处理的低优先级中断。</li>
</ul>
</li>
<li><p>Note: 通常中断处理程序总是应该包含_清除中断源的代码_。</p>
</li>
</ul>
<h3 id="（1）FIQ-vs-IRQ"><a href="#（1）FIQ-vs-IRQ" class="headerlink" title="（1）FIQ vs IRQ"></a>（1）FIQ vs IRQ</h3><ul>
<li><p>FIQ 和 IRQ 提供了非常基本的优先级级别。</p>
</li>
<li><p>在下边两种情况下，FIQs有高于IRQs的优先级:</p>
<ul>
<li>当多个中断产生时，FIQ高于IRQ.</li>
<li>处理 FIQ时禁止 IRQs.</li>
<li>IRQs 将不会被响应直到 FIQ处理完成.</li>
</ul>
</li>
<li><p>FIQs 的设计使中断处理尽可能的快.</p>
<ul>
<li>FIQ 向量位于中断向量表的最末.    <ul>
<li>为了使中断处理程序可从中断向量处连续执行</li>
</ul>
</li>
<li>FIQ 模式有5个额外的私有寄存器 (r8-r12)    <ul>
<li>中断处理必须保护其使用的非私有寄存器</li>
</ul>
</li>
<li>可以有多个FIQ中断源,但是考虑到系统性能应避免嵌套。</li>
</ul>
</li>
</ul>
<h3 id="（2）中断重新使能的问题"><a href="#（2）中断重新使能的问题" class="headerlink" title="（2）中断重新使能的问题"></a>（2）中断重新使能的问题</h3><ul>
<li><p>当另外一个中断抢先当前中断时，如果程序员使用下边特殊的步骤来防止系统状态丢失 ，中断是可以嵌套：</p>
<ul>
<li>保存IRQ状态下的LR（ LR_IRQ ）</li>
<li>保存IRQ状态下的SPSR（SPSR_IRQ）</li>
</ul>
</li>
<li><p>当中断可重入时，在中断处理程序中使用“BL…”必须特别小心:</p>
<ul>
<li>如果第二个中断产生，BL调用的返回地址 (LR_irq) 可能被冲掉，子程序将错误的返回 – 导致无限循环!</li>
</ul>
</li>
<li><p>解决方法是在使用“BL…”之前改变模式来避免 LR_irq 被冲掉</p>
<ul>
<li>通常使用“System”模式 ( 这时 BL 使用 LR_usr)</li>
</ul>
</li>
<li><p>在处理程序结束，必须：</p>
<ul>
<li>切换回 IRQ 模式</li>
<li>禁止中断 (来避免在恢复SPSR_irq 到一个临时的寄存器中后它被冲掉).</li>
</ul>
</li>
</ul>
<h3 id="（3）软中断"><a href="#（3）软中断" class="headerlink" title="（3）软中断"></a>（3）软中断</h3><img src="https://cdn.megalomania.icu/images/06856245f71e71dc4b6e77753fe3e72c.png">

<h3 id="（4）SWI调用"><a href="#（4）SWI调用" class="headerlink" title="（4）SWI调用"></a>（4）SWI调用</h3><ul>
<li><p>汇编中, SWI 调用使用“SWI 中断号”实现：</p>
<ul>
<li><code>SWI 0x24</code></li>
</ul>
</li>
<li><p>小心在汇编中如果SWI 调用时处于Supervisor模式将会冲掉LR_svc.</p>
<ul>
<li>例如：在SWI处理程序中的二级调用</li>
<li>解决方法: 在SWI调用之前对LR_svc 压栈保护</li>
</ul>
</li>
<li><p>C 中, 使用关键词 “__swi” 来定义一个软中断函数</p>
</li>
</ul>
<h3 id="（5）存取SWI号"><a href="#（5）存取SWI号" class="headerlink" title="（5）存取SWI号"></a>（5）存取SWI号</h3><ul>
<li><p>SWI 指令按相应的格式译码：    </p>
<ul>
<li>ARM 态格式:</li>
</ul>
<img src="https://cdn.megalomania.icu/images/7389d5f54492c758094b9665351a626e.png">




</li>
</ul>
<ul>
<li><p>Thumb 态格式:</p>
  <img src="https://cdn.megalomania.icu/images/48c42dab1288ecb7a1cf6dc60cd1d132.png">

</li>
</ul>
<h3 id="（6）存取SWI参数"><a href="#（6）存取SWI参数" class="headerlink" title="（6）存取SWI参数"></a>（6）存取SWI参数</h3><ul>
<li>汇编中，存取调用者设置的寄存器即可.    <ul>
<li>在返回之前，修改寄存器的值，传回参数给调用者.</li>
</ul>
</li>
<li>传参数给C, 通常采用压栈的方法.    <ul>
<li>将参数压栈</li>
<li>给调用的函数传递一个指向这些参数的指针</li>
<li>也可以通过将参数值写回到适当的堆栈位置，将参数传回</li>
</ul>
</li>
</ul>
<h3 id="（7）复位"><a href="#（7）复位" class="headerlink" title="（7）复位"></a>（7）复位</h3><ul>
<li>Reset 处理程序执行的动作取决于不同的系统. 例如它可以:    <ul>
<li>设置异常向量</li>
<li>初始化存储器系统 (MMU/PU)</li>
<li>初始化所有需要的模式的堆栈和寄存器</li>
<li>初始化所有 C 所需的变量</li>
<li>初始化所有I/O设备</li>
<li>使能中断</li>
<li>改变处理器模式或/和状态</li>
<li>调用主应用程序</li>
</ul>
</li>
</ul>
<h3 id="（8）未定义指令"><a href="#（8）未定义指令" class="headerlink" title="（8）未定义指令"></a>（8）未定义指令</h3><ul>
<li><p>下列情况将引起未定义指令异常:、</p>
<ul>
<li>ARM 试图执行一真正的未定义指令</li>
<li>ARM 遇到一协处理器指令，可是系统中的协处理器硬件并不存在</li>
<li>ARM 遇到一协处理器指令，系统中协处理器硬件也存在，可是ARM 不是在超级用户模式(privileged mode)    <ul>
<li>例如：操作协处理器15(cp15) - ARM cache 控制器</li>
</ul>
</li>
</ul>
</li>
<li><p>解决方法:</p>
<ul>
<li>在处理程序中执行软协处理器仿真</li>
<li>禁止在非超级用户模式下操作</li>
<li>报告错误并退出</li>
</ul>
</li>
</ul>
<h3 id="（9）预取异常"><a href="#（9）预取异常" class="headerlink" title="（9）预取异常"></a>（9）预取异常</h3><ul>
<li><p>不论异常是发生在 ARM 还是Thumb 状态下，导致预取异常的指令地址在 lr-4 处.</p>
</li>
<li><p>处理方法取决于存储器管理策略</p>
<ul>
<li>有存储器管理的系统 (e.g. demand paged virtual memory)    <ul>
<li>修正问题 (e.g. enable correct memory page)</li>
<li>返回并重新执行预取异常的指令( SUBS pc,lr,#4 )</li>
</ul>
</li>
<li>没有存储器管理的系统    <ul>
<li>通常表示一个致命的错误</li>
<li>报告错误 (如果可能) 然后退出</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="（10）数据异常"><a href="#（10）数据异常" class="headerlink" title="（10）数据异常"></a>（10）数据异常</h3><ul>
<li><p>导致异常的指令的地址在 lr-8 处.</p>
</li>
<li><p>处理方法取决于存储器管理策略    </p>
<ul>
<li><p>有存储器管理的系统( demand-paged virtual memory)</p>
</li>
<li><p>如果使用了 MMU ，数据异常的地址在 MMU 的 “Fault Address” 寄存器中</p>
</li>
<li><p>修正问题(enable correct page of memory)</p>
</li>
<li><p>返回并重新执行数据异常的指令</p>
<p>  SUBS pc,lr,#8</p>
</li>
<li><p>没有存储器管理的系统</p>
<ul>
<li>通常表示一个致命的错误</li>
<li>报告错误 (如果可能) 然后退出</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="（11）异常返回地址"><a href="#（11）异常返回地址" class="headerlink" title="（11）异常返回地址"></a>（11）异常返回地址</h3><ul>
<li>ARM 状态:    <ul>
<li>在异常产生的时候内核设置 LR_mode = PC - 4.</li>
<li>处理程序需要调整 LR_mode (取决于是哪一个异常发生了)，以便返回到正确的地址</li>
</ul>
</li>
<li>Thumb 状态:    <ul>
<li>处理器根据发生的异常自动修改存在 LR_mode 中的地址</li>
<li>不论异常产生时的状态如何，处理器确保处理程序的ARM 返回指令能返回到正确的地址(和正确的状态)</li>
</ul>
</li>
</ul>
<h3 id="（12）从SWIs和未定义指令返回"><a href="#（12）从SWIs和未定义指令返回" class="headerlink" title="（12）从SWIs和未定义指令返回"></a>（12）从SWIs和未定义指令返回</h3><img src="https://cdn.megalomania.icu/images/7055bddc2574b7f987bb3d87d0dd969d.png">

<h3 id="（13）从FIQs和IRQs和预取异常返回"><a href="#（13）从FIQs和IRQs和预取异常返回" class="headerlink" title="（13）从FIQs和IRQs和预取异常返回"></a>（13）从FIQs和IRQs和预取异常返回</h3><img src="https://cdn.megalomania.icu/images/4c702fa4249bc320fdac8758fb4fcfbd.png">

<h3 id="（14）从数据异常返回"><a href="#（14）从数据异常返回" class="headerlink" title="（14）从数据异常返回"></a>（14）从数据异常返回</h3><img src="https://cdn.megalomania.icu/images/0a3c54f45c85b999c254bba6219f0a89.png">

<h3 id="（15）异常返回指令"><a href="#（15）异常返回指令" class="headerlink" title="（15）异常返回指令"></a>（15）异常返回指令</h3><ul>
<li><p>使用一数据处理指令：</p>
<ul>
<li><p>相应的指令取决于什么样的异常</p>
<pre><code>&gt; 设置CPSR, “S” bit
&gt; PC做为目的寄存器</code></pre>
</li>
</ul>
</li>
<li><p>在特权模式不仅仅更新PC，而且 拷贝SPSR 到 CPSR</p>
</li>
<li><p>从SWI 和 Undef异常返回</p>
<p><code>MOVS pc,lr</code></p>
</li>
<li><p>从FIQ, IRQ 和 预取异常(Prefect Abort)返回</p>
<p><code>SUBS pc,lr,#4</code></p>
</li>
<li><p>从数据异常( Data Abort)返回</p>
<p><code>SUBS pc,lr,#8</code></p>
</li>
<li><p>如果 LR之前被压栈的话使用LDM“ ^”</p>
<p><code>LDMFD sp!,&#123;pc&#125;^</code></p>
</li>
</ul>
<h2 id="14、-存储方式与存储器映射机制"><a href="#14、-存储方式与存储器映射机制" class="headerlink" title="14、 存储方式与存储器映射机制"></a>14、 存储方式与存储器映射机制</h2><ul>
<li>ARM处理器地址空间大小为4G字节，这些字节的单元地址是<strong>一个无符号的32位数值</strong>，其取值范围为0~(2^32)-1。各存储单元地址作为32位无符号数，可以进行常规的整数运算。</li>
<li>当程序正常执行时，<strong>每执行一条ARM指令，当前指令计数器加4个字节；每执行一条Thumb指令，当前指令计数器加2个字节</strong>。</li>
</ul>
<h3 id="（1）数据存储格式"><a href="#（1）数据存储格式" class="headerlink" title="（1）数据存储格式"></a>（1）数据存储格式</h3><ul>
<li>小端存储格式</li>
</ul>
<img src="https://cdn.megalomania.icu/images/f42600e01ba027ed9ccfc01e803ea0c8.png">

<ul>
<li>大端存储格式</li>
</ul>
<img src="https://cdn.megalomania.icu/images/0b969ad7b5aef8bdb018234720cda583.png">

<blockquote>
<p>ARM支持大小端格式存取数据</p>
</blockquote>
<h3 id="（2）非对齐存储器地址访问问题分析"><a href="#（2）非对齐存储器地址访问问题分析" class="headerlink" title="（2）非对齐存储器地址访问问题分析"></a>（2）非对齐存储器地址访问问题分析</h3><h4 id="1-非对齐的指令预取操作"><a href="#1-非对齐的指令预取操作" class="headerlink" title="1* 非对齐的指令预取操作"></a>1* 非对齐的指令预取操作</h4><ul>
<li>如果是在ARM状态下将一个非对齐地址写入PC，则<strong>数据在写入PC时数据的第0位和第1位被忽略，最终PC的bit[1：0]为0</strong>；</li>
<li>如果是在Thumb状态下将一个非对齐地址写入PC，则<strong>数据在写入PC时数据的第0位被忽略，最终PC的bit[0]为0</strong>。</li>
</ul>
<h4 id="2-非对齐地址内存的访问操作"><a href="#2-非对齐地址内存的访问操作" class="headerlink" title="2* 非对齐地址内存的访问操作"></a>2* 非对齐地址内存的访问操作</h4><ul>
<li>对于LOAD/STORE操作，系统定义了下面3种可能的结果：    <ul>
<li>执行结果不可预知；</li>
<li>忽略字单元地址低两位的值，即访问地址为字单元；</li>
<li>忽略半字单元最低位的值，即访问地址为半字单元。这种忽略是由存储系统自动实现的。</li>
</ul>
</li>
</ul>
<h2 id="15、ARM流水线技术分析"><a href="#15、ARM流水线技术分析" class="headerlink" title="15、ARM流水线技术分析"></a>15、ARM流水线技术分析</h2><h3 id="（1）ARM7流水线技术"><a href="#（1）ARM7流水线技术" class="headerlink" title="（1）ARM7流水线技术"></a>（1）ARM7流水线技术</h3><ul>
<li><p>为增加处理器指令流的速度，ARM7 系列使用3级流水线.</p>
<ul>
<li>允许多个操作同时处理，比逐条指令执行要快。<img src="https://cdn.megalomania.icu/images/0a9b2bff24dfd6755ea586b51a967662.png">
</li>
</ul>
</li>
<li><p>PC指向正被取指的指令，而非正在执行的指令</p>
</li>
<li><p>最佳流水线</p>
<img src="https://cdn.megalomania.icu/images/e46322dede506b7bcca8d7122b8ea030.png">

</li>
</ul>
<h3 id="（2）ARM9TDMI流水线"><a href="#（2）ARM9TDMI流水线" class="headerlink" title="（2）ARM9TDMI流水线"></a>（2）ARM9TDMI流水线</h3><ul>
<li><p>与ARM7的区别</p>
<img src="https://cdn.megalomania.icu/images/089de0568dc393779bd6db6b81e67b97.png">
</li>
<li><p>最佳流水线</p>
<img src="https://cdn.megalomania.icu/images/25113639859bc64d1da56ad72cbaa375.png">
</li>
<li><p>LDR互锁</p>
<ul>
<li>LDR指令之后立即跟一条数据操作指令，由于使用了相同的寄存器，将会导致互锁 。</li>
</ul>
</li>
<li><p>LDM互锁</p>
<ul>
<li>在LDM期间，有并行的存储器访问和回写周期</li>
</ul>
</li>
</ul>
<h1 id="三、ARM指令集寻址方式"><a href="#三、ARM指令集寻址方式" class="headerlink" title="三、ARM指令集寻址方式"></a>三、ARM指令集寻址方式</h1><h2 id="1、ARM指令的编码格式"><a href="#1、ARM指令的编码格式" class="headerlink" title="1、ARM指令的编码格式"></a>1、ARM指令的编码格式</h2><h3 id="（1）一般编码格式"><a href="#（1）一般编码格式" class="headerlink" title="（1）一般编码格式"></a>（1）一般编码格式</h3><ul>
<li>每条ARM指令占有4个字节，其指令长度为32位<br>![89de4100fc42de747ab60fd71b202ef0.png](/嵌入式系统与组成原理—提纲/89de4100fc42de747ab60fd71b202ef0.png %}</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>位置</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>cond</td>
<td>bit[31:28]</td>
<td>指令执行的条件码</td>
</tr>
<tr>
<td>type</td>
<td>bit[27:26]</td>
<td>指令类型码</td>
</tr>
<tr>
<td>I</td>
<td>bit[25]</td>
<td>第二操作数是否是立即数</td>
</tr>
<tr>
<td>opcode</td>
<td>bit[24:21]</td>
<td>指令操作码</td>
</tr>
<tr>
<td>S</td>
<td>bit[20]</td>
<td>决定指令的操作结果是否影响CPSR</td>
</tr>
<tr>
<td>Rn</td>
<td>bit[19:16]</td>
<td>包含第一个操作数的寄存器编码</td>
</tr>
<tr>
<td>Rd</td>
<td>bit[15:12]</td>
<td>目标寄存器编码</td>
</tr>
<tr>
<td>Operand2</td>
<td>bit[11:0]</td>
<td>指令第二个操作数</td>
</tr>
</tbody></table>
<ul>
<li>ARM汇编指令语法格式：</li>
</ul>
<p><code>&lt;opcode&gt;&#123;&lt;cond&gt;&#125;&#123;S&#125;&lt;Rd&gt;,&lt;Rn&gt;,&lt;operand2&gt;</code></p>
<h3 id="（2）指令条件码"><a href="#（2）指令条件码" class="headerlink" title="（2）指令条件码"></a>（2）指令条件码</h3><table>
<thead>
<tr>
<th>二进制码</th>
<th>指令</th>
<th>意义</th>
<th>条件</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>EQ</td>
<td>相等</td>
<td>Z=1</td>
</tr>
<tr>
<td>0001</td>
<td>NE</td>
<td>不相等</td>
<td>Z=0</td>
</tr>
<tr>
<td>0010</td>
<td>CS/HS</td>
<td>无符号大于等于</td>
<td>C=1</td>
</tr>
<tr>
<td>0011</td>
<td>CC/LO</td>
<td>无等号小于</td>
<td>C=0</td>
</tr>
<tr>
<td>0100</td>
<td>MI</td>
<td>负数</td>
<td>N=1</td>
</tr>
<tr>
<td>0101</td>
<td>PL</td>
<td>非负数</td>
<td>N=0</td>
</tr>
<tr>
<td>0110</td>
<td>VS</td>
<td>上溢出</td>
<td>V=1</td>
</tr>
<tr>
<td>0111</td>
<td>VC</td>
<td>没有上溢出</td>
<td>V=0</td>
</tr>
<tr>
<td>1000</td>
<td>HI</td>
<td>无符号数大于</td>
<td>C=1且Z=0</td>
</tr>
<tr>
<td>1001</td>
<td>LS</td>
<td>无符号数小于等于</td>
<td>C=0或Z=1</td>
</tr>
<tr>
<td>1010</td>
<td>GE</td>
<td>有符号数大于等于</td>
<td>N=1且V=1或N=0且V=0</td>
</tr>
<tr>
<td>1011</td>
<td>LT</td>
<td>有符号数小于</td>
<td>N=1且V=0或N=0且V=1</td>
</tr>
<tr>
<td>1100</td>
<td>GT</td>
<td>有符号数大于</td>
<td>Z=0且N=V</td>
</tr>
<tr>
<td>1101</td>
<td>LE</td>
<td>有符号数小于等于</td>
<td>Z=1或N!=V</td>
</tr>
<tr>
<td>1110</td>
<td>AL</td>
<td>无条件执行</td>
<td></td>
</tr>
</tbody></table>
<h2 id="2、数据处理指令寻址方式"><a href="#2、数据处理指令寻址方式" class="headerlink" title="2、数据处理指令寻址方式"></a>2、数据处理指令寻址方式</h2><h3 id="（1）数据处理指令第2操作数的构成方式"><a href="#（1）数据处理指令第2操作数的构成方式" class="headerlink" title="（1）数据处理指令第2操作数的构成方式"></a>（1）数据处理指令第2操作数的构成方式</h3><h4 id="1-立即数方式"><a href="#1-立即数方式" class="headerlink" title="1* 立即数方式"></a>1* 立即数方式</h4><ul>
<li><p>每个立即数由一个8位的常数进行32位循环右移偶数位得到，其中循环右移的位数由一个4位二进制的两倍表示。即：</p>
<p><code>&lt;immediate&gt;=immed_8进行32位循环右移（2* rotate_4）位</code></p>
</li>
</ul>
<blockquote>
<p>ARM处理器中，立即数必须是对应8位位图格式，即立即数是由一个8bit的常数在16位或32位的寄存器中循环移动（向左或向右都可以）偶数位得到的。合法的立即数必须能够找到得到它的那个常数，否则这个立即数就是非法的。</p>
</blockquote>
<img src="https://cdn.megalomania.icu/images/be492bb4e5ca058e29674441c415c992.png">

<img src="https://cdn.megalomania.icu/images/12bbe55aeedd66ed93d382ce34d45666.png">

<h4 id="2-寄存器方式"><a href="#2-寄存器方式" class="headerlink" title="2* 寄存器方式"></a>2* 寄存器方式</h4><ul>
<li>操作数即为寄存器的数值，如：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> <span class="built_in">R3</span>,<span class="built_in">R2</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R1</span>,<span class="built_in">R2</span></span><br></pre></td></tr></table></figure>
<h4 id="3-寄存器移位方式"><a href="#3-寄存器移位方式" class="headerlink" title="3*寄存器移位方式"></a>3*寄存器移位方式</h4><ul>
<li>寄存器移位方式    <ul>
<li>操作数为寄存器的数值做相应的移位而得到。在ARM指令中移位操作包括逻辑左移、逻辑右移、算术左移、算术右移、循环右移和带扩展的循环右移<img src="https://cdn.megalomania.icu/images/9e8d6de1c674f2097b99c8ca0740b5ce.png">

</li>
</ul>
</li>
</ul>
<h3 id="（2）具体寻址类型"><a href="#（2）具体寻址类型" class="headerlink" title="（2）具体寻址类型"></a>（2）具体寻址类型</h3><h4 id="1-第二操作数为立即数"><a href="#1-第二操作数为立即数" class="headerlink" title="1* 第二操作数为立即数"></a>1* 第二操作数为立即数</h4><ul>
<li>汇编语法格式：<code>#&lt;immediate&gt;</code><img src="https://cdn.megalomania.icu/images/b5d9b0c5b4f9cc8de0e4c6600613f9e7.png">

</li>
</ul>
<blockquote>
<p>I位bits[25] 设置为1</p>
</blockquote>
<p>eg.</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MOV</span> R<span class="number">0</span>, <span class="number">0</span>xFC<span class="number">0</span>           ;R<span class="number">0</span>←<span class="number">0</span>xFC<span class="number">0</span></span><br><span class="line"><span class="attribute">ADD</span>	R<span class="number">0</span>，R<span class="number">0</span>，＃<span class="number">1</span>		 ;R<span class="number">0</span>←R<span class="number">0</span>＋<span class="number">1</span></span><br><span class="line"><span class="attribute">ADD</span>	R<span class="number">0</span>，R<span class="number">0</span>，＃<span class="number">0</span>x<span class="number">3</span>f	   ;R<span class="number">0</span>←R<span class="number">0</span>＋<span class="number">0</span>x<span class="number">3</span>f</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在以上三条指令中，第二个源操作数即为立即数，要求以“＃”为前缀，对于以十六进制表示的立即数，还要求在“＃”后加上“0x”。</p>
</blockquote>
<h4 id="2-第二操作数为寄存器"><a href="#2-第二操作数为寄存器" class="headerlink" title="2* 第二操作数为寄存器"></a>2* 第二操作数为寄存器</h4><ul>
<li><p>汇编语法格式：<code>&lt;Rm&gt;</code></p>
<img src="https://cdn.megalomania.icu/images/1cc4bd59f60f90a0c7c88e45240d0fea.png">
</li>
<li><p>I位bits[25] 设置为0</p>
</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ADD</span> R<span class="number">0</span>, R<span class="number">1</span>, R<span class="number">2</span>   ; R<span class="number">0</span>←R<span class="number">1</span> + R<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h4 id="3-第二操作数为寄存器移位方式，且移位的位数为一个5位的立即数"><a href="#3-第二操作数为寄存器移位方式，且移位的位数为一个5位的立即数" class="headerlink" title="3* 第二操作数为寄存器移位方式，且移位的位数为一个5位的立即数"></a>3* 第二操作数为寄存器移位方式，且移位的位数为一个5位的立即数</h4><ul>
<li>汇编语法格式：<code>&lt;Rm&gt;,&lt;shift&gt; #&lt;shift_imm&gt;</code><img src="https://cdn.megalomania.icu/images/bd7b89fe4b0f51cf4dce844a6b2e5564.png">

</li>
</ul>
<h4 id="4-第二操作数为寄存器移位方式，且移位数值放在寄存器中"><a href="#4-第二操作数为寄存器移位方式，且移位数值放在寄存器中" class="headerlink" title="4* 第二操作数为寄存器移位方式，且移位数值放在寄存器中"></a>4* 第二操作数为寄存器移位方式，且移位数值放在寄存器中</h4><ul>
<li>汇编语法格式：<code>&lt;Rm&gt;，&lt;shift&gt; &lt;Rs&gt;</code><img src="https://cdn.megalomania.icu/images/40b8d91fdfc2b4dcd3863d7789723d43.png">

</li>
</ul>
<h4 id="5-第二操作数为寄存器进行RRX移位得到"><a href="#5-第二操作数为寄存器进行RRX移位得到" class="headerlink" title="5* 第二操作数为寄存器进行RRX移位得到"></a>5* 第二操作数为寄存器进行RRX移位得到</h4><ul>
<li><p>汇编语法格式：<code>&lt;Rm&gt;，RRX</code></p>
<img src="https://cdn.megalomania.icu/images/4433f1193ba575a2d4e109771c6226cf.png">

<img src="https://cdn.megalomania.icu/images/365b26fac29a5f15f7605a55c24ae8ae.png">

</li>
</ul>
<h3 id="（3）寄存器寻址"><a href="#（3）寄存器寻址" class="headerlink" title="（3）寄存器寻址"></a>（3）寄存器寻址</h3><ul>
<li>寄存器寻址    </li>
<li>利用寄存器中的数值作为操作数，这种寻址方式是各类微处理器经常采用的一种方式，也是一种执行效率较高的寻址方式。</li>
</ul>
<h3 id="（4）第二操作数为寄存器"><a href="#（4）第二操作数为寄存器" class="headerlink" title="（4）第二操作数为寄存器"></a>（4）第二操作数为寄存器</h3><ul>
<li>在ARM指令的数据处理指令中参与操作的二操作数为寄存器型时，在执行寄存器寻址操作时，可以选择是否对第二操作数进行移位，即<code>Rm，&#123;&lt;shift&gt;&#125;</code>，其中Rm称为第二操作数寄存器，<code>&lt;shift&gt;</code>用来指定移位类型（LSL，LSR，ASL，ASR，ROR或RRX）和移位位数。移位位数可以是5位立即数（#&lt;#shift&gt;）或寄存器（Rs）。在指令执行时将移位后的内容作为第二操作数参与运算。例如指令：</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ADD</span> R<span class="number">3</span>，R<span class="number">2</span>，R<span class="number">1</span>，LSR  #<span class="number">2</span>    ;R<span class="number">3</span>←R<span class="number">2</span> + R<span class="number">1</span>÷<span class="number">4</span></span><br></pre></td></tr></table></figure>
<h3 id="（5）Load-Store指令寻址"><a href="#（5）Load-Store指令寻址" class="headerlink" title="（5）Load/Store指令寻址"></a>（5）Load/Store指令寻址</h3><ul>
<li>Load/Store指令是对内存进行存储/加载数据操作的指令，根据访问的数据格式的不同，将这类指令的寻址分为<strong>字、无符号字节的Load/Store指令寻址</strong>和<strong>半字、有符号字节Load/Store指令寻址两大类</strong>。</li>
</ul>
<h4 id="1-寄存器间接寻址"><a href="#1-寄存器间接寻址" class="headerlink" title="1* 寄存器间接寻址"></a>1* 寄存器间接寻址</h4><ul>
<li>寄存器间接寻址就是以寄存器中的值作为操作数的地址，而操作数本身存放在存储器中。例如以下指令：</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LDR</span>	 R<span class="number">0</span>，[R<span class="number">1</span>] 		;R<span class="number">0</span> ←[R<span class="number">1</span>] </span><br><span class="line"><span class="attribute">STR</span>	 R<span class="number">0</span>，[R<span class="number">1</span>] 		;[R<span class="number">1</span>]← R<span class="number">0</span> </span><br></pre></td></tr></table></figure>
<h3 id="（6）基址加变址寻址"><a href="#（6）基址加变址寻址" class="headerlink" title="（6）基址加变址寻址"></a>（6）基址加变址寻址</h3><ul>
<li>基址变址寻址就是将寄存器（该寄存器一般称作基址寄存器）的内容与指令中给出的地址偏移量相加，从而得到一个操作数的有效地址。变址寻址方式常用于访问某基地址附近的地址单元。    <ul>
<li>前变址法：基地址寄存器中的值和地址偏移量先作加减运算，生成的操作数作为内存访问的地址。</li>
<li>后变址法：将基地址寄存器中的值直接作为内存访问的地址进行操作，内存访问完毕后基地址寄存器中的值和地址偏移量作加减运算，并更新基地址寄存器。</li>
</ul>
</li>
</ul>
<h3 id="（7）字、无符号字节寻址"><a href="#（7）字、无符号字节寻址" class="headerlink" title="（7）字、无符号字节寻址"></a>（7）字、无符号字节寻址</h3><ul>
<li>汇编指令语法格式为：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDR </span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="template-variable">&#123;B&#125;</span><span class="template-variable">&#123;T&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">Rd</span>&gt;</span>,<span class="tag">&lt;<span class="name">addressing_mode</span>&gt;</span></span></span><br><span class="line"><span class="xml">STR </span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="template-variable">&#123;B&#125;</span><span class="template-variable">&#123;T&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">Rd</span>&gt;</span>,<span class="tag">&lt;<span class="name">addressing_mode</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/f669609fdb8b31824940ccc875cc16cc.png">

<img src="https://cdn.megalomania.icu/images/0a6a40c9950f58ea73683fa8c9824687.png">

<h4 id="1-Addressing-mode中的偏移量为立即数"><a href="#1-Addressing-mode中的偏移量为立即数" class="headerlink" title="1* Addressing_mode中的偏移量为立即数"></a>1* Addressing_mode中的偏移量为立即数</h4><ul>
<li>前变址不回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，#+/-&lt;immed_offset&gt;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，#+/-&lt;immed_offset&gt;]</span>！</span><br></pre></td></tr></table></figure>
<ul>
<li>后变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;]</span>，#+/-&lt;immed_offset&gt;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/6ee0ff0cd1e5e2b381e6db9e503b0562.png">

<table>
<thead>
<tr>
<th>W</th>
<th>P</th>
<th>汇编语法格式</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>[<Rn>，#+/-<immed_offset>]</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>[<Rn>]，#+/-<immed_offset></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>[<Rn>，#+/-<immed_offset>]!</td>
</tr>
</tbody></table>
<h4 id="2-Addressing-mode中的偏移量为寄存器的值"><a href="#2-Addressing-mode中的偏移量为寄存器的值" class="headerlink" title="2* Addressing_mode中的偏移量为寄存器的值"></a>2* Addressing_mode中的偏移量为寄存器的值</h4><ul>
<li>前变址不回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，+/-&lt;Rm&gt;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，+/-&lt;Rm&gt;]</span>！</span><br></pre></td></tr></table></figure>
<ul>
<li>后变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;]</span>，+/-&lt;Rm&gt;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/f440793da4ce61807f0c90d2b4c60f13.png">

<table>
<thead>
<tr>
<th>W</th>
<th>P</th>
<th>汇编语法格式</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>[<Rn>，+/-<Rm>]</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>[<Rn>]，+/-<Rm></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>[<Rn>，+/-<Rm>]!</td>
</tr>
</tbody></table>
<h4 id="偏移量通过寄存器移位得到"><a href="#偏移量通过寄存器移位得到" class="headerlink" title="偏移量通过寄存器移位得到"></a>偏移量通过寄存器移位得到</h4><ul>
<li>前变址不回写形式：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">[<span class="params">&lt;Rn&gt;</span>，+/-<span class="params">&lt;Rm&gt;</span>，<span class="params">&lt;shift&gt;</span><span class="meta">#shift_amount]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前变址回写形式：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">[<span class="params">&lt;Rn&gt;</span>，+/-<span class="params">&lt;Rm&gt;</span>，<span class="params">&lt;shift&gt;</span><span class="meta">#shift_amount]！</span></span><br></pre></td></tr></table></figure>
<ul>
<li>后变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;]</span>，+/-&lt;Rm&gt;，&lt;shift&gt;#shift_amount</span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/7634c590cf8d1ba1a6d4e290749ad537.png">

<table>
<thead>
<tr>
<th>W</th>
<th>P</th>
<th>汇编语法格式</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>[<Rn>，+/-<Rm>，<shift>#shift_amount]</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>[<Rn>]，+/-<Rm>，<shift>#shift_amount</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>[<Rn>，+/-<Rm>，<shift>#shift_amount]!</td>
</tr>
</tbody></table>
<h3 id="（8）半字、有符号字节寻址"><a href="#（8）半字、有符号字节寻址" class="headerlink" title="（8）半字、有符号字节寻址"></a>（8）半字、有符号字节寻址</h3><ul>
<li><p>这类指令可用来加载有符号字节、加载有符号半字、加载/存储无符号半字。</p>
</li>
<li><p>Load/Store指令对半字、有符号字节操作指令编码格式如下：</p>
<img src="https://cdn.megalomania.icu/images/5765315414c31541336581706e9633a2.png">
</li>
<li><p>加载有符号字节到寄存器：</p>
</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">LDR </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;SB <span class="params">&lt;Rd&gt;</span>,<span class="params">&lt;addressing_mode&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>加载有符号半字到寄存器：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">LDR </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;SH <span class="params">&lt;Rd&gt;</span>,<span class="params">&lt;addressing_mode&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>加载无符号半字到寄存器：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">LDR </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;H  <span class="params">&lt;Rd&gt;</span>,<span class="params">&lt;addressing_mode&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>存储无符号半字到内存：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">STR </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;H  <span class="params">&lt;Rd&gt;</span>,<span class="params">&lt;addressing_mode&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-Addressing-mode中的偏移量为立即数-1"><a href="#1-Addressing-mode中的偏移量为立即数-1" class="headerlink" title="1* Addressing_mode中的偏移量为立即数"></a>1* Addressing_mode中的偏移量为立即数</h4><ul>
<li>前变址不回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，#+/-&lt;immed_offset8&gt;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，#+/-&lt;immed_offset8&gt;]</span>！</span><br></pre></td></tr></table></figure>
<ul>
<li>后变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;]</span>，#+/-&lt;immed_offset8&gt;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/d5782364cdf318299742c9ae03eeda90.png">

<table>
<thead>
<tr>
<th>W</th>
<th>P</th>
<th>汇编语法格式</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>[<Rn>，#+/-<immed_offset8>]</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>[<Rn>]，#+/-<immed_offset8></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>[<Rn>，#+/-<immed_offset8>]!</td>
</tr>
</tbody></table>
<h4 id="2-Addressing-mode中的偏移量为寄存器的值-1"><a href="#2-Addressing-mode中的偏移量为寄存器的值-1" class="headerlink" title="2* Addressing_mode中的偏移量为寄存器的值"></a>2* Addressing_mode中的偏移量为寄存器的值</h4><ul>
<li>前变址不回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，+/-&lt;Rm&gt;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>前变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;，+/-&lt; Rm &gt;]</span>！</span><br></pre></td></tr></table></figure>
<ul>
<li>后变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;]</span>，+/-&lt; Rm &gt;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/a1611f819355dc875bd1fa50be7acf16.png">

<table>
<thead>
<tr>
<th>W</th>
<th>P</th>
<th>汇编语法格式</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>[<Rn>，+/-<Rm>]</td>
</tr>
<tr>
<td>1</td>
<td>0</td>
<td>[<Rn>]，+/-&lt; Rm &gt;</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>[<Rn>，+/-&lt; Rm &gt;]!</td>
</tr>
</tbody></table>
<h3 id="（9）批量Load-Store指令寻址方式"><a href="#（9）批量Load-Store指令寻址方式" class="headerlink" title="（9）批量Load/Store指令寻址方式"></a>（9）批量Load/Store指令寻址方式</h3><ul>
<li>ARM指令系统提供了批量Load/Store指令寻址方式，即通常所说的多寄存器寻址，也就是一次可以传送几个寄存器的值，允许一条指令最多传送16个寄存器。</li>
</ul>
<h4 id="1-编码格式"><a href="#1-编码格式" class="headerlink" title="1* 编码格式"></a>1* 编码格式</h4><ul>
<li>批量加载：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDM </span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">addr_mode</span>&gt;</span> <span class="tag">&lt;<span class="name">Rn</span>&gt;</span> </span><span class="template-variable">&#123;!&#125;</span><span class="xml">, <span class="tag">&lt;<span class="name">register</span>&gt;</span></span><span class="template-variable">&#123;^&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>批量存储：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">STM </span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">addr_mode</span>&gt;</span> <span class="tag">&lt;<span class="name">Rn</span>&gt;</span> </span><span class="template-variable">&#123;!&#125;</span><span class="xml">, <span class="tag">&lt;<span class="name">register</span>&gt;</span></span><span class="template-variable">&#123;^&#125;</span></span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/dc3de4fc197aa62bc0341851cc217d63.png">

<ul>
<li>register_list表示要加载或存储的寄存器列表，bit[15:0]可以表示16个寄存器，如果某位为1，则该位的位置作为寄存器的编号，此寄存器参预加载或存储。</li>
<li>S用于恢复CPSR和强制用户位。当程序计数器PC包含在LDM指令的register_list中，且S为1时，则当前模式的SPSR被拷贝到CPSR中，使处理器的程序返回和状态的恢复成为一个原子操作。如果register_list中不包含程序计数器PC，S为1则加载或存储的是用户模式下的寄存器组。</li>
</ul>
<blockquote>
<p>注意事项：</p>
<ul>
<li>指令中寄存器和连续内存地址单元的对应关系：</li>
<li>编号低的寄存器对应内存低地址单元，编号高的寄存器对应内存高地址单元。</li>
</ul>
</blockquote>
<h4 id="2-内存操作"><a href="#2-内存操作" class="headerlink" title="2* 内存操作"></a>2* 内存操作</h4><ul>
<li><p>后增IA (Increment After) ：每次数据传送后地址加4；</p>
</li>
<li><p>先增IB (Increment Before) ：每次数据传送前地址加4 ；</p>
</li>
<li><p>后减DA (Decrement After) ：每次数据传送后地址减4 ；</p>
</li>
<li><p>先减DB (Decrement Before) ：每次数据传送前地址减4 ；</p>
</li>
<li><p>它们与指令编码中P、U的对应关如下表所示    </p>
<ul>
<li>LDM/STM的地址变化方式</li>
</ul>
<table>
<thead>
<tr>
<th>addr_mode</th>
<th>P</th>
<th>U</th>
</tr>
</thead>
<tbody><tr>
<td>D A</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>I A</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>D B</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>I B</td>
<td>1</td>
<td>1</td>
</tr>
</tbody></table>
</li>
</ul>
<img src="https://cdn.megalomania.icu/images/209c22ec4bca761ffc4e1ccf4186e14f.png">

<h4 id="3-堆栈操作"><a href="#3-堆栈操作" class="headerlink" title="3* 堆栈操作"></a>3* 堆栈操作</h4><ul>
<li>堆栈是一种数据结构</li>
<li>先进先出</li>
<li>使用一个堆栈指针的专用寄存器只是当前位置    </li>
<li>ARM 中是R13</li>
<li><strong>根据堆栈指针的位置可以分为</strong>：    <ul>
<li>满堆栈（Full Stack）：    </li>
<li>当堆栈指针指向最后压入堆栈的数据时；</li>
<li>空堆栈（Empty Stack）：    <ul>
<li>当堆栈指针指向下一个将要放入数据的空位置时；</li>
</ul>
</li>
</ul>
</li>
<li><strong>根据堆栈的生成方式，又可以分为递增堆栈和递减堆栈</strong>：    </li>
<li>递增堆栈（Ascending Stack） ：    <ul>
<li>当堆栈由低地址向高地址生成时；</li>
<li>递减堆栈（Decending Stack） ：    <ul>
<li>当堆栈由高地址向低地址生成时；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-块拷贝与栈操作的对应关系"><a href="#4-块拷贝与栈操作的对应关系" class="headerlink" title="4* 块拷贝与栈操作的对应关系"></a>4* 块拷贝与栈操作的对应关系</h4><img src="https://cdn.megalomania.icu/images/2b93e4faa9c07b751567db82537eb141.png">

<h3 id="（7）协处理器指令寻址方式"><a href="#（7）协处理器指令寻址方式" class="headerlink" title="（7）协处理器指令寻址方式"></a>（7）协处理器指令寻址方式</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">opcode</span>&gt;</span></span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="template-variable">&#123;L&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">coproc</span>&gt;</span>，<span class="tag">&lt;<span class="name">CRd</span>&gt;</span>,<span class="tag">&lt;<span class="name">addressing_mode</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>opcode为指令操作码；</li>
<li>coproc为协处理器名称；</li>
<li>addressing_mode为指令寻址模式。</li>
</ul>
</li>
</ul>
<h4 id="1-内存地址索引格式"><a href="#1-内存地址索引格式" class="headerlink" title="1* 内存地址索引格式"></a>1* 内存地址索引格式</h4><img src="https://cdn.megalomania.icu/images/f794660439842458450ed05982d076c7.png">

<ul>
<li>前变址不回写形式：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[<span class="tag">&lt;<span class="name">Rn</span>&gt;</span>，#+/-<span class="tag">&lt;<span class="name">imm_offset8</span>&gt;</span>* 4]</span><br></pre></td></tr></table></figure>
<ul>
<li>前变址回写形式：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[<span class="tag">&lt;<span class="name">Rn</span>&gt;</span>，#+/-<span class="tag">&lt;<span class="name">imm_offset8</span>&gt;</span>* 4]！</span><br></pre></td></tr></table></figure>
<ul>
<li>后变址回写形式：</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;]</span>，#+/-&lt;imm_offset8&gt;* <span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="2-内存地址非索引格式"><a href="#2-内存地址非索引格式" class="headerlink" title="2* 内存地址非索引格式"></a>2* 内存地址非索引格式</h4><ul>
<li>这种指令寻址汇编语法格式为</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">[&lt;Rn&gt;]</span>，&lt;user-define&gt;	</span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/e2b0b2fbc1bc0fdac6e9384afb7ef3b9.png">

<h1 id="四、ARM指令集系统"><a href="#四、ARM指令集系统" class="headerlink" title="四、ARM指令集系统"></a>四、ARM指令集系统</h1><h2 id="1、数据处理指令"><a href="#1、数据处理指令" class="headerlink" title="1、数据处理指令"></a>1、数据处理指令</h2><h3 id="（1）基本数据处理指令"><a href="#（1）基本数据处理指令" class="headerlink" title="（1）基本数据处理指令"></a>（1）基本数据处理指令</h3><ul>
<li>ARM基本的数据处理指可以分为4类：数据传送指令、算术运算指令、逻辑运算指令和比较指令。</li>
<li>ARM基本的数据处理指令汇编指令语法格式：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">opcode</span>&gt;</span></span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">Rd</span>&gt;</span>,<span class="tag">&lt;<span class="name">Rn</span>&gt;</span>,<span class="tag">&lt;<span class="name">operand2</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/3e393384c7605e18637bf2dba9d0fc17.png">

<img src="https://cdn.megalomania.icu/images/bd9c9f1705bf265f1d83c39028ec089a.png">

<h4 id="1-数据传输指令"><a href="#1-数据传输指令" class="headerlink" title="1* 数据传输指令"></a>1* 数据传输指令</h4><h5 id="1-MOV指令"><a href="#1-MOV指令" class="headerlink" title="1. MOV指令"></a>1. MOV指令</h5><ul>
<li>MOV指令的汇编语法格式为</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">MOV</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将第二操作数operand2表示的数据传送到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果或移位情况更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="2-MVN指令"><a href="#2-MVN指令" class="headerlink" title="2. MVN指令"></a>2. MVN指令</h5><ul>
<li>MVN指令的汇编语法格式为</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">MVN</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将第二操作数operand2表示的数据<strong>按位取反</strong>后传送到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果或移位情况更新CPSR中的相应条件标志位。</li>
</ul>
<h4 id="2-算数运算指令"><a href="#2-算数运算指令" class="headerlink" title="2* 算数运算指令"></a>2* 算数运算指令</h4><h5 id="1-ADD加法指令"><a href="#1-ADD加法指令" class="headerlink" title="1. ADD加法指令"></a>1. ADD加法指令</h5><ul>
<li>ADD加法指令的汇编语法格式为</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash">&#123;cond&#125;&#123;S&#125;  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ADD指令将operand2表示的数据与寄存器Rn中的值相加，并把结果传送到目标寄存器<code>&lt;Rd&gt;</code>中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="2-ADC带C标志位的加法指令"><a href="#2-ADC带C标志位的加法指令" class="headerlink" title="2. ADC带C标志位的加法指令"></a>2. ADC带C标志位的加法指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">ADC</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：ADC带C标志位的加法指令将operand2表示的数据与寄存器Rn中的值相加，再加上CPSR中的C条件标志位的值，并把结果传送到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。该指令可以实现两个高于32位的数据相加运算。</li>
</ul>
<h5 id="3-SUB减法指令"><a href="#3-SUB减法指令" class="headerlink" title="3. SUB减法指令"></a>3. SUB减法指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">SUB</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：SUB指令从寄存器Rn中减去operand2表示的数值，并把结果传送到目标寄存器<code>&lt;Rd&gt;</code>中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<blockquote>
<p>注意事项：当指令包含后缀“S”时，如果减法运算有借位，则C=0，否则C=1。</p>
</blockquote>
<h5 id="4-SBC带C标志位的减法指令"><a href="#4-SBC带C标志位的减法指令" class="headerlink" title="4. SBC带C标志位的减法指令"></a>4. SBC带C标志位的减法指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">SBC</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>SBC指令从寄存器<code>&lt;Rn&gt;</code>中减去operand2表示的数值，再减去寄存器CPSR中C条件标志位的反码，并把结果传送到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。该指令可以实现两个高于32位的数据相减运算。</li>
</ul>
<h5 id="5-RSB逆向减法指令"><a href="#5-RSB逆向减法指令" class="headerlink" title="5. RSB逆向减法指令"></a>5. RSB逆向减法指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">RSB</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：RSB指令从第2操作数operand2表示的数值中减去寄存器Rn 值，并把结果传送到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="6-RSC带C标志位的逆向减法指令"><a href="#6-RSC带C标志位的逆向减法指令" class="headerlink" title="6. RSC带C标志位的逆向减法指令"></a>6. RSC带C标志位的逆向减法指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">RSC</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd，Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：RSC指令从operand2表示的数值中减去寄存器Rn 值，再减去寄存器CPSR中 C条件标志位的反码，并把结果传送到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h4 id="3-逻辑运算指令"><a href="#3-逻辑运算指令" class="headerlink" title="3* 逻辑运算指令"></a>3* 逻辑运算指令</h4><h5 id="1-AND与逻辑运算指令"><a href="#1-AND与逻辑运算指令" class="headerlink" title="1. AND与逻辑运算指令"></a>1. AND与逻辑运算指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">AND</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：AND指令将operand2表示的数值与寄存器Rn 的值按位做逻辑与操作，并把结果保存到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="2-ORR或逻辑运算指令"><a href="#2-ORR或逻辑运算指令" class="headerlink" title="2. ORR或逻辑运算指令"></a>2. ORR或逻辑运算指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">ORR</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：ORR指令将operand2表示的数值与寄存器Rn的值按位做逻辑或操作，并把结果保存到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="3-EOR异或逻辑运算指令"><a href="#3-EOR异或逻辑运算指令" class="headerlink" title="3. EOR异或逻辑运算指令"></a>3. EOR异或逻辑运算指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">EOR</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：EOR指令将operand2表示的数值与寄存器Rn的值按位做逻辑异或操作，并把结果保存到目标寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。EOR指令可用于将寄存器中某些位的值取反。</li>
</ul>
<h5 id="4-BIC清除逻辑运算指令"><a href="#4-BIC清除逻辑运算指令" class="headerlink" title="4. BIC清除逻辑运算指令"></a>4. BIC清除逻辑运算指令</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">BIC</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  Rd, Rn, operand2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：BIC指令将寄存器Rn的值与operand2表示的数值的反码按位做逻辑与操作，并把结果保存到目标寄存器Rd中</li>
</ul>
<h4 id="4-比较指令"><a href="#4-比较指令" class="headerlink" title="4* 比较指令"></a>4* 比较指令</h4><ul>
<li>比较指令没有目标寄存器，只用作更新条件标志位，不保存运算结果，指令后缀无需加“S”。在程序设计中，根据操作的结果更新CPSR中相应的条件标志位，后面的指令就可以根据CPSR中相应的条件标志位来判断是否执行。</li>
</ul>
<h5 id="1-CMP相减比较指令"><a href="#1-CMP相减比较指令" class="headerlink" title="1. CMP相减比较指令"></a>1. CMP相减比较指令</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CMP</span>&#123;cond&#125;  Rn, operand<span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：CMP指令将寄存器Rn的值减去operand2表示的数值，根据操作结果和寄存器移位情况更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="2-CMN负数比较指令"><a href="#2-CMN负数比较指令" class="headerlink" title="2. CMN负数比较指令"></a>2. CMN负数比较指令</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">CMN</span>&#123;cond&#125;  Rn, operand<span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：CMN指令将寄存器Rn的值加上operand2表示的数值，根据操作结果和寄存器移位情况更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="3-TST位测试指令"><a href="#3-TST位测试指令" class="headerlink" title="3. TST位测试指令"></a>3. TST位测试指令</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">TST</span>&#123;cond&#125;  Rn, operand<span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：TST指令将寄存器Rn的值与operand2表示的数值按位作逻辑“与”操作，根据操作结果和寄存器移位情况更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="4-TEQ相等测试指令"><a href="#4-TEQ相等测试指令" class="headerlink" title="4. TEQ相等测试指令"></a>4. TEQ相等测试指令</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">TEQ</span>&#123;cond&#125;  Rn, operand<span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>功能：TEQ指令将寄存器Rn的值与operand2表示的数值按位作逻辑“异或”操作，根据操作结果和寄存器移位情况更新CPSR中的相应条件标志位。</li>
</ul>
<h3 id="（2）乘法指令"><a href="#（2）乘法指令" class="headerlink" title="（2）乘法指令"></a>（2）乘法指令</h3><ul>
<li>ARM乘法指令完成2个寄存器中数据的乘法，按照保存结果的数据长度可以分为两类：一类为32位的乘法指令，即乘法操作的结果为32位；另一类为64位的乘法指令，即乘法操作的结果为64位。</li>
</ul>
<h4 id="1-32位乘法指令"><a href="#1-32位乘法指令" class="headerlink" title="1* 32位乘法指令"></a>1* 32位乘法指令</h4><img src="https://cdn.megalomania.icu/images/57f34def6e4eaaab731e00558eeadba2.png">

<h5 id="1-MUL"><a href="#1-MUL" class="headerlink" title="1. MUL"></a>1. MUL</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">MUL</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">     Rd, Rm, Rs</span></span><br></pre></td></tr></table></figure>
<ul>
<li>MUL指令实现两个32位的数（可以为无符号数，也可为有符号数）的乘积（Rm * Rs ）并将结果存放到一个32位的寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="2-MLA"><a href="#2-MLA" class="headerlink" title="2. MLA"></a>2. MLA</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">MLA</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">     Rd, Rm, Rs, Rn </span></span><br></pre></td></tr></table></figure>
<ul>
<li>MLA指令实现两个32位的数（可以为无符号数，也可为有符号数）的乘积，再将乘积（Rm * Rs ）加上第3个操作数Rn，并将结果存放到一个32位的寄存器Rd中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h4 id="2-64位乘法指令"><a href="#2-64位乘法指令" class="headerlink" title="2* 64位乘法指令"></a>2* 64位乘法指令</h4><img src="https://cdn.megalomania.icu/images/60472be9fbe72cca441f812c9586c080.png">

<h5 id="1-UMULL"><a href="#1-UMULL" class="headerlink" title="1. UMULL"></a>1. UMULL</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">UMULL</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  RdLo, RdHi, Rm, Rs </span></span><br></pre></td></tr></table></figure>
<ul>
<li>UMULL指令实现两个32位无符号数的乘积，乘积结果的高32位存放到一个32位的寄存器的RdHi，乘积结果的低32位存放到另一个32位的寄存器的RdLo；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="2-UMLAL"><a href="#2-UMLAL" class="headerlink" title="2. UMLAL"></a>2. UMLAL</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">UMLAL</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  RdLo, RdHi, Rm, Rs </span></span><br></pre></td></tr></table></figure>
<ul>
<li>UMLAL指令将两个32位无符号数的64位乘积结果与由（RdHi： RdLo）表示的64位无符号数相加，加法结果的高32位存放到寄存器RdHi中，加法结果的低32位存放到寄存器RdLo中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="3-SMULL"><a href="#3-SMULL" class="headerlink" title="3. SMULL"></a>3. SMULL</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">SMULL</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  RdLo, RdHi, Rm, Rs </span></span><br></pre></td></tr></table></figure>
<ul>
<li>SMULL指令实现两个32位有符号数的乘积，乘积结果的高32位存放到一个32位的寄存器的RdHi，乘积结果的低32位存放到另一个32位的寄存器的RdLo；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h5 id="4-SMLAL"><a href="#4-SMLAL" class="headerlink" title="4. SMLAL"></a>4. SMLAL</h5><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">SMLAL</span><span class="template-variable">&#123;cond&#125;</span><span class="template-variable">&#123;S&#125;</span><span class="xml">  RdLo, RdHi, Rm, Rs </span></span><br></pre></td></tr></table></figure>
<ul>
<li>SMLAL指令将两个32位有符号数的64位乘积结果与由（RdHi： RdLo）表示的64位无符号数相加，加法结果的高32位存放到寄存器RdHi中，加法结果的低32位存放到寄存器RdLo中；如果指令包含后缀“S”，则根据操作结果更新CPSR中的相应条件标志位。</li>
</ul>
<h3 id="（3）杂类的数据处理指令"><a href="#（3）杂类的数据处理指令" class="headerlink" title="（3）杂类的数据处理指令"></a>（3）杂类的数据处理指令</h3><ul>
<li><p>从ARM V5版本指令系统开始支持杂类的数据处理指令CLZ（Count Leading Zeros，前导零计数指令），用于计算32位寄存器高位中“0”的个数。</p>
<img src="https://cdn.megalomania.icu/images/91ae53905ff16a6de07239cb38a13b1a.png">
</li>
<li><p>指令的汇编语法格式：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">CLZ <span class="tag">&lt;<span class="name">cond</span>&gt;</span> <span class="tag">&lt;<span class="name">Rd</span>&gt;</span>,<span class="tag">&lt;<span class="name">Rm</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>CLZ指令不影响条件码标志。</li>
<li>示例解析：</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span>    <span class="built_in">R4</span>，<span class="meta">#0xAA</span></span><br><span class="line"><span class="keyword">CLZ</span>   <span class="built_in">R2</span>，<span class="built_in">R4</span>		；执行后<span class="built_in">R2</span>中的值为<span class="number">24</span></span><br></pre></td></tr></table></figure>
<h2 id="2、ARM分支指令"><a href="#2、ARM分支指令" class="headerlink" title="2、ARM分支指令"></a>2、ARM分支指令</h2><ul>
<li><p>分支指令用于实现程序流程的跳转，在ARM程序中有两种方法可以实现程序流程的跳转：    </p>
<ol>
<li><p>使用专门的分支指令。</p>
</li>
<li><p>直接向程序计数器PC写入跳转地址值。</p>
</li>
</ol>
</li>
</ul>
<h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><ul>
<li>ARM指令集中的跳转指令可以完成从当前指令向前或向后的32MB的地址空间的跳转，包括以下4条指令：    <ul>
<li>B 跳转指令</li>
<li>BL 带返回的跳转指令</li>
<li>BLX 带返回和状态切换的跳转指令</li>
<li>BX 带状态切换的跳转指令</li>
</ul>
</li>
</ul>
<blockquote>
<p>通过向程序计数器PC写入跳转地址值，可以实现在4GB的地址空间中的任意跳转，在跳转之前结合使用MOV   LR，PC等类似指令，能够保存程序的返回地址值，从而实现在4GB连续地址空间的子程序调用。</p>
</blockquote>
<h4 id="1-分支指令B"><a href="#1-分支指令B" class="headerlink" title="1* 分支指令B"></a>1* 分支指令B</h4><ul>
<li>分支指令B可以实现跳转到指定的地址执行程序。</li>
<li>指令的汇编语法格式如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">B&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125;   <span class="tag">&lt;<span class="name">target_address</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/eecfd50b6295a43b843813ebfb1142d8.png">

<blockquote>
<p>在指令的汇编语法中target_address这个目标地址的计算方法是：将指令中的24位带符号的补码立即数扩展为32位；将此32位数左移两位将得到的值写入到程序计数器PC中，即跳转到目标地址。能够实现跳转的范围为-32MB~+32MB。</p>
</blockquote>
<ul>
<li>B指令是最简单的跳转指令。一旦遇到一个 B 指令，ARM 处理器将立即跳转到给定的目标地址，从那里继续执行。注意存储在跳转指令中的实际值是相对当前PC值的一个偏移量，而不是一个绝对地址，它的值由汇编器来计算。它是24位有符号数，左移两位后有符号扩展为 32 位，表示的有效偏移为 26 位(前后32MB的地址空间)。如：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">B</span>	Label	  <span class="comment">/*程序无条件跳转到标号Label处执行*/</span></span><br></pre></td></tr></table></figure>
<h4 id="2-带链接的分支指令BL"><a href="#2-带链接的分支指令BL" class="headerlink" title="2* 带链接的分支指令BL"></a>2* 带链接的分支指令BL</h4><ul>
<li>带链接的分支指令BL可以实现跳转到指定的地址执行程序，同时BL指令还将程序计数器PC的值保存到LR寄存器中。</li>
<li>指令的汇编语法格式如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">BL&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125;   <span class="tag">&lt;<span class="name">target_address</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/6a763e6485ac8a200fda501b195f6288.png">

<blockquote>
<p>L决定是否保存返回地址。当有L时，指令将下一条指令地址保存到LR寄存器中；当无L时同B指令仅执行跳转，当前PC寄存器的值将不会保存到LR寄存器中。从指令的编码可以看出，B与BL指令的唯一区别是bit[24]，当bit[24]=0是B指令，当bit[24]=1是BL指令。</p>
</blockquote>
<blockquote>
<p>BL跳转指令编码中signed_immed_24的含义同B指令。</p>
</blockquote>
<h4 id="3-带状态切换的跳转指令-BX"><a href="#3-带状态切换的跳转指令-BX" class="headerlink" title="3* 带状态切换的跳转指令 BX"></a>3* 带状态切换的跳转指令 BX</h4><ul>
<li>BX指令跳转到指令中所指定的目标地址，目标地址处的指令既可以是ARM指令，也可以是Thumb指令。</li>
<li>指令的汇编语法格式如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">BX&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125;   <span class="tag">&lt;<span class="name">Rm</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/7961aa7fa8390148da2845159ea16e37.png">

<blockquote>
<p>BX指令跳转到Rm指定的地址执行程序，如果Rm的bit[0]为1，则跳转时自动将CPSR中的标志位T置位，目标地址的代码为Thumb代码；如果Rm的bit[0]为0，则跳转时自动将CPSR中的T标志位清0，目标地址的代码为ARM代码。</p>
</blockquote>
<blockquote>
<p>如果 LSB=1, 则进入 Thumb 指令处理模式； 如果 LSB=0, 则进入 ARM 指令处理模式。</p>
</blockquote>
<h4 id="4-带链接和状态切换的跳转指令-BLX"><a href="#4-带链接和状态切换的跳转指令-BLX" class="headerlink" title="4* 带链接和状态切换的跳转指令 BLX"></a>4* 带链接和状态切换的跳转指令 BLX</h4><ul>
<li>BLX指令从ARM指令集跳转到指令中所指定的目标地址，并将处理器的工作状态由ARM状态切换到Thumb状态，该指令同时将程序计数器PC的当前内容保存到链接寄存器R14中。</li>
</ul>
<h5 id="1-由程序标号给出目标地址"><a href="#1-由程序标号给出目标地址" class="headerlink" title="1. 由程序标号给出目标地址"></a>1. 由程序标号给出目标地址</h5><ul>
<li>这种形式的BLX指令汇编语法格式如下：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BLX</span>   &lt;target_address&gt;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/bdd43648e2bf084e98762ce56c8a1024.png">

<blockquote>
<p>目标地址target_address的计算方法：先对指令中定义的有符号24位偏移量用符号位扩展为32位，并将该32位数左移2位，然后将其加到程序计数器PC中，H位（bit[24]）加到目标地址的第1位（bit[1]），目标地址总是Thumb指令。跳转的范围为-32MB~+32MB。</p>
</blockquote>
<h5 id="2-寄存器的内容作为目标地址"><a href="#2-寄存器的内容作为目标地址" class="headerlink" title="2. 寄存器的内容作为目标地址"></a>2. 寄存器的内容作为目标地址</h5><ul>
<li>这种形式的BLX指令汇编语法格式如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">BLX&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125;   <span class="tag">&lt;<span class="name">Rm</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/cd8f1c506558c2cd8151b01c576ee5db.png">

<blockquote>
<p>BLX指令跳转到Rm指定的地址执行程序，如果Rm的bit[0]为1，则跳转时自动将CPSR中的标志位T置位，目标地址的代码为Thumb代码；如果Rm的bit[0]为0，则跳转时自动将CPSR中的T标志位清0，目标地址的代码为ARM代码。</p>
</blockquote>
<h2 id="3、加载-存储指令"><a href="#3、加载-存储指令" class="headerlink" title="3、加载/存储指令"></a>3、加载/存储指令</h2><ul>
<li>用于操作32位的字类型数据以及8位无符号的字节类型数据；</li>
<li>用于操作16位半字类型数据和8位的有符号字节类型数据。</li>
</ul>
<h3 id="（1）加载-存储字、无符号字节指令"><a href="#（1）加载-存储字、无符号字节指令" class="headerlink" title="（1）加载/存储字、无符号字节指令"></a>（1）加载/存储字、无符号字节指令</h3><h4 id="1-LDR-STR指令"><a href="#1-LDR-STR指令" class="headerlink" title="1* LDR/STR指令"></a>1* LDR/STR指令</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">    Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br><span class="line"><span class="xml">STR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">    Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>LDR指令用于从内存中将一个32位的字数据读取到指令中的目标寄存器中。对于小端内存模式，指令读取的低地址字节数据存放在目标寄存器的低8位（bits[7：0]）；对于大端的内存模式，指令读取的低地址字节数据存放在目标寄存器的高8位（bits[31：24]）。</li>
<li>STR指令用于将一个32位寄存器中的字数据写入到指令中指定的内存单元。对于小端内存模式，寄存器的低8位存放在低地址字节单元；对于大端内存模式，寄存器的低8位存放在高地址字节单元。</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">T    Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br><span class="line"><span class="xml">STR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">T    Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>LDRT/STRT是用户模式下的字数据加载/存储指令，当在特权极的处理器模式下使用本指令时，内存系统将该操作当作一般用户模式下的内存访问操作。这种指令在用户模式下使用无效，在特权模式下只能使用前变址形式。</p>
<img src="https://cdn.megalomania.icu/images/94d0967680d12be1b67cba0d140963ad.png">

<img src="https://cdn.megalomania.icu/images/7af1d646702ac2c315845401eddbab1b.png">

</li>
</ul>
<h4 id="2-LDRB-STRB指令"><a href="#2-LDRB-STRB指令" class="headerlink" title="2* LDRB/STRB指令"></a>2* LDRB/STRB指令</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">B    Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br><span class="line"><span class="xml">STR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">B    Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>LDRB指令用于从内存中将一个8位的字节数据读取到指令中的目标寄存器低8位（bits[7:0]）中，寄存器的高24位（bits[31:8]）清零。</li>
<li>STRB指令用于将一个寄存器的低8位（bits[7:0]）写入到指令中指定的内存地址字节单元。</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">BT  Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br><span class="line"><span class="xml">STR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">BT   Rd，<span class="tag">&lt;<span class="name">addressing</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>LDRBT/STRBT是用户模式下的字数据加载/存储指令，当在特权极的处理器模式下使用本指令时，内存系统将该操作当作一般用户模式下的内存访问操作。这种指令在用户模式下使用无效，在特权模式下只能使用前变址形式。</p>
<img src="https://cdn.megalomania.icu/images/e9f3479964a76a3a61e3a33758735fce.png">

<img src="https://cdn.megalomania.icu/images/7bb4a8c3da26fc64cd50dc03ff7decac.png">

</li>
</ul>
<h3 id="（2）半字、有符号字节访问指令"><a href="#（2）半字、有符号字节访问指令" class="headerlink" title="（2）半字、有符号字节访问指令"></a>（2）半字、有符号字节访问指令</h3><ul>
<li>半字数据访问指令用于内存中的数据与寄存器低16位数据进行操作，有符号字节访问指令可实现向寄存器加载8位的有符号字节数据。</li>
<li>对于向寄存器加载无符号半字数据，寄存器的高16位bits[31:16]清零；</li>
<li>对于向寄存器加载有符号半字数据，寄存器的高16位bits[31:16]用符号位扩展为32位；</li>
<li>对于向寄存器加载有符号字节数据，寄存器的高24位bits[31:8]用符号位扩展为32位。<img src="https://cdn.megalomania.icu/images/c8809486801c45f943988a4cf7960ad8.png">

</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">H   Rd，<span class="tag">&lt;<span class="name">addressing</span> &gt;</span></span></span><br><span class="line"><span class="xml">STR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">H   Rd，<span class="tag">&lt;<span class="name">addressing</span> &gt;</span></span></span><br><span class="line"><span class="xml">LDR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">SH  Rd，<span class="tag">&lt;<span class="name">addressing</span> &gt;</span> </span></span><br><span class="line"><span class="xml">LDR</span><span class="template-variable">&#123;cond&#125;</span><span class="xml">SB  Rd, <span class="tag">&lt;<span class="name">addressing</span> &gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>S、H取值含义</p>
<img src="https://cdn.megalomania.icu/images/987442d923b2bcb685d157ae92543b1d.png">
</li>
<li><p>ARM微处理器所支持批量数据加载/存储指令可以一次性实现一片连续的存储器单元和多个寄存器之间进行传送数据。</p>
</li>
<li><p>批量数据加载指令用于将一片连续的存储器中的数据传送到多个寄存器中，批量数据存储指令能够实现将多个寄存器中的内容一次性的存放到一片连续的存储器中。</p>
</li>
</ul>
<h2 id="4、批量加载-存储指令"><a href="#4、批量加载-存储指令" class="headerlink" title="4、批量加载/存储指令"></a>4、批量加载/存储指令</h2><h3 id="（1）基本批量字数据加载-存储指令"><a href="#（1）基本批量字数据加载-存储指令" class="headerlink" title="（1）基本批量字数据加载/存储指令"></a>（1）基本批量字数据加载/存储指令</h3><ul>
<li>批量加载：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">LDM </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;<span class="params">&lt;addr_mode&gt;</span> <span class="params">&lt;Rn&gt;</span> &#123;!&#125;, <span class="params">&lt;registers&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>批量存储：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">STM </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;<span class="params">&lt;addr_mode&gt;</span> <span class="params">&lt;Rn&gt;</span> &#123;!&#125;, <span class="params">&lt;registers&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/559ebfe2bfad7720a61b5d7df72429d9.png"></p>
<p>​    <img src="https://cdn.megalomania.icu/images/7e7a52b0ed4eae5a5c959c578f016da2.png"></p>
<ul>
<li>注意事项：   <ul>
<li>Rn不允许为程序计数器PC（R15）</li>
<li>指令中寄存器和连续内存地址单元的对应关系：编号低的寄存器对应内存低地址单元，编号高的寄存器对应内存高地址单元。</li>
<li>如果指令中基址寄存器<code>&lt;Rn&gt;</code>在寄存器列表<code>&lt;registers&gt;</code>中，而且指令中寻址方式指定指令执行后更新基址寄存器<code>&lt;Rn&gt;</code> 的值，则指令执行会产生不可预知的结果。</li>
</ul>
</li>
</ul>
<h3 id="（2）用户模式下的批量字数据加载-存储指令"><a href="#（2）用户模式下的批量字数据加载-存储指令" class="headerlink" title="（2）用户模式下的批量字数据加载/存储指令"></a>（2）用户模式下的批量字数据加载/存储指令</h3><ul>
<li>用户模式下的批量字数据加载/存储指令操作实现的操作是：即使处理器工作在特权模式下，存储系统也将访问看成是处理器在用户模式下，因此所加载/存储的寄存器组为用户模式下的寄存器。该指令寄存器列表中不包含程序计数器PC，不允许对基地址寄存器回写操作。</li>
<li>用户模式下的批量字数据加载/存储指令汇编语法格式为</li>
<li>批量加载：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">LDM </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;<span class="params">&lt;addr_mode&gt;</span> <span class="params">&lt;Rn&gt;</span> , <span class="params">&lt;registers_without_pc&gt;</span>^</span><br></pre></td></tr></table></figure>
<ul>
<li>批量存储：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">STM </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;<span class="params">&lt;addr_mode&gt;</span> <span class="params">&lt;Rn&gt;</span> , <span class="params">&lt;registers_without_pc&gt;</span>^</span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/390c136c780ea0b4566b96743523edbb.png"></p>
<h3 id="（3）带PSR操作的批量字数据加载指令"><a href="#（3）带PSR操作的批量字数据加载指令" class="headerlink" title="（3）带PSR操作的批量字数据加载指令"></a>（3）带PSR操作的批量字数据加载指令</h3><ul>
<li>在带PSR操作的批量字数据加载指令中，程序计数器PC包含在指令寄存器列表中。</li>
<li>该指令将数据从连续的内存单元中读取到指令中寄存器列表中的各寄存器中。它同时将目前处理器模式对应的SPSR寄存器内容复制到CPSR寄存器中。</li>
<li>批量加载：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">LDM </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;<span class="params">&lt;addressing_mode&gt;</span> <span class="params">&lt;Rn&gt;</span> &#123;!&#125;, <span class="params">&lt;registers_with_pc&gt;</span>^</span><br></pre></td></tr></table></figure>
<ul>
<li>批量存储：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">STM </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;<span class="params">&lt;addressing_mode&gt;</span> <span class="params">&lt;Rn&gt;</span> &#123;!&#125;, <span class="params">&lt;registers_with_pc&gt;</span>^</span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/1e51f3f42d8d940fb8f55a849481f795.png"></p>
<h2 id="5、交换指令"><a href="#5、交换指令" class="headerlink" title="5、交换指令"></a>5、交换指令</h2><ul>
<li>ARM指令支持原子操作，主要是用来对信号量的操作，因为信号量操作的要求是作原子操作，即在一条指令中完成信号量的读取和修改操作。</li>
</ul>
<h3 id="（1）字数据交换指令"><a href="#（1）字数据交换指令" class="headerlink" title="（1）字数据交换指令"></a>（1）字数据交换指令</h3><ul>
<li>SWP是对字数据操作指令，用于将一个寄存器Rn为地址的内存字数据单元的内容读取到一个寄存器<code>&lt;Rd&gt;</code>中，同时将另一个寄存器Rm的内容写入到该内存单元中。</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">SWP&#123;&lt;cond&gt;&#125; &lt;Rd&gt;, &lt;Rm&gt;, <span class="meta">[&lt;Rn&gt;]</span></span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/b42aae6bbcefe8da7ac83384f1e85a37.png"></p>
<h3 id="（2）字节数据交换指令"><a href="#（2）字节数据交换指令" class="headerlink" title="（2）字节数据交换指令"></a>（2）字节数据交换指令</h3><ul>
<li>SWPB是对字节操作指令，用于将一个寄存器Rn为内存地址的字节数据单元的内容读取到一个寄存器Rd中，寄存器Rd的高24设置为0，同时将另一个寄存器Rm的低8位数值写入到该内存单元中</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line">SWP&#123;&lt;cond&gt;&#125;&#123;B&#125;  &lt;Rd&gt;, &lt;Rm&gt;,<span class="meta">[&lt;Rn&gt;]</span></span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/68e603b03a4dec85dae66b34ecc563b1.png"></p>
<h2 id="6、程序状态寄存器PSR访问指令"><a href="#6、程序状态寄存器PSR访问指令" class="headerlink" title="6、程序状态寄存器PSR访问指令"></a>6、程序状态寄存器PSR访问指令</h2><h3 id="（1）读程序状态寄存器指令"><a href="#（1）读程序状态寄存器指令" class="headerlink" title="（1）读程序状态寄存器指令"></a>（1）读程序状态寄存器指令</h3><ul>
<li>MRS指令用于将状态寄存器的内容传送到通用寄存器中。这是程序获得程序状寄存器PSR数据的唯一方法。</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">MRS </span>&#123;<span class="params">&lt;cond&gt;</span>&#125; <span class="params">&lt;Rd&gt;</span>,  CPSR</span><br><span class="line"><span class="class">MRS </span>&#123;<span class="params">&lt;cond&gt;</span>&#125; <span class="params">&lt;Rd&gt;</span>,  SPSR</span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/2efada8e1b44c9192668f34e536e044d.png"></p>
<h3 id="（2）写程序状态寄存器指令"><a href="#（2）写程序状态寄存器指令" class="headerlink" title="（2）写程序状态寄存器指令"></a>（2）写程序状态寄存器指令</h3><ul>
<li>MSR指令用于将通用寄存器的内容或一个立即数传送到程序状态寄存器中，实现对程序状态寄存器的修改。</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">MSR </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;	 CPSR_<span class="params">&lt;fields&gt;</span>,  <span class="params">&lt; operand2&gt;</span>   </span><br><span class="line"><span class="class">MSR </span>&#123;<span class="params">&lt;cond&gt;</span>&#125;	 SPSR_<span class="params">&lt;fields&gt;</span>,  <span class="params">&lt; operand2&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/65ca09d4bb9e1d58afdf7790e5079098.png"></p>
<ul>
<li>fields设置状态寄存器中需要操作的位域。状态寄存器分为4个8位的域：        <ul>
<li>bits[31:24]为条件标志位域，用f表示；</li>
<li>bits[23:16]状态位域，用s表示；</li>
<li>bits[15:8]扩展位域，用x表示；</li>
</ul>
</li>
<li>bits[7:0]控制位域，用c表示；</li>
<li>第二操作数operand2的构成形式有以下两种形式：    <ul>
<li><code>&lt;immediate&gt;</code>为将要传送到状态寄存器中的立即数；</li>
</ul>
</li>
<li><code>&lt;Rm&gt;</code>寄存器包含将要传送到状态寄存器中的数据。</li>
<li>R（bit[22]）为0时，写CPSR；R（bit[22]）为1时，写SPSR。</li>
</ul>
<h2 id="7、协处理器操作指令"><a href="#7、协处理器操作指令" class="headerlink" title="7、协处理器操作指令"></a>7、协处理器操作指令</h2><ul>
<li>协处理器操作是ARM处理器对协处器进行管理，也就是ARM处理器的相关操作通过发送指令给协处理器，让协处理器来完成。ARM微处理器最多可支持16个协处理器，用于各种协处理操作。</li>
</ul>
<h3 id="（1）协处理器数据操作指令"><a href="#（1）协处理器数据操作指令" class="headerlink" title="（1）协处理器数据操作指令"></a>（1）协处理器数据操作指令</h3><ul>
<li>协处理器数据操作指令CDP用法：ARM处理器通知ARM协处理器执行特定的操作，若协处理器不能成功完成特定的操作，则产生未定义指令异常。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">CDP&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125; <span class="tag">&lt;<span class="name">Cp_num</span>&gt;</span>,<span class="tag">&lt;<span class="name">opcode_1</span>&gt;</span>,<span class="tag">&lt;<span class="name">CRd</span>&gt;</span>,<span class="tag">&lt;<span class="name">CRn</span>&gt;</span>,<span class="tag">&lt;<span class="name">CRm</span>&gt;</span>,&#123;<span class="tag">&lt;<span class="name">opcode_2</span>&gt;</span>&#125; </span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/5d4f1251fdc4903ec3afbe3cc7297337.png"></p>
<ul>
<li>cond为指令执行的条件码。当<code>&lt;cond&gt;</code>忽略时指令为无条件执行。</li>
<li>CRd为目标寄存器的协处理器寄存器。</li>
<li>CRn为存放第1个源操作数的协处理器寄存器。</li>
<li>CRm为存放第2个源操作数的协处理器寄存器。</li>
<li>Cp_num为协处理器的编码。</li>
<li>opcode1为协处理器将执行操作的第一操作码。</li>
<li>opcode2为协处理器将执行操作的第二操作码。（可选）</li>
</ul>
<h3 id="（2）协处理器加载-存储指令"><a href="#（2）协处理器加载-存储指令" class="headerlink" title="（2）协处理器加载/存储指令"></a>（2）协处理器加载/存储指令</h3><ul>
<li>协处理器的加载/存储指令可以用来实现ARM处理器与协处理器之间的数据传输，共有两条：协处理器数据加载指令LDC和协处理器数据存储指令STC。</li>
<li>协处理器的加载存储指令汇编语法格式如下：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">LDC</span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="template-variable">&#123;L&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">coproc</span>&gt;</span>，<span class="tag">&lt;<span class="name">CRd</span>&gt;</span>，<span class="tag">&lt;<span class="name">addressing_mode</span>&gt;</span></span></span><br><span class="line"><span class="xml">STC</span><span class="template-variable">&#123;&lt;cond&gt;&#125;</span><span class="template-variable">&#123;L&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">coproc</span>&gt;</span>，<span class="tag">&lt;<span class="name">CRd</span>&gt;</span>，<span class="tag">&lt;<span class="name">addressing_mode</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/3a8f647629aa62b71a8fc2a38ae9a7a0.png"></p>
<ul>
<li>Rn为ARM处理器的通用寄存器，它用作基地址寄存器。</li>
<li>需要注意的是，汇编语法格式中的L是表示传输的数据为长整数，其对应指令编码中的“N”。而指令二进制编码中的“L”是用来区别LDC和STC指令。</li>
</ul>
<h4 id="1-协处理器数据加载指令LDC"><a href="#1-协处理器数据加载指令LDC" class="headerlink" title="1* 协处理器数据加载指令LDC"></a>1* 协处理器数据加载指令LDC</h4><ul>
<li>LDC指令用于将一系列连续的内存单元的数据读取到协处理器的寄存器中，并由协处理器来决定传输的字数。如果协处理器不能成功的执行该操作，将产生未定义的指令异常中断。<br>eg.</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LDC</span>   P<span class="number">3</span>，CR<span class="number">4</span>，[R<span class="number">0</span>]	；将ARM处理器的寄存器R<span class="number">0</span>所指向的存储器中的字数据传送到协处理器P<span class="number">3</span>的CR<span class="number">4</span> 寄存器中</span><br></pre></td></tr></table></figure>
<h4 id="2-协处理器数据存储指令STC"><a href="#2-协处理器数据存储指令STC" class="headerlink" title="2* 协处理器数据存储指令STC"></a>2* 协处理器数据存储指令STC</h4><ul>
<li>STC指令将协处理器的寄存器中的数据写入到一系列连续的内存单元中，并由协处理器来决定传输的字数。如果协处理器不能成功的执行该操作，将产生未定义指令异常中断。</li>
</ul>
<h3 id="（3）ARM寄存器与协处理器寄存器数据传输指令"><a href="#（3）ARM寄存器与协处理器寄存器数据传输指令" class="headerlink" title="（3）ARM寄存器与协处理器寄存器数据传输指令"></a>（3）ARM寄存器与协处理器寄存器数据传输指令</h3><ul>
<li><p>ARM寄存器与协处理器寄存器数据传输指令用来实现ARM通用寄存器与协处理器寄存器之间的数据传输，共有两条：    1. ARM寄存器到协处理器寄存器的数据传送指令MCR</p>
<ol start="2">
<li>协处理器寄存器到ARM寄存器的数据传送指令MRC。</li>
</ol>
</li>
<li><p>ARM寄存器与协处理器寄存器数据传输指令汇编语法格式如下：</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">MCR&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125; <span class="tag">&lt;<span class="name">Cp_num</span>&gt;</span>,<span class="tag">&lt;<span class="name">opcode1</span>&gt;</span>,<span class="tag">&lt;<span class="name">Rd</span>&gt;</span>,<span class="tag">&lt;<span class="name">CRn</span>&gt;</span>,<span class="tag">&lt;<span class="name">CRm</span>&gt;</span>&#123;,<span class="tag">&lt;<span class="name">opcode2</span>&gt;</span>&#125;   </span><br><span class="line">MRC&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125; <span class="tag">&lt;<span class="name">Cp_num</span>&gt;</span>,<span class="tag">&lt;<span class="name">opcode1</span>&gt;</span>,<span class="tag">&lt;<span class="name">Rd</span>&gt;</span>,<span class="tag">&lt;<span class="name">CRn</span>&gt;</span>,<span class="tag">&lt;<span class="name">CRm</span>&gt;</span>&#123;,<span class="tag">&lt;<span class="name">opcode2</span>&gt;</span>&#125; </span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/e508ec5e3f2e17ed5b71d4cb881641fb.png"></p>
<p>​    <img src="https://cdn.megalomania.icu/images/37b2a4f06f3391dac9232e681cfa41f0.png"></p>
<h4 id="1-ARM寄存器到协处理器寄存器的数据传送指令MCR"><a href="#1-ARM寄存器到协处理器寄存器的数据传送指令MCR" class="headerlink" title="1* ARM寄存器到协处理器寄存器的数据传送指令MCR"></a>1* ARM寄存器到协处理器寄存器的数据传送指令MCR</h4><ul>
<li>MCR指令将ARM处理器的寄存器中的数据传送到协处理器的寄存器中。如果协处理器不能成功的执行该操作，将产生未定义的指令异常中断。<br>eg.</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MCR</span>  p<span class="number">6</span>，<span class="number">2</span>，R<span class="number">0</span>，CR<span class="number">1</span>，CR<span class="number">2</span>，<span class="number">4</span>     ；指令将ARM寄存器R<span class="number">0</span>中数据传送到协处理器p<span class="number">6</span>的寄存器中，其中R<span class="number">0</span>是存放源操作数的ARM寄存器，CR<span class="number">1</span>和CR<span class="number">2</span>是作为目标寄存器的协处理器寄存器，操作码<span class="number">1</span>为<span class="number">2</span>，操作码<span class="number">2</span>为<span class="number">4</span></span><br></pre></td></tr></table></figure>
<h4 id="2-协处理器寄存器到ARM寄存器的数据传送指令MRC"><a href="#2-协处理器寄存器到ARM寄存器的数据传送指令MRC" class="headerlink" title="2* 协处理器寄存器到ARM寄存器的数据传送指令MRC"></a>2* 协处理器寄存器到ARM寄存器的数据传送指令MRC</h4><ul>
<li>MRC指令将协处理器的寄存器中的数据传送到ARM处理器的寄存器中。如果协处理器不能成功的执行该操作，将产生未定义的指令异常中断<br>eg.</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">MRC</span>   p<span class="number">10</span>，<span class="number">3</span>，R<span class="number">3</span>，CR<span class="number">3</span>，CR<span class="number">4</span>，<span class="number">6</span>   ； 指令将协处理器p<span class="number">10</span>寄存器中的数据传送到ARM寄存器R<span class="number">3</span>中，其中R<span class="number">3</span>是存放目标操作数的ARM寄存器，CR<span class="number">3</span>和CR<span class="number">4</span>是作为目标寄存器的协处理器寄存器，操作码<span class="number">1</span>为<span class="number">3</span>，操作码<span class="number">2</span>为<span class="number">6</span> </span><br></pre></td></tr></table></figure>
<h2 id="8、异常产生指令"><a href="#8、异常产生指令" class="headerlink" title="8、异常产生指令"></a>8、异常产生指令</h2><ul>
<li><p>ARM处理器所支持的异常产生指令有两条：    </p>
<ol>
<li><p>软中断指令SWI</p>
</li>
<li><p>断点调试指令BKPT（用于ARM V5及以上的版本）</p>
</li>
</ol>
</li>
</ul>
<h3 id="（1）软中断指令"><a href="#（1）软中断指令" class="headerlink" title="（1）软中断指令"></a>（1）软中断指令</h3><ul>
<li>SWI(SoftWare Interrupt)指令用于产生软件中断，它将处理器置于监控模式(SVC)，从地址0x08开始执行指令。</li>
<li>ARM通过这种机制实现用户模式对操作系统中特权模式的程序调用，也就是使用户程序调用操作系统的系统程序成为可能。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SWI&#123;<span class="tag">&lt;<span class="name">cond</span>&gt;</span>&#125; <span class="tag">&lt;<span class="name">immed_24</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/0e04e6a0091e2ec1d6c44a927c75ee0a.png"></p>
<ul>
<li>操作系统在SWI的异常处理程序中提供相应的系统服务，指令中24位的立即数指定用户程序调用系统例程的类型，相关参数通过通用寄存器传递。</li>
<li>执行过程：   <ul>
<li>将SWI后面指令地址保存到R14_svc;</li>
<li>将CPSR保存到SPSR_svc;</li>
<li>进入监控模式,将CPSR[4:0]设置为0b10011的将CPSR[7]设置为[1],禁止IRQ；</li>
<li>将PC设置为0x08,并且开始执行那里的指令。</li>
<li>返回时：MOVS PC，R14</li>
</ul>
</li>
</ul>
<h3 id="（2）断点中断指令"><a href="#（2）断点中断指令" class="headerlink" title="（2）断点中断指令"></a>（2）断点中断指令</h3><ul>
<li>BKPT (BreakPoinT)指令产生软件断点中断，可用于程序的调试。当BKPT指令执行时，处理器停止执行下面的指令并进入相应的BKPT入口程序</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BKPT</span>	 &lt;immed_<span class="number">16</span>&gt; </span><br></pre></td></tr></table></figure>
<p>​    <img src="https://cdn.megalomania.icu/images/6293f134534a8c9804828dc247d05074.png"></p>
<ul>
<li>immed_16为16位的立即数，此立即数被调试软件用来保存额外的断点信息。</li>
</ul>
<h1 id="五、ARM汇编伪指令与伪操作"><a href="#五、ARM汇编伪指令与伪操作" class="headerlink" title="五、ARM汇编伪指令与伪操作"></a>五、ARM汇编伪指令与伪操作</h1><h2 id="1、汇编语言伪指令"><a href="#1、汇编语言伪指令" class="headerlink" title="1、汇编语言伪指令"></a>1、汇编语言伪指令</h2><ul>
<li>伪指令是ARM处理器支持的汇编语言程序里的特殊助记符，它不在处理器运行期间由机器执行,只是在汇编时将被合适的机器指令代替成ARM或Thumb指令,从而实现真正的指令操作。</li>
</ul>
<h3 id="（1）伪指令的意义"><a href="#（1）伪指令的意义" class="headerlink" title="（1）伪指令的意义"></a>（1）伪指令的意义</h3><ul>
<li>伪指令不是指令，伪指令和指令的根本区别是经过编译后会不会生成机器码。</li>
<li>伪指令的意义在于指导编译过程。</li>
<li>伪指令是和具体的编译器相关的</li>
</ul>
<h3 id="（2）汇编中的一些符号"><a href="#（2）汇编中的一些符号" class="headerlink" title="（2）汇编中的一些符号"></a>（2）汇编中的一些符号</h3><ul>
<li>@用来做注释。可以在行首也可以在代码后面同一行直接跟，和C语言中//类似</li>
<li>#做注释，一般放在行首，表示这一行都是注释而不是代码。</li>
<li>：以冒号结尾的是标号</li>
<li>. 点号在gnu汇编中表示当前指令的地址</li>
<li>#立即数前面要加#或$，表示这是个立即数</li>
</ul>
<h3 id="（3）常用伪指令"><a href="#（3）常用伪指令" class="headerlink" title="（3）常用伪指令"></a>（3）常用伪指令</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">.global</span> _start		@ 给_start外部链接属性</span><br><span class="line"><span class="string">.section</span> <span class="string">.text</span>		@ 指定当前段为代码段</span><br><span class="line"><span class="string">.ascii</span> <span class="string">.byte</span> <span class="string">.short</span> <span class="string">.long</span> <span class="string">.word</span> </span><br><span class="line"><span class="string">.quad</span> <span class="string">.float</span> <span class="string">.string</span> @ 定义数据</span><br><span class="line"><span class="string">.align</span> 4			@ 以16字节对齐</span><br><span class="line"><span class="string">.balignl</span> 16 0xabcdefgh 	@ 16字节对齐填充</span><br><span class="line"><span class="string">.equ</span>			@ 类似于C中宏定义</span><br><span class="line"><span class="string">.end</span>			@标识文件结束</span><br><span class="line"><span class="string">.include</span>			@ 头文件包含</span><br><span class="line"><span class="string">.arm</span> / <span class="string">.code32</span>	@声明以下为arm指令</span><br><span class="line"><span class="string">.thumb</span> / <span class="string">.code16</span>	@声明以下为thubm指令</span><br></pre></td></tr></table></figure>
<h3 id="（4）ARM汇编语言伪指令"><a href="#（4）ARM汇编语言伪指令" class="headerlink" title="（4）ARM汇编语言伪指令"></a>（4）ARM汇编语言伪指令</h3><h4 id="1-大范围地址读取伪指令LDR"><a href="#1-大范围地址读取伪指令LDR" class="headerlink" title="1* 大范围地址读取伪指令LDR"></a>1* 大范围地址读取伪指令LDR</h4><ul>
<li>LDR伪指令将一个32位的常数或者一个地址值读取到寄存器中，可以看作是加载寄存器的内容。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">LDR&#123;cond&#125; 	<span class="keyword">register</span> , = expression </span><br></pre></td></tr></table></figure>
<ul>
<li>如果加载的常数符合MOV或MVN指令立即数的要求，则用MOV或MVN指令替代LDR伪指令。</li>
<li>如果加载的常数不符合MOV或MVN指令立即数的要求，汇编器将常量放入内存文字池，并使用一条程序相对偏移的LDR指令从内存文字池读出常量。</li>
</ul>
<blockquote>
<p>文字池：文字池的本质就是ARM汇编语言代码节中的一块用来存放常量数据而非可执行代码的内存块。</p>
</blockquote>
<h4 id="2-中等范围地址读取伪指令ADRL"><a href="#2-中等范围地址读取伪指令ADRL" class="headerlink" title="2* 中等范围地址读取伪指令ADRL"></a>2* 中等范围地址读取伪指令ADRL</h4><ul>
<li>它将基于PC相对偏移的地址值或基于寄存器相对偏移的地址值读取到寄存器中。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ADRL&#123;cond&#125; 	<span class="keyword">register</span> , = expression</span><br></pre></td></tr></table></figure>
<ul>
<li>汇编器在处理源程序时，ADRL伪指令被两条具有ADRL等同功能的ARM指令(通常用ADD或SUB指令)替代。</li>
<li>如果不能用两条指令实现ADRL伪指令的功能，则编译器报告错误，编译失败。</li>
</ul>
<h4 id="3-小范围地址读取伪指令ADR"><a href="#3-小范围地址读取伪指令ADR" class="headerlink" title="3* 小范围地址读取伪指令ADR"></a>3* 小范围地址读取伪指令ADR</h4><ul>
<li>它将基于PC相对偏移的地址值或基于寄存器相对偏移的地址值读取到寄存器中。当地址是字节对齐时，取值范围为-255~+255</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ADR&#123;cond&#125; 	<span class="keyword">register</span> , = expression</span><br></pre></td></tr></table></figure>
<h4 id="4-空操作伪指令NOP"><a href="#4-空操作伪指令NOP" class="headerlink" title="4* 空操作伪指令NOP"></a>4* 空操作伪指令NOP</h4><ul>
<li>NOP是空操作伪指令，在汇编时将会被替代成ARM中的空操作 .</li>
</ul>
<h3 id="（5）Thumb汇编语言伪指令"><a href="#（5）Thumb汇编语言伪指令" class="headerlink" title="（5）Thumb汇编语言伪指令"></a>（5）Thumb汇编语言伪指令</h3><h4 id="1-大范围地址读取伪指令LDR-1"><a href="#1-大范围地址读取伪指令LDR-1" class="headerlink" title="1* 大范围地址读取伪指令LDR"></a>1* 大范围地址读取伪指令LDR</h4><ul>
<li>LDR伪指令将一个32位的常数或者一个地址值读取到寄存器中，可以看作是加载寄存器的内容。其语法格式如下：</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">LDR 	<span class="keyword">register</span> , = expression</span><br></pre></td></tr></table></figure>
<h4 id="2-小范围地址读取伪指令ADR"><a href="#2-小范围地址读取伪指令ADR" class="headerlink" title="2* 小范围地址读取伪指令ADR"></a>2* 小范围地址读取伪指令ADR</h4><ul>
<li>ADR为小范围地址读取伪指令，它将基于PC相对偏移的地址值读取到寄存器中。偏移量必须是正数并小于1KB。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">ADR 	<span class="keyword">register</span> , = expression</span><br></pre></td></tr></table></figure>
<ul>
<li>相当于PC寄存器或其它寄存器的长转移。</li>
<li>汇编器在处理源程序时，ADR伪指令一条具有ADR等同功能的thumb指令(通常用ADD或SUB指令)替代。</li>
<li>如果不能用一条指令实现ADR伪指令的功能，则编译器报告错误，编译失败。</li>
</ul>
<h4 id="3-空操作伪指令NOP"><a href="#3-空操作伪指令NOP" class="headerlink" title="3* 空操作伪指令NOP"></a>3* 空操作伪指令NOP</h4><ul>
<li>NOP是空操作伪指令，在汇编时将会被替代成ARM中的空操作（也就是什么也没做）指令，例如可能为：“MOV R0，R0”</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">NOP</span></span><br></pre></td></tr></table></figure>
<ul>
<li>空操作伪指令可用于延时操作。</li>
</ul>
<h2 id="2、汇编语言伪操作"><a href="#2、汇编语言伪操作" class="headerlink" title="2、汇编语言伪操作"></a>2、汇编语言伪操作</h2><ul>
<li><p>伪操作(Directive)是ARM汇编语言程序里的一些特殊的指令助记符,其作用主要是为完成汇编程序做各种准备工作,对源程序运行汇编程序处理,而不是在计算机运行期间由处理器执行。</p>
</li>
<li><p>伪操作只是汇编过程中起作用,一旦汇编结束,伪操作也就随之消失。</p>
</li>
<li><p>目前常用的编译环境有2种：    </p>
<ol>
<li><p>ADS/SDT、RealView MDK等ARM公司推出的开发工具</p>
</li>
<li><p>GNU ARM开发工具</p>
</li>
</ol>
</li>
</ul>
<h2 id="3、GNU-ARM汇编伪操作"><a href="#3、GNU-ARM汇编伪操作" class="headerlink" title="3、GNU ARM汇编伪操作"></a>3、GNU ARM汇编伪操作</h2><ul>
<li>在嵌入式系统开发中，不可避免的要使用GNU工具，要进行嵌入式LINUX的移植与开发，其中与硬件直接相关的部分要用汇编语言来编程。</li>
</ul>
<h3 id="（1）符号定义伪操作"><a href="#（1）符号定义伪操作" class="headerlink" title="（1）符号定义伪操作"></a>（1）符号定义伪操作</h3><h4 id="1-常量定义伪操作-equ或-set"><a href="#1-常量定义伪操作-equ或-set" class="headerlink" title="1* 常量定义伪操作.equ或.set"></a>1* 常量定义伪操作.equ或.set</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">.equ    symbol, <span class="built_in">expr</span></span><br><span class="line">.<span class="built_in">set</span>    symbol, <span class="built_in">expr</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>symbol 为要指定的名称，它可以是以前定义过的符号；</li>
<li>expr 表示数字常量或程序中的标号。</li>
</ul>
</li>
</ul>
<h4 id="2-常量定义伪操作-equiv"><a href="#2-常量定义伪操作-equiv" class="headerlink" title="2* 常量定义伪操作.equiv"></a>2* 常量定义伪操作.equiv</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="title">.equiv 	symbol, expr</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>symbol 为要指定的名称，它<strong>不可以是以前定义过的符号</strong>；</li>
<li>expr 表示数字常量或程序中的标号。</li>
</ul>
</li>
</ul>
<h4 id="3-声明全局常量伪操作-global或-globl"><a href="#3-声明全局常量伪操作-global或-globl" class="headerlink" title="3* 声明全局常量伪操作.global或.globl"></a>3* 声明全局常量伪操作.global或.globl</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="title">.global 	symbol</span></span><br><span class="line"><span class="title">.globl 	symbol</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>symbol 为要声明的全局变量名称</li>
</ul>
</li>
</ul>
<h4 id="4-声明外部常量伪操作-extern"><a href="#4-声明外部常量伪操作-extern" class="headerlink" title="4* 声明外部常量伪操作.extern"></a>4* 声明外部常量伪操作.extern</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">.<span class="keyword">extern</span> 	symbol</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>symbol 为要声明的外部变量名称</li>
</ul>
</li>
</ul>
<h3 id="（2）数据定义伪操作"><a href="#（2）数据定义伪操作" class="headerlink" title="（2）数据定义伪操作"></a>（2）数据定义伪操作</h3><h4 id="1-字节定义-byte"><a href="#1-字节定义-byte" class="headerlink" title="1* 字节定义.byte"></a>1* 字节定义.byte</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">.byte	 <span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 数字表达式或程序中的标号。</li>
</ul>
</li>
</ul>
<h4 id="2-半字定义-hword或-short"><a href="#2-半字定义-hword或-short" class="headerlink" title="2* 半字定义.hword或.short"></a>2* 半字定义.hword或.short</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">.hword 	<span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;….</span><br><span class="line">.short 	<span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 数字表达式或程序中的标号。</li>
</ul>
</li>
</ul>
<h4 id="3-字定义-word或-int或-long"><a href="#3-字定义-word或-int或-long" class="headerlink" title="3* 字定义.word或.int或.long"></a>3* 字定义.word或.int或.long</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">.word 	<span class="built_in">expr</span> &#123;, <span class="built_in">expr</span> &#125;….</span><br><span class="line">.<span class="built_in">int</span>		<span class="built_in">expr</span> &#123;, <span class="built_in">expr</span> &#125;…</span><br><span class="line">.long 	<span class="built_in">expr</span> &#123;, <span class="built_in">expr</span> &#125;…</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 数字表达式或程序中的标号。</li>
</ul>
</li>
</ul>
<h4 id="4-字符串定义-ascii和-asciz或-string"><a href="#4-字符串定义-ascii和-asciz或-string" class="headerlink" title="4* 字符串定义.ascii和.asciz或.string"></a>4* 字符串定义.ascii和.asciz或.string</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">.ascii	<span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br><span class="line">.asciz 	<span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br><span class="line">.<span class="keyword">string</span> 	<span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 表示字符串。</li>
</ul>
</li>
</ul>
<h4 id="5-双字定义-quad"><a href="#5-双字定义-quad" class="headerlink" title="5* 双字定义.quad"></a>5* 双字定义.quad</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">.quad 	<span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 数字表达式。</li>
</ul>
</li>
</ul>
<h4 id="6-四字定义-octa"><a href="#6-四字定义-octa" class="headerlink" title="6* 四字定义.octa"></a>6* 四字定义.octa</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">.octa	 <span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 数字表达式。</li>
</ul>
</li>
</ul>
<h4 id="7-单精度浮点数定义-float或-single"><a href="#7-单精度浮点数定义-float或-single" class="headerlink" title="7* 单精度浮点数定义.float或.single"></a>7* 单精度浮点数定义.float或.single</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight nim"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">float</span> 	<span class="built_in">expr</span> &#123;, <span class="built_in">expr</span> &#125;….</span><br><span class="line">.single 	<span class="built_in">expr</span> &#123;, <span class="built_in">expr</span> &#125;….</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 为32位的 IEEE 单精度浮点数。</li>
</ul>
</li>
</ul>
<h4 id="8-双精度浮点数定义-double"><a href="#8-双精度浮点数定义-double" class="headerlink" title="8* 双精度浮点数定义.double"></a>8* 双精度浮点数定义.double</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">.double	 <span class="keyword">expr</span> &#123;, <span class="keyword">expr</span> &#125;…</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 为32位的 IEEE 双精度浮点数</li>
</ul>
</li>
</ul>
<h4 id="9-重复内存单元定义-fill"><a href="#9-重复内存单元定义-fill" class="headerlink" title="9* 重复内存单元定义.fill"></a>9* 重复内存单元定义.fill</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">.<span class="built_in">fill</span>	 repeat &#123;, <span class="built_in">size</span>&#125;&#123;, value&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>repeat 重复填充的次数；</li>
<li>size 每次所填充的字节数；</li>
<li>value 所填充的数据。</li>
</ul>
</li>
</ul>
<h4 id="10-零填充字节内存单元定义-zero"><a href="#10-零填充字节内存单元定义-zero" class="headerlink" title="10* 零填充字节内存单元定义.zero"></a>10* 零填充字节内存单元定义.zero</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">.zero <span class="built_in">size</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>size 所分配的0填充字节数</li>
</ul>
</li>
</ul>
<h4 id="11-固定填充字节内存单元定义-space或-skip"><a href="#11-固定填充字节内存单元定义-space或-skip" class="headerlink" title="11* 固定填充字节内存单元定义.space或.skip"></a>11* 固定填充字节内存单元定义.space或.skip</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">.space 	<span class="built_in">size</span> &#123;, value&#125;</span><br><span class="line">.skip 	<span class="built_in">size</span> &#123;, value&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>size 所分配的字节数</li>
</ul>
</li>
</ul>
<h4 id="12-声明数据缓冲池-ltorg"><a href="#12-声明数据缓冲池-ltorg" class="headerlink" title="12* 声明数据缓冲池.ltorg"></a>12* 声明数据缓冲池.ltorg</h4><ul>
<li>语法格式</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="title">.ltorg</span></span><br></pre></td></tr></table></figure>
<h3 id="（3）汇编与反汇编代码控制伪操作"><a href="#（3）汇编与反汇编代码控制伪操作" class="headerlink" title="（3）汇编与反汇编代码控制伪操作"></a>（3）汇编与反汇编代码控制伪操作</h3><h4 id="1-指令集类型标识伪操作"><a href="#1-指令集类型标识伪操作" class="headerlink" title="1* 指令集类型标识伪操作"></a>1* 指令集类型标识伪操作</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="title">.arm</span></span><br><span class="line"><span class="title">.code 32</span></span><br><span class="line"><span class="title">.thumb</span></span><br><span class="line"><span class="title">.code 16</span></span><br></pre></td></tr></table></figure>
<h4 id="2-段属性定义伪操作"><a href="#2-段属性定义伪操作" class="headerlink" title="2* 段属性定义伪操作"></a>2* 段属性定义伪操作</h4><ul>
<li>语法格式如下：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="title">.section expr</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>expr 为段属性，可以是.text、.data、.bss中的一个。</li>
</ul>
</li>
</ul>
<h4 id="3-段起始声明伪操作"><a href="#3-段起始声明伪操作" class="headerlink" title="3* 段起始声明伪操作"></a>3* 段起始声明伪操作</h4><ul>
<li>具体的语法格式如下：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="title">.text</span></span><br><span class="line"><span class="title">.data</span></span><br><span class="line"><span class="title">.bss</span></span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/2b2b16e20e2c1e2383e2bc0e1bfacec5.png">

<h4 id="4-对齐方式设置伪操作-align或-balign"><a href="#4-对齐方式设置伪操作-align或-balign" class="headerlink" title="4* 对齐方式设置伪操作.align或.balign"></a>4* 对齐方式设置伪操作.align或.balign</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">.align	 </span><span class="template-variable">&#123;alignment&#125;</span><span class="xml"> </span><span class="template-variable">&#123;, fill&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">.balign	 </span><span class="template-variable">&#123;alignment&#125;</span><span class="xml"> </span><span class="template-variable">&#123;, fill&#125;</span><span class="xml"> </span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>alignment 是一个数值表达式，用于指定对齐方式，其取值在0~15范围内；</li>
<li>fill 用来指定进行填充的数据。</li>
</ul>
</li>
</ul>
<h4 id="5-代码位置设置伪操作-org"><a href="#5-代码位置设置伪操作-org" class="headerlink" title="5* 代码位置设置伪操作.org"></a>5* 代码位置设置伪操作.org</h4><ul>
<li>语法格式:</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">.org	 <span class="built_in">offset</span> &#123;, expr&#125; </span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>offset 是一个数值表达式，表示地址偏移量；</li>
<li>expr 用来指定进行填充的数据。</li>
</ul>
</li>
</ul>
<h3 id="（4）预定义控制伪操作"><a href="#（4）预定义控制伪操作" class="headerlink" title="（4）预定义控制伪操作"></a>（4）预定义控制伪操作</h3><ul>
<li>汇编器在对程序代码进行编译时，会根据汇编控制伪操作的定义情况对程序进行编译，常用的有条件编译、宏定义和文件包含</li>
</ul>
<h4 id="1-条件编译伪操作-if"><a href="#1-条件编译伪操作-if" class="headerlink" title="1* 条件编译伪操作.if"></a>1* 条件编译伪操作.if</h4><ul>
<li>语法格式：</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.if</span>	logical_expression</span><br><span class="line">程序代码段A	</span><br><span class="line">&#123;<span class="meta">.else</span></span><br><span class="line">程序代码段<span class="keyword">B</span></span><br><span class="line"><span class="keyword">&#125;	</span>.</span><br><span class="line"><span class="meta">.endif</span> </span><br></pre></td></tr></table></figure>
<h4 id="2-宏定义伪操作-macro"><a href="#2-宏定义伪操作-macro" class="headerlink" title="2* 宏定义伪操作.macro"></a>2* 宏定义伪操作.macro</h4><ul>
<li>语法格式：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="title">.macro</span></span><br><span class="line">&#123;	macroname	&#123;parameter&#123;,parameter&#125;…&#125;</span><br><span class="line">程序代码段</span><br><span class="line"><span class="title">.endm其中：	</span></span><br></pre></td></tr></table></figure>
<h4 id="3-文件包含伪操作-include"><a href="#3-文件包含伪操作-include" class="headerlink" title="3* 文件包含伪操作.include"></a>3* 文件包含伪操作.include</h4><ul>
<li>.include伪操作用于将一个源文件包含到当前的源文件中，所包含的文件在.include指令的位置处进行汇编处理。</li>
<li>语法格式:</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.include</span> 	<span class="string">&quot;file_name&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="六、汇编语言程序设计"><a href="#六、汇编语言程序设计" class="headerlink" title="六、汇编语言程序设计"></a>六、汇编语言程序设计</h1><h2 id="1、ARM编译环境下汇编语句"><a href="#1、ARM编译环境下汇编语句" class="headerlink" title="1、ARM编译环境下汇编语句"></a>1、ARM编译环境下汇编语句</h2><ul>
<li>ARM编译环境下进行汇编语言程序设计的格式</li>
<li>汇编语句中的符号规则</li>
</ul>
<h3 id="（1）ADS环境下ARM汇编语句格式"><a href="#（1）ADS环境下ARM汇编语句格式" class="headerlink" title="（1）ADS环境下ARM汇编语句格式"></a>（1）ADS环境下ARM汇编语句格式</h3><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;symbol&#125; &#123;instruction&#125;	&#123;<span class="comment">;comment&#125;</span></span><br><span class="line">&#123;symbol&#125; &#123;directive&#125;	&#123;<span class="comment">;comment&#125;</span></span><br><span class="line">&#123;symbol&#125;&#123; pseudo-instruction&#125;	&#123;<span class="comment">;comment&#125;</span></span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/f7fd7aca3071e3108c2c5b9957c1cf8e.png">

<h3 id="（2）ADS编译环境下汇编语句中符号规则"><a href="#（2）ADS编译环境下汇编语句中符号规则" class="headerlink" title="（2）ADS编译环境下汇编语句中符号规则"></a>（2）ADS编译环境下汇编语句中符号规则</h3><h4 id="1-符号命名规则"><a href="#1-符号命名规则" class="headerlink" title="1* 符号命名规则"></a>1* 符号命名规则</h4><ol>
<li>符号由大小写字母、数字、下划线组成，且符号是区分大小写的；</li>
<li>局部标号可以用数字开头，其他的标号不能；</li>
<li>符号在其作用范围内必须是唯一的；</li>
<li>程序中的符号不要与指令助记符或者伪操作同名。</li>
</ol>
<h4 id="2-常量"><a href="#2-常量" class="headerlink" title="2* 常量"></a>2* 常量</h4><ol>
<li>十进制数，如535、246。</li>
<li>十六进制数，如0x645、0xff00。</li>
<li>n_XXX, n表示n进制数，从2~9，XXX是具体的数字。例如：8_3777</li>
<li>字符常量用一对单引号括起来，包括一个单字符或者标准C中的转义字符。例如‘A’、‘\n’。</li>
<li>字符串常量由一对双引号以及由它括住的一组字符串组成，包括标准C中的转义字符。<ul>
<li>如果需要使用双引号”或字符$ ，则必须用””和$$代替</li>
</ul>
</li>
</ol>
<h4 id="3-变量"><a href="#3-变量" class="headerlink" title="3* 变量"></a>3* 变量</h4><ol>
<li>数字变量—汇编器对-n和232-n不做区别</li>
<li>字符串变量—字符串变量最大长度为512字节</li>
<li>逻辑变量—{FALSE}和{TRUE}</li>
</ol>
<h4 id="4-字符串表达式操作"><a href="#4-字符串表达式操作" class="headerlink" title="4* 字符串表达式操作"></a>4* 字符串表达式操作</h4><h5 id="1-取符串的长度LEN"><a href="#1-取符串的长度LEN" class="headerlink" title="1. 取符串的长度LEN"></a>1. 取符串的长度LEN</h5><ul>
<li>语法格式：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:LEN:</span> A</span><br></pre></td></tr></table></figure>
<ul>
<li>功能说明：返回字符串A的长度。</li>
</ul>
<h5 id="2-CHR"><a href="#2-CHR" class="headerlink" title="2. CHR"></a>2. CHR</h5><ul>
<li>语法格式：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:CHR:</span> A </span><br></pre></td></tr></table></figure>
<ul>
<li>功能说明：将A（A为某一字符的ASCII值）转换为单个字符。</li>
</ul>
<h5 id="3-STR"><a href="#3-STR" class="headerlink" title="3. STR"></a>3. STR</h5><ul>
<li>语法格式：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="meta">:STR:</span> A </span><br></pre></td></tr></table></figure>
<ul>
<li>功能说明：将A（A为数字量或逻辑表达式）转换成字符串。</li>
</ul>
<h5 id="4-LEFT"><a href="#4-LEFT" class="headerlink" title="4. LEFT"></a>4. LEFT</h5><ul>
<li>语法格式：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">A :</span><span class="attr">LEFT:</span> B </span><br></pre></td></tr></table></figure>
<ul>
<li>功能说明：返回字符串A最左端B（B为返回长度）长度的字符串。</li>
</ul>
<h5 id="5-RIGHT"><a href="#5-RIGHT" class="headerlink" title="5. RIGHT"></a>5. RIGHT</h5><ul>
<li>返回一个字符串最右端一定长度的字符串：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">A :</span><span class="attr">RIGHT:</span> B</span><br></pre></td></tr></table></figure>
<ul>
<li>功能说明：返回字符串A最右端B（B为返回长度）长度的字符串。</li>
</ul>
<h5 id="6-CC"><a href="#6-CC" class="headerlink" title="6. CC"></a>6. CC</h5><ul>
<li>用于连接两个字符串，B串接到A串后面：</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">A :</span><span class="attr">CC:</span> B </span><br></pre></td></tr></table></figure>
<h4 id="5-地址标号"><a href="#5-地址标号" class="headerlink" title="5* 地址标号"></a>5* 地址标号</h4><ol>
<li>PC相关标号</li>
<li>寄存器相关标号</li>
<li>绝对地址</li>
</ol>
<h4 id="6-局部标号"><a href="#6-局部标号" class="headerlink" title="6* 局部标号"></a>6* 局部标号</h4><ul>
<li>局部标号的语法格式如下：</li>
</ul>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="class">n </span>&#123;routname&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>被引用的局部标号语法规则是：</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">% </span><span class="template-variable">&#123;F∣B&#125;</span><span class="xml"> </span><span class="template-variable">&#123;A∣T&#125;</span><span class="xml"> n </span><span class="template-variable">&#123;routname&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>其中：    <ul>
<li>n是局部标号的数字号。</li>
<li>routname是当前局部范围的名称。</li>
<li>%表示引用操作。</li>
<li>F指示汇编器只向前搜索。</li>
<li>B指示汇编器只向后搜索。</li>
<li>A指示汇编器搜索宏的所有嵌套层次。</li>
<li>T指示汇编器搜索宏的当前层次。</li>
</ul>
</li>
</ul>
<h2 id="2、GNU环境下汇编语句与编译说明"><a href="#2、GNU环境下汇编语句与编译说明" class="headerlink" title="2、GNU环境下汇编语句与编译说明"></a>2、GNU环境下汇编语句与编译说明</h2><ul>
<li>GNU环境下ARM汇编语言程序设计主要是面对在ARM平台上进行嵌入式LINUX的开发。</li>
<li>GNU标准中提供了支持ARM汇编语言的汇编器as(arm-elf-as)、交叉编译器gcc ld(arm-elf-gcc)和链接器ld(arm-elf-ld)。</li>
</ul>
<h3 id="（1）GNU环境下ARM汇编语句格式"><a href="#（1）GNU环境下ARM汇编语句格式" class="headerlink" title="（1）GNU环境下ARM汇编语句格式"></a>（1）GNU环境下ARM汇编语句格式</h3><ul>
<li>GNU环境下ARM汇编语言语句格式如下：</li>
</ul>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;label :&#125; 	&#123;instruction&#125;			&#123;@comment&#125;</span><br><span class="line">&#123;label :&#125;	&#123;directive&#125;			&#123;@comment&#125;</span><br><span class="line">&#123;label :&#125;  	&#123; pseudo-instruction&#125;	&#123;@comment&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（2）GNU环境下ARM汇编程序编译"><a href="#（2）GNU环境下ARM汇编程序编译" class="headerlink" title="（2）GNU环境下ARM汇编程序编译"></a>（2）GNU环境下ARM汇编程序编译</h3><h4 id="1-预处理"><a href="#1-预处理" class="headerlink" title="1* 预处理"></a>1* 预处理</h4><ul>
<li>GNU汇编器as的内部预处理包括：移除多余的间隔符代码中的所有注释，并将字符常量转换为数字值。它不作宏处理和文件包含处理，但这些事情可以交由gcc编译器去做，文件包含可以用.include伪指令来实现。</li>
</ul>
<h4 id="2-注释"><a href="#2-注释" class="headerlink" title="2* 注释"></a>2* 注释</h4><ul>
<li>GNU ARM Assembly可识别的注释方式有：</li>
<li>C风格多行注释符/* … */</li>
<li>GNU单行注释符“@”或“#”。</li>
</ul>
<h4 id="3-符号"><a href="#3-符号" class="headerlink" title="3* 符号"></a>3* 符号</h4><ul>
<li>与C语言基本一致，符号名由字母、数字以及’_’、和’.’组成，大小写敏感。</li>
</ul>
<h4 id="4-段与重定位"><a href="#4-段与重定位" class="headerlink" title="4* 段与重定位"></a>4* 段与重定位</h4><ul>
<li>链接器ld用于把多个目标文件合并为一个可执行文件。</li>
<li>汇编器as生成的目标文件都假定从地址0开始，ld为其指定最终的地址。</li>
<li>链接器ld把目标文件中的每个section都作为一个整体，为其分配运行的地址<img src="https://cdn.megalomania.icu/images/7c10724721cb29d6e15dc5d004e79dc3.png">

</li>
</ul>
<h4 id="5-符号说明"><a href="#5-符号说明" class="headerlink" title="5* 符号说明"></a>5* 符号说明</h4><h5 id="1-label"><a href="#1-label" class="headerlink" title="1. label"></a>1. label</h5><ul>
<li>lable后面要带冒号‘：’，例如：</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">_start:</span> <span class="keyword">B</span> Reset_handler</span><br></pre></td></tr></table></figure>
<h5 id="2-给符号赋值"><a href="#2-给符号赋值" class="headerlink" title="2. 给符号赋值"></a>2. 给符号赋值</h5><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">symbol_name</span> = symbol_value</span><br><span class="line">或者<span class="meta">.set</span> symbol_name, symbol_value</span><br><span class="line">或者<span class="meta">.equ</span> symbol_name, symbol_value</span><br></pre></td></tr></table></figure>
<h5 id="3-符号名"><a href="#3-符号名" class="headerlink" title="3. 符号名"></a>3. 符号名</h5><ul>
<li>可由数字、字母或‘.’或‘_’组成，不可以数字开头，大小写敏感。</li>
</ul>
<h2 id="3、ARM汇编语言程序设计规范"><a href="#3、ARM汇编语言程序设计规范" class="headerlink" title="3、ARM汇编语言程序设计规范"></a>3、ARM汇编语言程序设计规范</h2><h3 id="（1）汇编器预定义的寄存器名称"><a href="#（1）汇编器预定义的寄存器名称" class="headerlink" title="（1）汇编器预定义的寄存器名称"></a>（1）汇编器预定义的寄存器名称</h3><img src="https://cdn.megalomania.icu/images/8319dfa3e428fed1c45fc10c279a5657.png">

<h3 id="（2）ARM汇编语言程序设计规范"><a href="#（2）ARM汇编语言程序设计规范" class="headerlink" title="（2）ARM汇编语言程序设计规范"></a>（2）ARM汇编语言程序设计规范</h3><ol>
<li>符号命名规则</li>
<li>注释</li>
<li>程序设计的其它要求</li>
</ol>
<h1 id="七、ARM汇编语言与嵌入式C混合编程"><a href="#七、ARM汇编语言与嵌入式C混合编程" class="headerlink" title="七、ARM汇编语言与嵌入式C混合编程"></a>七、ARM汇编语言与嵌入式C混合编程</h1><h2 id="1、嵌入式C编程规范"><a href="#1、嵌入式C编程规范" class="headerlink" title="1、嵌入式C编程规范"></a>1、嵌入式C编程规范</h2><ul>
<li>在当前的嵌入式开发中，嵌入式C语言是最为常见的程序设计语言。</li>
<li>优秀的代码还要具备<strong>易读性</strong>、<strong>易维护性</strong>、<strong>具有可移植</strong>和<strong>高可靠性</strong>。</li>
</ul>
<h3 id="（1）-嵌入式C程序书写规范"><a href="#（1）-嵌入式C程序书写规范" class="headerlink" title="（1） 嵌入式C程序书写规范"></a>（1） 嵌入式C程序书写规范</h3><ul>
<li><p>排版规则如下：    </p>
<ol>
<li><p>程序块要采用<strong>缩进风格</strong>编写</p>
</li>
<li><p><strong>较长的语句</strong>（例如超过80个字符）要<strong>分成多行书写</strong></p>
</li>
<li><p>循环、判断等语句中若<strong>有较长的表达式或语句</strong>，则要进行<strong>适应的划分</strong></p>
</li>
<li><p>若<strong>函数或过程中参数较长</strong>，也要进行适当的<strong>划分</strong>。</p>
</li>
<li><p>一般<strong>不要把多个短语句写在一行</strong>中</p>
</li>
<li><p>程序块的<strong>分界符语句的大括号“{”与“}”一般独占一行并且在同一列</strong></p>
</li>
</ol>
</li>
</ul>
<h3 id="（2）命名规则"><a href="#（2）命名规则" class="headerlink" title="（2）命名规则"></a>（2）命名规则</h3><ol>
<li>标识符的名称要简明，能够表达出确切的含义，可以使用<strong>完整的单词或通常可以理解的缩写</strong>。</li>
<li>如果在命名中使用特殊约定或缩写，则要进行注释说明。</li>
<li>对于变量命名，一般<strong>不取单个字符</strong> ,例如i、j、k…</li>
<li>函数名一般以大写字母开头；所有常量名字母统一用大写。</li>
</ol>
<h3 id="（3）注释说明"><a href="#（3）注释说明" class="headerlink" title="（3）注释说明"></a>（3）注释说明</h3><ul>
<li><p>注释有助于程序员理解程序的整体结构，也便于以后程序代码的维护与升级。常用的规则如下：    </p>
<ol>
<li><p>注释语言必须<strong>准确、简洁且容易理解</strong>;</p>
</li>
<li><p>程序代码<strong>源文件头部</strong>应进行注释说明 ;</p>
</li>
<li><p><strong>函数头部</strong>应进行注释；</p>
</li>
<li><p>程序中所用到的特定含义的<strong>常量、变量</strong>，在声明时都要加以注释 ；</p>
</li>
<li><p>对于<strong>宏定义、数据结构声明</strong>，如果其命名<strong>不是充分自注释</strong>的，也要加以注释。</p>
</li>
<li><p>如果注释单独占用一行，与其被注释的内容进行相同的缩进方式，一般将注释与其上面的代码用空行隔开</p>
</li>
<li><p>程序代码修改时，<strong>其注释也要及时修改</strong>，一定要保证代码与注释保持一致。</p>
</li>
</ol>
</li>
</ul>
<h2 id="2、嵌入式C程序设计中的位运算"><a href="#2、嵌入式C程序设计中的位运算" class="headerlink" title="2、嵌入式C程序设计中的位运算"></a>2、嵌入式C程序设计中的位运算</h2><ul>
<li>在嵌入式程序设计中，<strong>位操作</strong>是最常用的运算之一，因为在很多情况下要<strong>对寄存器中的某位或某个管脚进行操作</strong>，这些都需要用位操作来完成。</li>
</ul>
<h3 id="（1）按位与操作"><a href="#（1）按位与操作" class="headerlink" title="（1）按位与操作"></a>（1）按位与操作</h3><ul>
<li>按位与运算符“&amp;”是把参与运算的两个操作数所对应的各个二进制位进行按位相与。</li>
<li>只有当对应的两个二进制位全为1时，结果才为1，否则为0。</li>
<li>参与运算的两个操作数以<strong>补码形式</strong>出现。</li>
</ul>
<h3 id="（2）按位或操作"><a href="#（2）按位或操作" class="headerlink" title="（2）按位或操作"></a>（2）按位或操作</h3><ul>
<li>按位或操作运算符“|”是把参与运算的两个操作数对应的各个二进制位进行按位相或。</li>
<li>对应的两个二进制位中只要有一个为1，结果就为1，当两个对应的二进制位都为0时，结果位为0。</li>
<li>参与运算的两个操作数均以<strong>补码形式</strong>出现。</li>
</ul>
<h3 id="（3）按位异或操作"><a href="#（3）按位异或操作" class="headerlink" title="（3）按位异或操作"></a>（3）按位异或操作</h3><ul>
<li>按位异或运算符<strong>“^”</strong>是将参与运算的两个操作数对应的各个二进制位进行相异或。</li>
<li>当对应的两个二进制位<strong>相异</strong>时，结果位为1，相同时为0。</li>
<li>参与运算的两个操作数均以<strong>补码形式</strong>出现。</li>
</ul>
<h3 id="（4）取反操作"><a href="#（4）取反操作" class="headerlink" title="（4）取反操作"></a>（4）取反操作</h3><ul>
<li>取反运算符“<del>”实现对参与运算的操作数对应的各个二进制位按位求反。取反运算符“</del>”具有右结合性。所有1变为0，0变为1</li>
</ul>
<h3 id="（5）移位操作"><a href="#（5）移位操作" class="headerlink" title="（5）移位操作"></a>（5）移位操作</h3><ul>
<li>移位操作分为左移操作与右移操作。左移运算符“&lt;&lt;”实现将“&lt;&lt;”左边的操作数的各个二进制位向左移动“&lt;&lt;”右边操作数所指定的位数，高位丢弃，低位补0。</li>
<li>其值相当于<strong>乘以</strong>：<strong>2“左移位数”次方</strong>。</li>
<li>右移运算符“&gt;&gt;”实现将“&gt;&gt;”左边的操作数的各个二进制位向右移动“&gt;&gt;”右边操作数所指定的位数。</li>
<li>对于空位的补齐方式，无符号数与有符号数是有区别的。对无符号数进行右移时，低位丢弃，高位用0补齐，其值相当于<strong>除以</strong>：<strong>2“右移位数”次方</strong></li>
</ul>
<h2 id="3、嵌入式C程序设计中的几点说明"><a href="#3、嵌入式C程序设计中的几点说明" class="headerlink" title="3、嵌入式C程序设计中的几点说明"></a>3、嵌入式C程序设计中的几点说明</h2><h3 id="（1）volatile限制符"><a href="#（1）volatile限制符" class="headerlink" title="（1）volatile限制符"></a>（1）volatile限制符</h3><ul>
<li>volatile的本意为 “暂态的”或.“易变的”，该说明符起到<strong>抑制编译器优化</strong>的作用。</li>
<li>如果在声明时用“volatile”关键进行修饰，遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供<strong>特殊地址的稳定访问</strong>。</li>
</ul>
<h3 id="（2）地址强制转换与多级指针"><a href="#（2）地址强制转换与多级指针" class="headerlink" title="（2）地址强制转换与多级指针"></a>（2）地址强制转换与多级指针</h3><h4 id="1-地址强制转换"><a href="#1-地址强制转换" class="headerlink" title="1* 地址强制转换"></a>1* 地址强制转换</h4><ul>
<li>在C程序设计中，绝对地址0x0FA00只是被当成一个整型数，如果要把它当成一个地址来使用就需要进行地址强制转换。</li>
<li>如定义一个整形指针int* p，然后把绝对地址0x0FA00转换成一个整形的地址值赋给这个整形指针，p = (int* )0x0FA00。</li>
<li>因此在嵌入式程序设计中，经常可以可以看到寄存器用如下方式进行定义：</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">#define rPCONA	<span class="comment">(*(volatile unsigned *)</span><span class="number">0</span>x1D20000)</span><br><span class="line">#define rPDATA	<span class="comment">(*(volatile unsigned *)</span><span class="number">0</span>x1D20004)</span><br></pre></td></tr></table></figure>
<h4 id="2-多级指针"><a href="#2-多级指针" class="headerlink" title="2* 多级指针"></a>2* 多级指针</h4><img src="https://cdn.megalomania.icu/images/8870b8c26a8c27006f3c7d934b35dc04.png">

<h3 id="（3）预处理的使用"><a href="#（3）预处理的使用" class="headerlink" title="（3）预处理的使用"></a>（3）预处理的使用</h3><ul>
<li>在源流程序被编译器处理之前, 编译预处理器首先对源程序中的预处理命令进行展开或处理。</li>
<li>预处理命令书写格式为以“#”开头，占单独书写行，语句尾不加分号。</li>
</ul>
<h4 id="1-宏定义-define"><a href="#1-宏定义-define" class="headerlink" title="1* 宏定义(#define)"></a>1* 宏定义(#define)</h4><h5 id="1-不带参数的宏"><a href="#1-不带参数的宏" class="headerlink" title="1. 不带参数的宏"></a>1. 不带参数的宏</h5><ul>
<li>不带参数的宏定义的一般形式为：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 宏名 [宏体]</span></span><br></pre></td></tr></table></figure>
<h5 id="2-带参数的宏定义"><a href="#2-带参数的宏定义" class="headerlink" title="2. 带参数的宏定义"></a>2. 带参数的宏定义</h5><ul>
<li>带参数的宏定义一般形式为：</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 宏名(参数表) 宏体</span></span><br></pre></td></tr></table></figure>
<img src="https://cdn.megalomania.icu/images/a3350d706af9cb82c9cf29e6cfe2377d.png">

<h5 id="3-带参宏与函数的区别"><a href="#3-带参宏与函数的区别" class="headerlink" title="3. 带参宏与函数的区别"></a>3. 带参宏与函数的区别</h5><img src="https://cdn.megalomania.icu/images/0b69547b3eadc44a896ece257c1b405e.png">

<h4 id="2-文件包含-include"><a href="#2-文件包含-include" class="headerlink" title="2* 文件包含(#include)"></a>2* 文件包含(#include)</h4><ul>
<li>文件包含的功能是使得一个源文件可以将另一个源文件的内容全部包含进来，它的一般形式为：</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> “文件名”	//先搜索当前目录，再搜索标准目录，可以指定目录</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;文件名&gt;</span>	//直接按标准目录搜索</span></span><br></pre></td></tr></table></figure>
<h4 id="3-条件编译"><a href="#3-条件编译" class="headerlink" title="3* 条件编译"></a>3* 条件编译</h4><h5 id="1-形式1"><a href="#1-形式1" class="headerlink" title="1. 形式1"></a>1. 形式1</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> 标识符</span></span><br><span class="line">程序段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">程序段<span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure>
<h5 id="2-形式2"><a href="#2-形式2" class="headerlink" title="2. 形式2"></a>2. 形式2</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> 标识符</span></span><br><span class="line">		程序段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">		程序段<span class="number">2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure>
<h5 id="3-形式3"><a href="#3-形式3" class="headerlink" title="3. 形式3"></a>3. 形式3</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> 表达式1</span></span><br><span class="line">		程序段<span class="number">1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> 表达式2</span></span><br><span class="line">		程序段<span class="number">2</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">       程序段<span class="number">3</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br></pre></td></tr></table></figure>
<h2 id="4、嵌入式C程序设计格式"><a href="#4、嵌入式C程序设计格式" class="headerlink" title="4、嵌入式C程序设计格式"></a>4、嵌入式C程序设计格式</h2><h3 id="（1）可重入函数"><a href="#（1）可重入函数" class="headerlink" title="（1）可重入函数"></a>（1）可重入函数</h3><ul>
<li>如果某个函数可以被多个任务并发使用，而不会造成数据错误，我们就说这个函数具有<strong>可重入性（reentrant）</strong> 。</li>
<li>可重入函数可以<strong>使用局部变量</strong>，也可以使用全局变量。</li>
<li>如果<strong>使用全局变量</strong>，则应通过关中断、信号量（即P、V操作）等手段<strong>对其加以保护</strong></li>
</ul>
<h3 id="（2）中断处理程序"><a href="#（2）中断处理程序" class="headerlink" title="（2）中断处理程序"></a>（2）中断处理程序</h3><ul>
<li><p>在编写中断服务程序时需要满足如下要求：   </p>
<ol>
<li><p>不能向中断服务程序传递参数；</p>
</li>
<li><p>中断服务程序没有返回值；</p>
</li>
<li><p>中断服务程序应要尽可能短，来减少中断服务程序的处理时间，保证实时系统的性能。</p>
</li>
</ol>
</li>
</ul>
<h3 id="（3）模块化程序设计"><a href="#（3）模块化程序设计" class="headerlink" title="（3）模块化程序设计"></a>（3）模块化程序设计</h3><ul>
<li>嵌入式C程序设计主要采用模块化设计方法，将系统内的任务进行合理的划分，将具有同一属性或相同类别的代码归为一类组成模块，每个模块的功能相对独立。</li>
<li>将整个软件系统分为多个模块，编程思路就会很清晰。<img src="https://cdn.megalomania.icu/images/4f8d828e18a1125f76eff5a12bf4e5f0.png">

</li>
</ul>
<h2 id="5、过程调用标准ATPCS与AAPCS"><a href="#5、过程调用标准ATPCS与AAPCS" class="headerlink" title="5、过程调用标准ATPCS与AAPCS"></a>5、过程调用标准ATPCS与AAPCS</h2><ul>
<li>过程调用标准ATPCS（ARM-Thumb Produce Call Standard）规定了子程序间相互调用的基本规则， ATPCS规定子程序调用过程中寄存器的使用规则、数据栈的使用规则及参数的传递规则。</li>
<li>2007年，ARM公司推出了新的过程调用标准AAPCS（ARM Architecture Produce Call Standard）,它只是改进了原有的ATPCS的二进制代码的兼容性。</li>
<li>2011年，ARM公司推出了新的过程调用标准AAPCS64（ARM Architecture Produce Call Standard）,针对64位架构AArch64</li>
</ul>
<h3 id="（1）寄存器使用规则"><a href="#（1）寄存器使用规则" class="headerlink" title="（1）寄存器使用规则"></a>（1）寄存器使用规则</h3><ol>
<li>子程序间通过寄存器R0～R3传递参数，寄存器R0～R3可记作A1～A4。被调用的子程序在返回前无须恢复寄存器R0～R3的内容。</li>
<li>在子程序中，ARM状态下使用寄存器R4～R11来保存局部变量，寄存器R4～R11可记作V1～V8；Thumb状态下只能使用R4～R7来保存局部变量。</li>
<li>寄存器R12用作子程序间调用时临时保存栈指针，函数返回时使用该寄存器进行出栈，记作IP；在子程序间的链接代码中常有这种使用规则。</li>
<li>通用寄存器R13用作数据栈指针，记作SP。</li>
<li>通用寄存器R14用作链接寄存器 ；</li>
<li>通用寄存器R15用作程序计数器，记作PC 。</li>
</ol>
<h3 id="（2）数据栈使用规则"><a href="#（2）数据栈使用规则" class="headerlink" title="（2）数据栈使用规则"></a>（2）数据栈使用规则</h3><ul>
<li>过程调用标准规定数据栈为FD类型，并且对数据栈的操作时要求8字节对齐的。</li>
<li>堆栈是一种数据结构</li>
<li>先进先出</li>
<li>使用一个堆栈指针的专用寄存器只是当前位置    * ARM 中是R13</li>
</ul>
<h4 id="1-堆栈分类"><a href="#1-堆栈分类" class="headerlink" title="1* 堆栈分类"></a>1* 堆栈分类</h4><ul>
<li><p><strong>根据堆栈指针的位置可以分为</strong>：    </p>
<ol>
<li><p>满堆栈（Full Stack）：    </p>
<ul>
<li>当堆栈指针指向最后压入堆栈的数据时；</li>
</ul>
</li>
<li><p>空堆栈（Empty Stack）：    </p>
<ul>
<li>当堆栈指针指向下一个将要放入数据的空位置时；</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>根据堆栈的生成方式，又可以分为递增堆栈和递减堆栈</strong>：    </p>
<ol>
<li><p>递增堆栈（Ascending Stack） ：    </p>
<ul>
<li>当堆栈由低地址向高地址生成时；</li>
</ul>
</li>
<li><p>递减堆栈（Decending Stack） ：    </p>
<ul>
<li>当堆栈由高地址向低地址生成时；</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="2-块拷贝与栈操作的对应关系"><a href="#2-块拷贝与栈操作的对应关系" class="headerlink" title="2* 块拷贝与栈操作的对应关系"></a>2* 块拷贝与栈操作的对应关系</h4><img src="https://cdn.megalomania.icu/images/2b93e4faa9c07b751567db82537eb141.png">

<h3 id="（3）参数传递规则"><a href="#（3）参数传递规则" class="headerlink" title="（3）参数传递规则"></a>（3）参数传递规则</h3><h4 id="1-参数个数可变的子程序参数传递规则"><a href="#1-参数个数可变的子程序参数传递规则" class="headerlink" title="1* 参数个数可变的子程序参数传递规则"></a>1* 参数个数可变的子程序参数传递规则</h4><ul>
<li>对于参数个数可变的子程序，当参数个数不超过4个时，可以使用寄存器R0～R3来传递；当参数个数超过4个时，还可以使用数据栈进行参数传递。</li>
</ul>
<h4 id="2-参数个数固定的子程序参数传递规则"><a href="#2-参数个数固定的子程序参数传递规则" class="headerlink" title="2* 参数个数固定的子程序参数传递规则"></a>2* 参数个数固定的子程序参数传递规则</h4><ul>
<li>如果系统不包含浮点运算的硬件部件且没有浮点参数时，则依次将各参数传送到寄存器R0～R3中，如果参数个数多于4个，将剩余的字数据通过数据栈来传递；</li>
<li>如果包括浮点参数则要通过相应的规则将浮点参数转换为整数参数，然后依次将各参数传送到寄存器R0～R3中。如果参数多于4个，将剩余字数据传送到数据栈中，入栈的顺序与参数顺序相反，即最后一个字数据先入栈。</li>
<li>如果系统包含浮点运算的硬件部件，将按照如下规则传递：    <ul>
<li>各个浮点参数按顺序处理</li>
<li>为每个浮点参数分配寄存器。分配方法是：找到编号最小的满足该浮点参数需要的一组连续的FP寄存器进行参数传递。</li>
</ul>
</li>
</ul>
<h4 id="3-子程序结果返回规则"><a href="#3-子程序结果返回规则" class="headerlink" title="3* 子程序结果返回规则"></a>3* 子程序结果返回规则</h4><ol>
<li>结果为一个32位的整数时，通过寄存器R0返回；结果为一个64位整数时，通过寄存器R0，R1返回。</li>
<li>结果为一个浮点数时，可以通过浮点运算部件的寄存器F0、D0或者S0来返回；结果为复合型的浮点数（如复数）时，可以通过寄存器F0～Fn或者Ｄ0～Ｄn来返回。</li>
<li>对于位数更多的结果，需要通过内存来传递。</li>
</ol>
<h2 id="6、ARM汇编语言与嵌入式C混合编程"><a href="#6、ARM汇编语言与嵌入式C混合编程" class="headerlink" title="6、ARM汇编语言与嵌入式C混合编程"></a>6、ARM汇编语言与嵌入式C混合编程</h2><ul>
<li>在嵌入式程序设计中，有些场合（如对具体的硬件资源进行访问）必须用汇编语言来实现，可以采用在嵌入式C语言程序中嵌入汇编语言或嵌入式C语言调用汇编语言来实现。</li>
</ul>
<h3 id="（1）内嵌汇编"><a href="#（1）内嵌汇编" class="headerlink" title="（1）内嵌汇编"></a>（1）内嵌汇编</h3><h4 id="1-ARM开发工具编译环境下内嵌汇编语法格式"><a href="#1-ARM开发工具编译环境下内嵌汇编语法格式" class="headerlink" title="1* ARM开发工具编译环境下内嵌汇编语法格式"></a>1* ARM开发工具编译环境下内嵌汇编语法格式</h4><img src="https://cdn.megalomania.icu/images/25471652dbabc9b2829fb34b1681407b.png">

<h4 id="2-GNU-ARM环境下内嵌汇编语法格式"><a href="#2-GNU-ARM环境下内嵌汇编语法格式" class="headerlink" title="2* GNU ARM环境下内嵌汇编语法格式"></a>2* GNU ARM环境下内嵌汇编语法格式</h4><img src="https://cdn.megalomania.icu/images/669d643efde561a1a809e0086f45f6eb.png">

<h4 id="3-内嵌汇编的局限性"><a href="#3-内嵌汇编的局限性" class="headerlink" title="3* 内嵌汇编的局限性"></a>3* 内嵌汇编的局限性</h4><ul>
<li>ARM开发工具编译环境下内嵌汇编语言，指令操作数可以是寄存器、常量或C语言表达式。可以是char、short或int类型，而且是作为无符号数进行操作。</li>
<li>当表达式过于复杂时需要使用较多的物理寄存器，有可能产生冲突。</li>
<li>GNU ARM编译环境下内嵌汇编语言ARM开发工具稍有差别，不能直接引用C语言中的变量。</li>
</ul>
<h5 id="1-物理寄存器"><a href="#1-物理寄存器" class="headerlink" title="1. 物理寄存器"></a>1. 物理寄存器</h5><ul>
<li>不要直接向程序计数器PC赋值，程序的跳转只能通过B或BL指令实现。</li>
<li>一般将寄存器R0～R3、R12及R14用于子程序调用存放中间结果，因此在内嵌汇编指令中，一般不要将这些寄存器同时指定为指令中的物理寄存器。</li>
<li>在内嵌的汇编指令中使用物理寄存器时，如果有C语言变量使用了该物理寄存器，则编译器将在合适的时候保存并恢复该变量的值。需要注意的是，当寄存器SP、SL、FP以及SB用作特定的用途时，编译器不能恢复这些寄存器的值。</li>
<li>通常在内嵌汇编指令中不要指定物理寄存器，因为有可能会影响编译器分配寄存器，进而可能影响代码的效率。</li>
</ul>
<h5 id="2-标号、常量及指令展开"><a href="#2-标号、常量及指令展开" class="headerlink" title="2. 标号、常量及指令展开"></a>2. 标号、常量及指令展开</h5><ul>
<li>C语言程序中的标号可以被内嵌的汇编指令所使用。但是只有B指令可以使用C语言程序中的标号，BL指令不能使用C语言程序中的标号。</li>
</ul>
<h5 id="3-内存单元的分配"><a href="#3-内存单元的分配" class="headerlink" title="3. 内存单元的分配"></a>3. 内存单元的分配</h5><ul>
<li>内嵌汇编器不支持汇编语言中用于内存分配的伪操作。所用的内存单元的分配都是通过C语言程序完成的，分配的内存单元通过变量以供内嵌的汇编器使用。</li>
</ul>
<h5 id="4-SWI和BL指令"><a href="#4-SWI和BL指令" class="headerlink" title="4. SWI和BL指令"></a>4. SWI和BL指令</h5><ul>
<li>SWI和BL指令用于内嵌汇编时，除了正常的操作数域外，还必须增加如下3个可选的寄存器列表：</li>
<li>用于存放输入的参数的寄存器列表。</li>
<li>用于存放返回结果的寄存器列表。</li>
<li>用于保存被调用的子程序工作寄存器的寄存器列表。</li>
</ul>
<h4 id="4-内嵌汇编器与armasm汇编器的区别"><a href="#4-内嵌汇编器与armasm汇编器的区别" class="headerlink" title="4* 内嵌汇编器与armasm汇编器的区别"></a>4* 内嵌汇编器与armasm汇编器的区别</h4><ul>
<li>内嵌汇编器不支持“LDR Rn, = expression”伪指令，使用“MOV Rn, expression”代替，不支持ADR、ADRL伪指令</li>
<li>十六进制数前要使用前缀0x，不能使用&amp;。当使用8位移位常量导致CPSR中的ALU标志位需要更新时，N、Z、C、V标志中的C不具有实际意义</li>
<li>指令中使用的C变量不能与任何物理寄存器同名，否则会造成混乱</li>
<li>不支持BX和BLX指令</li>
<li>使用内嵌汇编器，不能通过对程序计数器PC赋值，实现程序返回或跳转。</li>
<li>编译器可能使用寄存器R0～R3、R12及R14存放中间结果，如果使用这些寄存器时要特别注意。</li>
</ul>
<h3 id="（3）ARM汇编语言与嵌入式C程序相互调用"><a href="#（3）ARM汇编语言与嵌入式C程序相互调用" class="headerlink" title="（3）ARM汇编语言与嵌入式C程序相互调用"></a>（3）ARM汇编语言与嵌入式C程序相互调用</h3><h4 id="1-汇编程序调用C程序"><a href="#1-汇编程序调用C程序" class="headerlink" title="1* 汇编程序调用C程序"></a>1* 汇编程序调用C程序</h4><ul>
<li>在GNU ARM编译环境下，汇编程序中要使用.extern伪操作声明将要调用的C程序；</li>
<li>在ARM开发工具编译环境下，汇编程序中要使用IMPORT伪操作声明将要调用的C程序。</li>
</ul>
<h4 id="2-C程序调用汇编程序"><a href="#2-C程序调用汇编程序" class="headerlink" title="2* C程序调用汇编程序"></a>2* C程序调用汇编程序</h4><ul>
<li>在GNU ARM编译环境下，在汇编程序中要使用.global伪操作声明汇编程序为全局的函数，可被外部函数调用，同时在C程序中要用关键字extern声明要调用的汇编语言程序。</li>
<li>在ARM开发工具编译环境下，汇编程序中要使用EXPORT伪操作声明本程序可以被其他程序调用。同时也要在C程序中要用关键字extern声明要调用的汇编语言程序。</li>
</ul>
<h1 id="八、S3C44B0-S3C2410通信与LCD接口技术"><a href="#八、S3C44B0-S3C2410通信与LCD接口技术" class="headerlink" title="八、S3C44B0/S3C2410通信与LCD接口技术"></a>八、S3C44B0/S3C2410通信与LCD接口技术</h1><h2 id="S3C44B0-S3C2410-UART"><a href="#S3C44B0-S3C2410-UART" class="headerlink" title="S3C44B0/ S3C2410 UART"></a>S3C44B0/ S3C2410 UART</h2><ul>
<li>通用异步接收和发送UART（Universal Asynchronous Receiver and Transmitter）协议作为一种低速通信协议,广泛应用于通信领域的各种场合。</li>
</ul>
<h3 id="（1）UART原理"><a href="#（1）UART原理" class="headerlink" title="（1）UART原理"></a>（1）UART原理</h3><h4 id="1-串行通信的工作方式"><a href="#1-串行通信的工作方式" class="headerlink" title="1* 串行通信的工作方式"></a>1* 串行通信的工作方式</h4><img src="https://cdn.megalomania.icu/images/26705ad147e606394f0ecabbc14b4657.png">

<h4 id="2-串行通信的波特率"><a href="#2-串行通信的波特率" class="headerlink" title="2* 串行通信的波特率"></a>2* 串行通信的波特率</h4><ul>
<li>在串行通信中，用波特率来描述数据的传输速度。波特率是每秒钟传送的二进制位数，其单位是bps(bits per second)。</li>
<li>是衡量串行数据速度快慢的重要指标。异步串行通信要求通信双方的波特率必须相同。</li>
</ul>
<h4 id="3-奇偶校验"><a href="#3-奇偶校验" class="headerlink" title="3* 奇偶校验"></a>3* 奇偶校验</h4><ul>
<li>在发送数据时，每个数据后要附加1个奇偶校验位，这个校验位可以为1也可以为0，用来保证包括奇偶校验位在内的所有传输的数据帧中1的的个数为奇数（奇校验）或1的个数为偶数（偶校验）。</li>
</ul>
<h4 id="4-数据帧格式"><a href="#4-数据帧格式" class="headerlink" title="4* 数据帧格式"></a>4* 数据帧格式</h4><img src="https://cdn.megalomania.icu/images/d95660ba952372d85307c365593f580b.png">

<img src="https://cdn.megalomania.icu/images/8db994056da6ef4a4cd45dd05e7881f4.png">

<h3 id="（2）S3C44B0-S3C2410-UART模块"><a href="#（2）S3C44B0-S3C2410-UART模块" class="headerlink" title="（2）S3C44B0/ S3C2410 UART模块"></a>（2）S3C44B0/ S3C2410 UART模块</h3><ul>
<li>S3C44B0的UART单元提供两个独立异步串行I/O（SIO）端口，S3C2410的UART提供3个独立异步串行I/O，每一个可以在基于中断和基于DMA的模式下操作。</li>
<li>S3C44B0的UART可以支持位速率高达115.2K bps，S3C2410的UART可支持高达230.4K bps。每个UART通道包含两个16字节先进先出缓存（FIFO），负责数据的接收和发送。</li>
</ul>
<h3 id="（3）S3C44B0-S3C2410-UART操作"><a href="#（3）S3C44B0-S3C2410-UART操作" class="headerlink" title="（3）S3C44B0/ S3C2410 UART操作"></a>（3）S3C44B0/ S3C2410 UART操作</h3><h4 id="1-数据发送与接收"><a href="#1-数据发送与接收" class="headerlink" title="1* 数据发送与接收"></a>1* 数据发送与接收</h4><ul>
<li>它包括一个起始位，5<del>8个数据位，一个可选的奇偶校验位和1</del>2个停止位，用户可以通过线控制寄存器（ULCONn）的编程来设定。</li>
<li>在数据传输完成后产生传输中止信号，在中止信号传输后，可以继续向Tx FIFO（或在非FIFO模式下的Tx 保持寄存器）中发送数据。</li>
</ul>
<h4 id="2-自动流量控制（AFC）"><a href="#2-自动流量控制（AFC）" class="headerlink" title="2* 自动流量控制（AFC）"></a>2* 自动流量控制（AFC）</h4><ul>
<li>S3C44B0和S3C2410支持带有nRTS和nCTS信号的自动流量控制。如果希望连接UART到调制解调器，禁止UMCONn寄存器的自动流量控制位，然后通过软件控制nRTS的信号。<img src="https://cdn.megalomania.icu/images/4ba0649791083ef923428cfaa9acdb2c.png">

</li>
</ul>
<h4 id="3-自环模式"><a href="#3-自环模式" class="headerlink" title="3* 自环模式"></a>3* 自环模式</h4><ul>
<li>S3C44B0/S3C2410提供一个测试模式称为自环模式，以解决在通信连接时的错误。在此模式下，发送的数据被直接接收。</li>
</ul>
<h4 id="4-红外模式"><a href="#4-红外模式" class="headerlink" title="4* 红外模式"></a>4* 红外模式</h4><ul>
<li><p>S3C44B0/S3C2410的UART模块支持红外（IR）发送和接收，可以通过设置UART控制寄存器中的红外模式位选定</p>
<img src="https://cdn.megalomania.icu/images/4d5ce695eeb583720f583ee715ff8482.png">
</li>
<li><p>当IR处于发送模式时，如果输送的的数据位为0，传输周期是正常串口传输的3/16脉冲；当IR处于接收模式时，接收器必须侦测3/16脉冲周期来识别一个0值。</p>
</li>
</ul>
<h3 id="（4）UART中断与波特率的计算"><a href="#（4）UART中断与波特率的计算" class="headerlink" title="（4）UART中断与波特率的计算"></a>（4）UART中断与波特率的计算</h3><h4 id="1-UART中断"><a href="#1-UART中断" class="headerlink" title="1* UART中断"></a>1* UART中断</h4><ul>
<li>S3C44B0/S3C2410每个UART有7个状态信号：超时错误、奇偶错误、帧错误、通信中止、接收数据缓冲区就绪、发送数据缓冲区为空和发送移位寄存器为空</li>
</ul>
<h4 id="2-波特率的产生"><a href="#2-波特率的产生" class="headerlink" title="2* 波特率的产生"></a>2* 波特率的产生</h4><img src="https://cdn.megalomania.icu/images/b8247a234ebb00af85a314d37bbb6000.png">

<h3 id="（5）S3C44B0-S3C2410-UART专用功能寄存器"><a href="#（5）S3C44B0-S3C2410-UART专用功能寄存器" class="headerlink" title="（5）S3C44B0/ S3C2410 UART专用功能寄存器"></a>（5）S3C44B0/ S3C2410 UART专用功能寄存器</h3><h4 id="1-UART线控制寄存器-ULCONn"><a href="#1-UART线控制寄存器-ULCONn" class="headerlink" title="1* UART线控制寄存器(ULCONn)"></a>1* UART线控制寄存器(ULCONn)</h4><ul>
<li><p>S3C44B0有2个UART线控制寄存器，ULCON0和ULCON1。</p>
</li>
<li><p>S3C2410有三个UART控制寄存器，ULCON0，ULCON1和ULCON2。</p>
<img src="https://cdn.megalomania.icu/images/49f8e8d1a8a1521c2776c5802b2180b3.png">

<img src="https://cdn.megalomania.icu/images/e1a86fbe2bb55347323298bf7a97f313.png">

</li>
</ul>
<h4 id="2-UART控制寄存器UCONn"><a href="#2-UART控制寄存器UCONn" class="headerlink" title="2* UART控制寄存器UCONn"></a>2* UART控制寄存器UCONn</h4><ul>
<li><p>S3C44B0有2个UART控制寄存器：UCON0和UCON1。</p>
</li>
<li><p>S3C2410有三个UART控制寄存器：UCON0，UCON1和UCON2。</p>
<img src="https://cdn.megalomania.icu/images/7d856c22a71503a06f1831b694547843.png">

<img src="https://cdn.megalomania.icu/images/0c975797c4859a504000e6b0f7b1bce6.png">

</li>
</ul>
<h4 id="3-UART-FIFO控制寄存器"><a href="#3-UART-FIFO控制寄存器" class="headerlink" title="3* UART FIFO控制寄存器"></a>3* UART FIFO控制寄存器</h4><ul>
<li><p>S3C44B0有2个UART FIFO控制寄存器：UFCON0和UFCON1。</p>
</li>
<li><p>S3C2410有3个UART FIFO控制寄存器：UFCON0，UFCON1和UFCON2。</p>
<img src="https://cdn.megalomania.icu/images/66e8e0a6e442226d74db9b0c6cb5e612.png">

<img src="https://cdn.megalomania.icu/images/9fcebd9adcf3923ae21b72afecf3a2b0.png">

</li>
</ul>
<h4 id="4-UART调制解调器控制寄存器"><a href="#4-UART调制解调器控制寄存器" class="headerlink" title="4* UART调制解调器控制寄存器"></a>4* UART调制解调器控制寄存器</h4><ul>
<li>S3C44B0有2个UART调制解调器控制寄存器，UMCON0和UMCON1。</li>
<li>S3C2410有3个UART调制解调器控制寄存器：UMCON0，UMCON1和UMCON2。</li>
</ul>
<h4 id="5-UART-发送-接收状态寄存器"><a href="#5-UART-发送-接收状态寄存器" class="headerlink" title="5* UART 发送/接收状态寄存器"></a>5* UART 发送/接收状态寄存器</h4><ul>
<li><p>S3C44B0有2个UART发送/接收状态寄存器：UTRSTAT0和UTRSTAT1。</p>
</li>
<li><p>S3C2410有3个UART发送/接收状态寄存器：UTRSTAT0，UTRSTAT1和UTRSTAT2。</p>
<img src="https://cdn.megalomania.icu/images/4c275a98af46977eb02b11d46cecde9f.png">

<img src="https://cdn.megalomania.icu/images/d1bf181863645a83d93ee7eb94aafaaa.png">

</li>
</ul>
<h4 id="6-UART错误状态寄存器"><a href="#6-UART错误状态寄存器" class="headerlink" title="6* UART错误状态寄存器"></a>6* UART错误状态寄存器</h4><ul>
<li>S3C44B0有2个UART错误状态寄存器：UERSTAT0和UERSTAT1。</li>
<li>S3C2410有3个UART错误状态寄存器：UERSTAT0，UERSTAT1和UERSTAT2</li>
</ul>
<h4 id="7-UART-FIFO状态寄存器"><a href="#7-UART-FIFO状态寄存器" class="headerlink" title="7* UART FIFO状态寄存器"></a>7* UART FIFO状态寄存器</h4><ul>
<li><p>S3C44B0有2个UART FIFO状态寄存器：UFSTAT0和UFSTAT1。</p>
</li>
<li><p>S3C2410有3个UART FIFO状态寄存器：UFSTAT0，UFSTAT1和UFSTAT2。</p>
<img src="https://cdn.megalomania.icu/images/569323c30cf2528416df71f55d637e42.png">

<img src="https://cdn.megalomania.icu/images/f35c79457aecb931b880bd74a7a1b5c2.png">

</li>
</ul>
<h4 id="8-UART-调制解调器状态寄存器"><a href="#8-UART-调制解调器状态寄存器" class="headerlink" title="8* UART 调制解调器状态寄存器"></a>8* UART 调制解调器状态寄存器</h4><ul>
<li>S3C44B0有2个UART调制解调器状态寄存器：UMSTAT0和UMSTAT1。</li>
<li>S3C2410也有2个UART调制解调器状态寄存器：UMSTAT0和UMSTAT1</li>
</ul>
<h4 id="9-UART-发送缓冲寄存器"><a href="#9-UART-发送缓冲寄存器" class="headerlink" title="9* UART 发送缓冲寄存器"></a>9* UART 发送缓冲寄存器</h4><ul>
<li><p>S3C44B0有2个UART发送缓冲寄存器：UTXH0和UTXH1。</p>
</li>
<li><p>S3C2410也有3个UART发送缓冲寄存器：UTXH0、UTXH1和UTXH2。</p>
<img src="https://cdn.megalomania.icu/images/928feeb718b34f6048991a6596772322.png">

<img src="https://cdn.megalomania.icu/images/dcc17685b55dcb19f010ba839fc7c6a2.png">

</li>
</ul>
<h4 id="10-UART-接收缓冲寄存器"><a href="#10-UART-接收缓冲寄存器" class="headerlink" title="10* UART 接收缓冲寄存器"></a>10* UART 接收缓冲寄存器</h4><ul>
<li><p>S3C44B0有2个UART发送缓冲寄存器：URXH0和URXH1。</p>
</li>
<li><p>S3C2410也有3个UART发送缓冲寄存器：URXH0、URXH1和URXH2。</p>
<img src="https://cdn.megalomania.icu/images/0b7a9e4913027782d17afec5870e4504.png">

<img src="https://cdn.megalomania.icu/images/6fdb4274025c34ce098315a0dcf930fc.png">

</li>
</ul>
<h1 id="九、实验源码"><a href="#九、实验源码" class="headerlink" title="九、实验源码"></a>九、实验源码</h1><ol>
<li>对内存地址0X3000开始的100个字内单元填⼊0X10000001—-0X10000064,将每个字单元进⾏64位累加，结果送⼊其后容闲内存单元</li>
</ol>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">       <span class="meta">AREA</span> exp,<span class="meta">CODE</span>,<span class="meta">READONLY</span></span><br><span class="line">       <span class="meta">ENTRY</span></span><br><span class="line">       <span class="meta">CODE32</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">START</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="number">#0x3000</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="number">#0x10000001</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R2</span>,<span class="number">#0x64</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">LOOP1</span></span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R1</span>,[<span class="built_in">R0</span>],<span class="number">#4</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#1</span></span><br><span class="line">       <span class="keyword">SUBS</span> <span class="built_in">R2</span>,<span class="built_in">R2</span>,<span class="number">#1</span></span><br><span class="line">       <span class="keyword">BNE</span> LOOP1</span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="number">#0x3000</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R2</span>,<span class="number">#0x64</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R4</span>,<span class="number">#0</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R3</span>,<span class="number">#0</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">LOOP2</span></span><br><span class="line">       <span class="keyword">LDR</span> <span class="built_in">R1</span>,[<span class="built_in">R0</span>],<span class="number">#4</span></span><br><span class="line">       <span class="keyword">ADDS</span> <span class="built_in">R3</span>,<span class="built_in">R1</span>,<span class="built_in">R3</span></span><br><span class="line">       <span class="keyword">ADC</span> <span class="built_in">R4</span>,<span class="built_in">R4</span>,<span class="number">#0</span></span><br><span class="line">       <span class="keyword">SUBS</span> <span class="built_in">R2</span>,<span class="built_in">R2</span>,<span class="number">#1</span></span><br><span class="line">       <span class="keyword">BNE</span> LOOP2</span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R3</span>,[<span class="built_in">R0</span>],<span class="number">#4</span></span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R4</span>,[<span class="built_in">R0</span>],<span class="number">#4</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">STOP</span></span><br><span class="line">       <span class="keyword">B</span> STOP</span><br><span class="line">       <span class="meta">END</span></span><br></pre></td></tr></table></figure>
<hr>
<p>​    2. 实现整数除法123/22，得出商和余数。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">       <span class="meta">AREA</span> exp,<span class="meta">CODE</span>,<span class="meta">READONLY</span></span><br><span class="line">       <span class="meta">ENTRY</span></span><br><span class="line">       <span class="meta">CODE32</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">START</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="number">#123</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="number">#22</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R2</span>,<span class="number">#0</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">LOOP</span></span><br><span class="line">       <span class="keyword">SUB</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="built_in">R1</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R2</span>,<span class="built_in">R2</span>,<span class="number">#1</span></span><br><span class="line">       <span class="keyword">CMP</span> <span class="built_in">R0</span>,<span class="built_in">R1</span></span><br><span class="line">       <span class="keyword">BCS</span> LOOP</span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R3</span>,<span class="built_in">R0</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">STOP</span></span><br><span class="line">       <span class="keyword">B</span> STOP</span><br><span class="line">       <span class="meta">END</span></span><br></pre></td></tr></table></figure>
<hr>
<p>​    3. 将R0中的数据调换顺序    * 例如： R0=0xAABBCCDD调换顺序后R0＝0xDDCCBBAA</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">       AREA exp,CODE,READONLY</span><br><span class="line">       ENTR</span><br><span class="line">       CODE32</span><br><span class="line">       </span><br><span class="line">START</span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="meta">#0xAA000000</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="meta">#0xBB0000</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="meta">#0xCC00</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="meta">#0xDD</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">AND</span> <span class="built_in">R1</span>,<span class="built_in">R0</span>,<span class="meta">#0xFF000000</span></span><br><span class="line">       <span class="keyword">AND</span> <span class="built_in">R2</span>,<span class="built_in">R0</span>,<span class="meta">#0x00FF0000</span></span><br><span class="line">       <span class="keyword">AND</span> <span class="built_in">R3</span>,<span class="built_in">R0</span>,<span class="meta">#0x0000FF00</span></span><br><span class="line">       <span class="keyword">AND</span> <span class="built_in">R4</span>,<span class="built_in">R0</span>,<span class="meta">#0x000000FF</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="keyword">LSR</span> <span class="meta">#24</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R2</span>,<span class="built_in">R2</span>,<span class="keyword">LSR</span> <span class="meta">#8</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R3</span>,<span class="built_in">R3</span>,<span class="keyword">LSL</span> <span class="meta">#8</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R4</span>,<span class="built_in">R4</span>,<span class="keyword">LSL</span> <span class="meta">#24</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="meta">#0</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="built_in">R1</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="built_in">R2</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="built_in">R3</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="built_in">R4</span></span><br><span class="line">       </span><br><span class="line">STOP</span><br><span class="line">       B STOP</span><br><span class="line">       END</span><br></pre></td></tr></table></figure>
<hr>
<p>​    4. 将整数数组 {0xAABBCC11,0xAABBCC00,0xAABBC</p>
<p>C33,0xAABBCC22,0xAABBCC44}进⾏选择排序。</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">       <span class="meta">AREA</span> exp,<span class="meta">CODE</span>,<span class="meta">READONLY</span></span><br><span class="line">       <span class="meta">ENTRY</span></span><br><span class="line">       <span class="meta">CODE32</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">START</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="number">#0</span></span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="number">#0xAA000000</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#0xBB0000</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#0xCC00</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#0x11</span></span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R1</span>,[<span class="built_in">R0</span>]</span><br><span class="line">       <span class="keyword">SUB</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#0x11</span></span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R1</span>,[<span class="built_in">R0</span>,<span class="number">#4</span>]!</span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#0x33</span></span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R1</span>,[<span class="built_in">R0</span>,<span class="number">#4</span>]!</span><br><span class="line">       <span class="keyword">SUB</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#0x11</span></span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R1</span>,[<span class="built_in">R0</span>,<span class="number">#4</span>]!</span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#0x22</span></span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R1</span>,[<span class="built_in">R0</span>,<span class="number">#4</span>]!</span><br><span class="line">      </span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="number">#16</span></span><br><span class="line">       </span><br><span class="line"><span class="symbol">LOOP1</span></span><br><span class="line">       <span class="keyword">CMP</span> <span class="built_in">R1</span>,<span class="number">#0</span></span><br><span class="line">       <span class="keyword">BEQ</span> STOP</span><br><span class="line">       <span class="keyword">LDR</span> <span class="built_in">R2</span>,[<span class="built_in">R1</span>]</span><br><span class="line">       <span class="keyword">SUB</span> <span class="built_in">R4</span>,<span class="built_in">R1</span>,<span class="number">#4</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">LOOP2</span></span><br><span class="line">       <span class="keyword">LDR</span> <span class="built_in">R3</span>,[<span class="built_in">R4</span>],#-<span class="number">4</span></span><br><span class="line">       <span class="keyword">CMP</span> <span class="built_in">R2</span>,<span class="built_in">R3</span></span><br><span class="line">       <span class="keyword">BCS</span> JUMP</span><br><span class="line">       <span class="keyword">MOV</span> <span class="built_in">R2</span>,<span class="built_in">R3</span></span><br><span class="line">       <span class="keyword">ADD</span> <span class="built_in">R5</span>,<span class="built_in">R4</span>,<span class="number">#4</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">JUMP</span></span><br><span class="line">       <span class="keyword">CMP</span> <span class="built_in">R4</span>,#-<span class="number">4</span></span><br><span class="line">       <span class="keyword">BNE</span> LOOP2</span><br><span class="line">       <span class="keyword">SUB</span> <span class="built_in">R1</span>,<span class="built_in">R1</span>,<span class="number">#4</span></span><br><span class="line">       <span class="keyword">LDR</span> <span class="built_in">R3</span>,[<span class="built_in">R1</span>,<span class="number">#4</span>]</span><br><span class="line">       <span class="keyword">CMP</span> <span class="built_in">R2</span>,<span class="built_in">R3</span></span><br><span class="line">       <span class="keyword">BEQ</span> LOOP1</span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R3</span>,[<span class="built_in">R5</span>]</span><br><span class="line">       <span class="keyword">STR</span> <span class="built_in">R2</span>,[<span class="built_in">R1</span>,<span class="number">#4</span>]</span><br><span class="line">       <span class="keyword">B</span> LOOP1</span><br><span class="line"></span><br><span class="line"><span class="symbol">STOP</span></span><br><span class="line">       <span class="keyword">B</span> STOP</span><br><span class="line">       <span class="meta">END</span></span><br></pre></td></tr></table></figure>
<hr>
<p>​    5. 使用汇编语言调用 C 语言实现 20!。</p>
<ul>
<li>test.s</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">     <span class="meta">EXPORT</span> test</span><br><span class="line">     <span class="meta">AREA</span> test,<span class="meta">CODE</span>,<span class="meta">READONLY</span></span><br><span class="line">     <span class="meta">IMPORT</span> CFUN               </span><br><span class="line">     <span class="meta">ENTRY</span></span><br><span class="line">     <span class="meta">CODE32</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">START</span></span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="number">#20</span></span><br><span class="line">     <span class="keyword">BL</span> CFUN</span><br><span class="line"></span><br><span class="line"><span class="symbol">STOP</span></span><br><span class="line">     <span class="keyword">B</span> STOP</span><br><span class="line">     <span class="meta">END</span></span><br></pre></td></tr></table></figure>
<ul>
<li>main.c</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">CFUN</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">long</span> <span class="keyword">long</span> result=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(i;i&lt;=a;i++)</span><br><span class="line">         result=result*i;</span><br><span class="line">         </span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>​    6. 使用汇编语言调用 C 语言实现 5 个数（5，7，9，11，13）加法。</p>
<ul>
<li>addl.s</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">     <span class="meta">AREA</span> ADDL,<span class="meta">CODE</span>,<span class="meta">READONLY</span></span><br><span class="line">    <span class="meta">IMPORT</span> CAL</span><br><span class="line">    <span class="meta">ENTRY</span></span><br><span class="line">    <span class="meta">CODE32</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">START</span></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">R0</span>,<span class="number">#5</span></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="number">#7</span></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">R2</span>,<span class="number">#9</span></span><br><span class="line">    <span class="keyword">MOV</span> <span class="built_in">R3</span>,<span class="number">#11</span></span><br><span class="line">    <span class="keyword">MOV</span>   <span class="built_in">R4</span>,<span class="number">#13</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">STR</span> <span class="built_in">R4</span>,[<span class="built_in">SP</span>,#-<span class="number">4</span>]!</span><br><span class="line">    <span class="keyword">BL</span> CAL</span><br><span class="line"></span><br><span class="line"><span class="symbol">STOP</span></span><br><span class="line">     <span class="keyword">B</span> STOP</span><br><span class="line">    <span class="meta">END</span></span><br></pre></td></tr></table></figure>
<ul>
<li>main.c</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="constructor">CAL(<span class="params">int</span> <span class="params">a</span>,<span class="params">int</span> <span class="params">b</span>,<span class="params">int</span> <span class="params">c</span>, <span class="params">int</span> <span class="params">d</span>, <span class="params">int</span> <span class="params">e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">int</span> result = a + b + c + d + e;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>​    7. 使用C语言调用汇编语言实现 21!。</p>
<ul>
<li>test.s</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">     <span class="meta">AREA</span> test,<span class="meta">CODE</span>,<span class="meta">READONLY</span></span><br><span class="line">     <span class="meta">EXPORT</span> Factorial</span><br><span class="line"></span><br><span class="line"><span class="symbol">Factorial</span></span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">R7</span>,<span class="built_in">R0</span></span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">R8</span>,<span class="number">#0</span></span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">R9</span>,<span class="number">#0</span></span><br><span class="line">     <span class="keyword">SUB</span> <span class="built_in">R0</span>,<span class="built_in">R7</span>,<span class="number">#1</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Loop</span></span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">R1</span>,<span class="built_in">R8</span></span><br><span class="line">     <span class="keyword">UMULL</span> <span class="built_in">R7</span>,<span class="built_in">R8</span>,<span class="built_in">R0</span>,<span class="built_in">R7</span></span><br><span class="line">     <span class="keyword">MLA</span> <span class="built_in">R8</span>,<span class="built_in">R1</span>,<span class="built_in">R0</span>,<span class="built_in">R8</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">R2</span>,<span class="built_in">R9</span></span><br><span class="line">     <span class="keyword">UMULL</span> <span class="built_in">R1</span>,<span class="built_in">R9</span>,<span class="built_in">R0</span>,<span class="built_in">R1</span></span><br><span class="line">     <span class="keyword">MLA</span> <span class="built_in">R9</span>,<span class="built_in">R2</span>,<span class="built_in">R0</span>,<span class="built_in">R9</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">SUBS</span> <span class="built_in">R0</span>,<span class="built_in">R0</span>,<span class="number">#1</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">BNE</span> Loop</span><br><span class="line">     <span class="keyword">LDR</span> <span class="built_in">R0</span>,<span class="number">=0x00000000</span></span><br><span class="line">     <span class="keyword">STMIA</span> <span class="built_in">R0</span>,&#123;<span class="built_in">R7</span>,<span class="built_in">R8</span>,<span class="built_in">R9</span>&#125;</span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">PC</span>,<span class="built_in">LR</span></span><br></pre></td></tr></table></figure>
<ul>
<li>main.c</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">Factorial</span><span class="params">(<span class="keyword">char</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> num=<span class="number">21</span>;</span><br><span class="line">     Factorial(num);</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>​    8. 使用C语言调用汇编语言实现 5 个数（5，7，9，11，13）加法。</p>
<ul>
<li>test.s</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">     <span class="meta">AREA</span> test,<span class="meta">CODE</span>,<span class="meta">READONLY</span></span><br><span class="line">     <span class="meta">EXPORT</span> Add</span><br><span class="line"></span><br><span class="line"><span class="symbol">Add</span></span><br><span class="line">     <span class="keyword">ADD</span> <span class="built_in">R6</span>,<span class="built_in">R0</span>,<span class="built_in">R1</span></span><br><span class="line">     <span class="keyword">ADD</span> <span class="built_in">R6</span>,<span class="built_in">R6</span>,<span class="built_in">R2</span></span><br><span class="line">     <span class="keyword">ADD</span> <span class="built_in">R6</span>,<span class="built_in">R6</span>,<span class="built_in">R3</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">LDR</span> <span class="built_in">R4</span>,[<span class="built_in">SP</span>,<span class="number">#0</span>]</span><br><span class="line">     <span class="keyword">ADD</span> <span class="built_in">R6</span>,<span class="built_in">R6</span>,<span class="built_in">R4</span></span><br><span class="line">     <span class="keyword">LDR</span> <span class="built_in">R0</span>,<span class="number">=0x00000000</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">STMIA</span> <span class="built_in">R0</span>,&#123;<span class="built_in">R6</span>&#125;</span><br><span class="line">     <span class="keyword">MOV</span> <span class="built_in">PC</span>,<span class="built_in">LR</span></span><br></pre></td></tr></table></figure>
<ul>
<li>main.c</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">extern void <span class="constructor">Add(<span class="params">char</span> <span class="params">a</span>,<span class="params">char</span> <span class="params">b</span>,<span class="params">char</span> <span class="params">c</span>,<span class="params">char</span> <span class="params">d</span>,<span class="params">char</span> <span class="params">e</span>)</span>;</span><br><span class="line">void main(void)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="constructor">Add(5,7,9,11,13)</span>;</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title>【Java】Java学习笔记（3）Java继承作业函数题</title>
    <url>/java_study_note_3/</url>
    <content><![CDATA[<blockquote>
<p><strong>学校小学期Java课程的练习题，留个档便于以后需要时候有例子可以回忆，写的烂的地方请多多包含</strong></p>
</blockquote>
<a id="more"></a>

<h3 id="1、重写父类方法"><a href="#1、重写父类方法" class="headerlink" title="1、重写父类方法"></a>1、重写父类方法</h3><ul>
<li>描述：定义一个大学类，一个重点大学类继承大学类。在父类大学类中定义方法计算分数是否达到录取线，子类重点大学类重写父类方法，在主函数中输入三门成绩，调用重写的方法，判断总成绩是否达到录取线。总成绩大于等于180达到大学录取线，总成绩大于等于220达到重点大学录取线，否则达不到。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">University</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>计算考试分数是否达到大学录取线</span></span><br><span class="line"><span class="comment">    功能描述：计算数学、英语、语文成绩和，如果和大于等于180,则输出&quot;考分&quot;+total+&quot;达到大学最低录取线&quot;，否则输出&quot;考分&quot;+total+&quot;未达到大学最低录取线&quot;</span></span><br><span class="line"><span class="comment">	参数说明：math/english/chinese分别为数学、英语、语文成绩</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enterRule</span><span class="params">(<span class="keyword">double</span> math,<span class="keyword">double</span> english,<span class="keyword">double</span> chinese)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total=math+english+chinese;</span><br><span class="line">        <span class="keyword">if</span>(total&gt;=<span class="number">180</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;考分&quot;</span>+total+<span class="string">&quot;达到大学最低录取线&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;考分&quot;</span>+total+<span class="string">&quot;未达到大学最低录取线&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportantUniversity</span> <span class="keyword">extends</span> <span class="title">University</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>计算考分是否达到重点大学录取线</span></span><br><span class="line"><span class="comment">    功能描述：计算数学、英语、语文成绩和，如果和大于等于220,则输出&quot;考分&quot;+total+&quot;达到重点大学录取线&quot;，否则输出&quot;考分&quot;+total+&quot;未达到重点大学录取线&quot;</span></span><br><span class="line"><span class="comment">	参数说明：math/english/chinese分别为数学、英语、语文成绩</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enterRule</span><span class="params">(<span class="keyword">double</span> math,<span class="keyword">double</span> english,<span class="keyword">double</span> chinese)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total=math+english+chinese;</span><br><span class="line">        <span class="keyword">if</span>(total&gt;=<span class="number">220</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;考分&quot;</span>+total+<span class="string">&quot;达到重点大学录取线&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;考分&quot;</span>+total+<span class="string">&quot;未达到重点大学录取线&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入数学、英语、语文成绩&quot;</span>);</span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       ImportantUniversity univer = <span class="keyword">new</span>  ImportantUniversity();</span><br><span class="line">	   <span class="comment">//<span class="doctag">TODO:</span>调用重写的方法enterRule，输入三门成绩 </span></span><br><span class="line">       univer.enterRule(scanner.nextDouble(),scanner.nextDouble(),scanner.nextDouble());</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入数学、英语、语文成绩&quot;</span>);</span><br><span class="line">       univer = <span class="keyword">new</span>  ImportantUniversity();</span><br><span class="line">		<span class="comment">//<span class="doctag">TODO:</span>调用重写的方法enterRule，输入三门成绩</span></span><br><span class="line">    univer.enterRule(scanner.nextDouble(),scanner.nextDouble(),scanner.nextDouble());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2、输入两个数、分别计算这两个数的积、和"><a href="#2、输入两个数、分别计算这两个数的积、和" class="headerlink" title="2、输入两个数、分别计算这两个数的积、和"></a>2、输入两个数、分别计算这两个数的积、和</h3><ul>
<li>描述：在父类中定义求和方法和求积方法，子类继承父类并重写求积方法，在主函数中用子类调用这两个方法。输入两个数、分别计算这两个数的积、和。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求和方法</span></span><br><span class="line"><span class="comment">    功能描述：计算两个float型输入的数之和</span></span><br><span class="line"><span class="comment">	参数说明：float x,y分别为需要计算的两个数</span></span><br><span class="line"><span class="comment">	返回值说明：两个参数的和</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">computer</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求和方法</span></span><br><span class="line"><span class="comment">    功能描述：计算两个int型输入的数之和</span></span><br><span class="line"><span class="comment">	参数说明：int x,y分别为需要计算的两个数</span></span><br><span class="line"><span class="comment">	返回值说明：两个参数的和</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求乘积方法</span></span><br><span class="line"><span class="comment">    功能描述：计算两个float型输入的数的乘积</span></span><br><span class="line"><span class="comment">	参数说明：float x,y分别为需要计算的两个数</span></span><br><span class="line"><span class="comment">	返回值说明：两个参数的乘积</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">computer</span> <span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> x*y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_5</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      B b=<span class="keyword">new</span> B();</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入两个数计算乘&quot;</span>);</span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	  <span class="comment">//<span class="doctag">TODO:</span>b调用重写的方法computer，参数为两个float型的输入数，将结果赋值给result</span></span><br><span class="line">      <span class="keyword">float</span> result=b.computer(scanner.nextFloat(),scanner.nextFloat());</span><br><span class="line">      System.out.println(result); </span><br><span class="line">      System.out.println(<span class="string">&quot;请输入两个数计算和&quot;</span>);</span><br><span class="line">	  <span class="comment">//<span class="doctag">TODO:</span>b调用继承的方法g，参数为两个int型的输入数，将结果赋值给m</span></span><br><span class="line">	  <span class="keyword">int</span> m=b.g(scanner.nextInt(),scanner.nextInt());</span><br><span class="line">      System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="3、对输入的数字进行打印"><a href="#3、对输入的数字进行打印" class="headerlink" title="3、对输入的数字进行打印"></a>3、对输入的数字进行打印</h3><ul>
<li>描述：定义一个类A，包含一个返回空对象的方法。定义类B继承类A，父类方法的返回值为Object类型，子类重写方法可以返回父类的子类型。定义子类返回值为Integer类型，输入一个数，调用子类的方法，打印输出这个数。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//TODO：返回一个空对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;请输入一个数&quot;</span>);</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		<span class="doctag">TODO:</span>返回一个Integer对象</span></span><br><span class="line"><span class="comment">        使用scanner输入一个整数，作为构造方法的参数</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(scanner.nextInt());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">       B b=<span class="keyword">new</span> B();</span><br><span class="line">       Integer t=b.get();</span><br><span class="line">       System.out.println(t.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4、计算一个数的平均数和1-2倍数"><a href="#4、计算一个数的平均数和1-2倍数" class="headerlink" title="4、计算一个数的平均数和1/2倍数"></a>4、计算一个数的平均数和1/2倍数</h3><ul>
<li>描述：定义一个父类Sum，一个子类Average继承Sum，子类使用super访问和调用隐藏的父类成员变量和方法，输入一个数n，计算1…n之和的平均数、2/1的倍数</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求和方法</span></span><br><span class="line"><span class="comment">    功能描述：计算1-n的和  循环计算：sum=sum+i 从1到n</span></span><br><span class="line"><span class="comment">    参数说明：无</span></span><br><span class="line"><span class="comment">    返回值说明：1-n的和</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">float</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            sum=sum+i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Average</span> <span class="keyword">extends</span> <span class="title">Sum</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求平均数</span></span><br><span class="line"><span class="comment">    功能描述：使用super关键字将本类n赋值给父类n,然后调用父类f方法计算和，在除以n求平均数</span></span><br><span class="line"><span class="comment">    参数说明：无</span></span><br><span class="line"><span class="comment">    返回值说明：平均数的值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.n=n;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.f()/n;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>求1/2倍数</span></span><br><span class="line"><span class="comment">    功能描述：调用父类f方法计算和，再求和的1/2倍数</span></span><br><span class="line"><span class="comment">    参数说明：无</span></span><br><span class="line"><span class="comment">    返回值说明：1/2倍数值</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">   <span class="function"><span class="keyword">float</span> <span class="title">g</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="keyword">float</span> temp=<span class="keyword">super</span>.f()/<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">return</span> temp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_7</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">       Average aver=<span class="keyword">new</span> Average();</span><br><span class="line">       System.out.println(<span class="string">&quot;请输入一个数n计算1..n和的平均数、2/1的倍数&quot;</span>);</span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       aver.n = scanner.nextInt();</span><br><span class="line">       <span class="keyword">float</span> resultOne=aver.f();</span><br><span class="line">       <span class="keyword">float</span> resultTwo=aver.g();</span><br><span class="line">       System.out.println(<span class="string">&quot;resultOne=&quot;</span>+resultOne);</span><br><span class="line">       System.out.println(<span class="string">&quot;resultTwo=&quot;</span>+resultTwo);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5、对输入的字符串进行打印输出"><a href="#5、对输入的字符串进行打印输出" class="headerlink" title="5、对输入的字符串进行打印输出"></a>5、对输入的字符串进行打印输出</h3><ul>
<li>描述：定义一个父类Student，子类UniverStudent继承父类，使用super调用父类构造方法，根据提示输入字符串，实例化一个子类对象并输出结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> number;String name;</span><br><span class="line">   Student() &#123;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>本地变量赋值并打印</span></span><br><span class="line"><span class="comment">    功能描述：将形参赋值给本地变量，然后打印输出</span></span><br><span class="line"><span class="comment">	参数说明：number,name赋值给本地变量number,name</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">   Student(<span class="keyword">int</span> number,String name) &#123;</span><br><span class="line">       <span class="keyword">this</span>.number=number;</span><br><span class="line">       <span class="keyword">this</span>.name=name;</span><br><span class="line">       System.out.println(<span class="string">&quot;我的名字是:&quot;</span> +name+ <span class="string">&quot;学号是:&quot;</span>+number);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UniverStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   String 婚否;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	<span class="doctag">TODO:</span>本地变量赋值并打印</span></span><br><span class="line"><span class="comment">    使用super调用父类构造方法,将形参传入，然后将b赋给本地变量，并打印输出</span></span><br><span class="line"><span class="comment">	参数说明：number,name,b,分别为学号、姓名、婚否状态</span></span><br><span class="line"><span class="comment">	返回值说明：无</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">   UniverStudent(<span class="keyword">int</span> number,String name,String b) &#123;</span><br><span class="line">       <span class="keyword">super</span>(number,name);</span><br><span class="line">       婚否=b;</span><br><span class="line">       System.out.println(<span class="string">&quot;婚否=&quot;</span>+b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_8</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入姓名:&quot;</span>);</span><br><span class="line">	   Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	   String next = scanner.next();</span><br><span class="line">	   System.out.println(<span class="string">&quot;请输入年龄:&quot;</span>);</span><br><span class="line">	   <span class="keyword">int</span> nextInt =scanner.nextInt();</span><br><span class="line">	   System.out.println(<span class="string">&quot;请输入婚否：&quot;</span>);</span><br><span class="line">	   String next1 = scanner.next();</span><br><span class="line">	   <span class="comment">//<span class="doctag">TODO:</span>初始化UniverStudent对象</span></span><br><span class="line">	   UniverStudent stud= <span class="keyword">new</span> UniverStudent(nextInt,next,next1);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6、计算圆面积"><a href="#6、计算圆面积" class="headerlink" title="6、计算圆面积"></a>6、计算圆面积</h3><ul>
<li>描述：定义一个类A，包含常量PI，以及求圆面积的方法。输入半径的值，利用求圆面积方法计算面积，并输出结果。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">double</span> PI=<span class="number">3.1415926</span>;<span class="comment">// PI是常量</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  <span class="doctag">TODO:</span>求圆面积</span></span><br><span class="line"><span class="comment">  功能描述：根据计算圆面积的公式，编写代码，求出圆的面积</span></span><br><span class="line"><span class="comment">  参数说明：r为半径</span></span><br><span class="line"><span class="comment">  返回值说明：圆面积</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">final</span> <span class="keyword">double</span> r)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> PI*r*r;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        A a=<span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入圆半径：&quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;面积：&quot;</span>+a.getArea(scanner.nextDouble()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7、输入字符串和两个数字，打印字符串并计算两个数乘积"><a href="#7、输入字符串和两个数字，打印字符串并计算两个数乘积" class="headerlink" title="7、输入字符串和两个数字，打印字符串并计算两个数乘积"></a>7、输入字符串和两个数字，打印字符串并计算两个数乘积</h3><ul>
<li>描述：定义一个父类Anthropoid，子类People继承父类。实例化一个子类对象并向上转型，输入一个字符串和两个数字，父类对象调用子类的方法，打印输出字符串内容，和两个数字乘积。</li>
<li>代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Anthropoid</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       System.out.println(s);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">Anthropoid</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">computer</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//<span class="doctag">TODO:</span>计算a与b的乘积，然后打印输出该值</span></span><br><span class="line">    System.out.println(a*b);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;***&quot;</span>+s+<span class="string">&quot;***&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_10</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      Anthropoid monkey;</span><br><span class="line">      People geng = <span class="keyword">new</span> People();</span><br><span class="line">      monkey = geng ; <span class="comment">//monkey是People对象geng的上转型对象</span></span><br><span class="line">      System.out.println(<span class="string">&quot;请输入字符串 &quot;</span>);</span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	  monkey.crySpeak(scanner.next());</span><br><span class="line">	  <span class="comment">//<span class="doctag">TODO:</span>把上转型对象强制转化为子类的对象 将monkey转化为People</span></span><br><span class="line">	  People people=(People)monkey;</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入两个数字：&quot;</span>);</span><br><span class="line">     people.computer(scanner.nextInt(),scanner.nextInt());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="8、对输入的字符进行打印"><a href="#8、对输入的字符进行打印" class="headerlink" title="8、对输入的字符进行打印"></a>8、对输入的字符进行打印</h3><ul>
<li>描述：定义一个父类动物，子类猫、狗继承动物类。输入狗叫和猫叫的内容，利用多态，调用子类方法，输出狗猫叫的内容。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">(String call)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span> <span class="keyword">extends</span> <span class="title">animal</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">(String call)</span> </span>&#123;</span><br><span class="line">      System.out.println(call);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span> <span class="keyword">extends</span> <span class="title">animal</span>  </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">(String call)</span> </span>&#123;</span><br><span class="line">      System.out.println(call);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_11</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        animal animal;</span><br><span class="line">        animal = <span class="keyword">new</span> dog();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入狗叫：&quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	  <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  <span class="doctag">TODO:</span>多态实现   使用animal调用cry方法</span></span><br><span class="line"><span class="comment">      方法参数为键盘输入的内容</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">        animal.cry(scanner.next());</span><br><span class="line">        animal=<span class="keyword">new</span> cat();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入猫叫：&quot;</span>);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  <span class="doctag">TODO:</span>多态实现   使用animal调用cry方法</span></span><br><span class="line"><span class="comment">      方法参数为键盘输入的内容</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">        animal.cry(scanner.next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="9、对输入字符串打印"><a href="#9、对输入字符串打印" class="headerlink" title="9、对输入字符串打印"></a>9、对输入字符串打印</h3><ul>
<li>描述：定义一个抽象类GirlFriend，包含两个抽象方法。定义两个子类继承抽象类并实现抽象方法，定义一个类Boy，包含抽象类对象，以及调用抽象类的方法。获取输入的字符串，利用多态特性，分别调用两个子类的方法，打印输出字符串内容。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlFriend</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">(Scanner scanner)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cooking</span><span class="params">(Scanner scanner)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChinaGirlFriend</span> <span class="keyword">extends</span> <span class="title">GirlFriend</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">(Scanner scanner)</span></span>&#123;</span><br><span class="line">	   System.out.println(<span class="string">&quot;请输入中国女孩说的话:&quot;</span>);</span><br><span class="line">       System.out.println(scanner.next());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">cooking</span><span class="params">(Scanner scanner)</span></span>&#123;</span><br><span class="line">	   System.out.println(<span class="string">&quot;请输入中国女孩做的饭:&quot;</span>);</span><br><span class="line">       System.out.println(scanner.next());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AmericanGirlFriend</span> <span class="keyword">extends</span> <span class="title">GirlFriend</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">(Scanner scanner)</span></span>&#123;</span><br><span class="line">	   System.out.println(<span class="string">&quot;请输入美国女孩说的话:&quot;</span>);</span><br><span class="line">	   System.out.println(scanner.next());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">cooking</span><span class="params">(Scanner scanner)</span></span>&#123;</span><br><span class="line">	   System.out.println(<span class="string">&quot;请输入美国女孩做的饭:&quot;</span>);</span><br><span class="line">	   System.out.println(scanner.next());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line">   GirlFriend friend;</span><br><span class="line">   Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setGirlfriend</span><span class="params">(GirlFriend f)</span></span>&#123;</span><br><span class="line">       friend = f;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">showGirlFriend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      friend.speak(scanner);</span><br><span class="line">      friend.cooking(scanner);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_12</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      GirlFriend girl = <span class="keyword">new</span> ChinaGirlFriend(); <span class="comment">//girl是上转型对象</span></span><br><span class="line">      Boy boy = <span class="keyword">new</span> Boy();</span><br><span class="line">	  <span class="comment">//<span class="doctag">TODO:</span>boy调用setGirlfriend、showGirlFriend两个方法</span></span><br><span class="line">      boy.setGirlfriend(girl);</span><br><span class="line">      boy.showGirlFriend();</span><br><span class="line">      girl = <span class="keyword">new</span> AmericanGirlFriend(); <span class="comment">//girl是上转型对象</span></span><br><span class="line">	  <span class="comment">//<span class="doctag">TODO:</span>boy调用setGirlfriend、showGirlFriend两个方法</span></span><br><span class="line">	    boy.setGirlfriend(girl);</span><br><span class="line">      boy.showGirlFriend();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="10、根据提示信息，输入移到、联通的手机号，然后输出卡的类型和手机号"><a href="#10、根据提示信息，输入移到、联通的手机号，然后输出卡的类型和手机号" class="headerlink" title="10、根据提示信息，输入移到、联通的手机号，然后输出卡的类型和手机号"></a>10、根据提示信息，输入移到、联通的手机号，然后输出卡的类型和手机号</h3><ul>
<li>描述：定义一个抽象类SIM，定义中国移动类和中国联通类继承SIM，定义一个手机类，包含使用SIM卡的方法，和显示卡信息的方法。利用多态性质，输入移动卡手机号，然后输出卡类型和手机号；输入联通卡手机号，然后输出卡类型和和手机号。</li>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SIM</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String n)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">giveNumber</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">giveCorpName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SIMOfChinaMobile</span> <span class="keyword">extends</span> <span class="title">SIM</span> </span>&#123;</span><br><span class="line">    String number;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        number = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">giveNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">giveCorpName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;中国移动&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SIMOfChinaUnicom</span> <span class="keyword">extends</span> <span class="title">SIM</span> </span>&#123;</span><br><span class="line">    String number;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        number = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">giveNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">giveCorpName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;联通&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobileTelephone</span> </span>&#123;</span><br><span class="line">   SIM card;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useSIM</span><span class="params">(SIM card)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.card=card;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        <span class="doctag">TODO:</span>打印输出卡号提供者和手机号码，即调用card的giveCorpName、giveNumber方法</span></span><br><span class="line"><span class="comment">        输出格式为：</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;使用的卡是:&quot;+ 提供者 +&quot;提供的&quot;);</span></span><br><span class="line"><span class="comment">	    System.out.println(&quot;手机号码是:&quot;+ 手机号码);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;使用的卡是:&quot;</span>+ card.giveCorpName() +<span class="string">&quot;提供的&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;手机号码是:&quot;</span>+ card.giveNumber());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example5_13</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      MobileTelephone telephone = <span class="keyword">new</span> MobileTelephone ();</span><br><span class="line">      SIM sim=<span class="keyword">new</span> SIMOfChinaMobile();</span><br><span class="line">      Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入移动卡手机号：&quot;</span>);</span><br><span class="line">	  <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  <span class="doctag">TODO:</span>将输入的移动手机号设置为sim的number</span></span><br><span class="line"><span class="comment">      然后手机使用这个sim</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">      sim.setNumber(scanner.next());</span><br><span class="line">      telephone.useSIM(sim);</span><br><span class="line">      telephone.showMess();</span><br><span class="line">      sim=<span class="keyword">new</span> SIMOfChinaUnicom();</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入联通手机号：&quot;</span>);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">	  <span class="doctag">TODO:</span>将输入的联通手机号设置为sim的number</span></span><br><span class="line"><span class="comment">      然后手机使用这个sim</span></span><br><span class="line"><span class="comment">	  */</span></span><br><span class="line">      sim.setNumber(scanner.next());</span><br><span class="line">      telephone.useSIM(sim);</span><br><span class="line">      telephone.showMess();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>练习</tag>
      </tags>
  </entry>
</search>
